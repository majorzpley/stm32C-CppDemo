ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.cpp"
  18              		.section	.text.Error_Handler,"ax",%progbits
  19              		.align	1
  20              		.global	Error_Handler
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	Error_Handler:
  26              	.LFB1577:
   1:Core/Src/main.cpp **** /* USER CODE BEGIN Header */
   2:Core/Src/main.cpp **** /**
   3:Core/Src/main.cpp ****  ******************************************************************************
   4:Core/Src/main.cpp ****  * @file           : main.c
   5:Core/Src/main.cpp ****  * @brief          : Main program body
   6:Core/Src/main.cpp ****  ******************************************************************************
   7:Core/Src/main.cpp ****  * @attention
   8:Core/Src/main.cpp ****  *
   9:Core/Src/main.cpp ****  * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.cpp ****  * All rights reserved.
  11:Core/Src/main.cpp ****  *
  12:Core/Src/main.cpp ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.cpp ****  * in the root directory of this software component.
  14:Core/Src/main.cpp ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.cpp ****  *
  16:Core/Src/main.cpp ****  ******************************************************************************
  17:Core/Src/main.cpp ****  */
  18:Core/Src/main.cpp **** /* USER CODE END Header */
  19:Core/Src/main.cpp **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.cpp **** #include "main.h"
  21:Core/Src/main.cpp **** #include "crc.h"
  22:Core/Src/main.cpp **** #include "gpio.h"
  23:Core/Src/main.cpp **** #include <vector>
  24:Core/Src/main.cpp **** #include <string>
  25:Core/Src/main.cpp **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/main.cpp **** /* USER CODE BEGIN Includes */
  27:Core/Src/main.cpp **** /* USER CODE END Includes */
  28:Core/Src/main.cpp **** 
  29:Core/Src/main.cpp **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.cpp **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.cpp **** 
  32:Core/Src/main.cpp **** /* USER CODE END PTD */
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 2


  33:Core/Src/main.cpp **** 
  34:Core/Src/main.cpp **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.cpp **** /* USER CODE BEGIN PD */
  36:Core/Src/main.cpp **** 
  37:Core/Src/main.cpp **** /* USER CODE END PD */
  38:Core/Src/main.cpp **** 
  39:Core/Src/main.cpp **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.cpp **** /* USER CODE BEGIN PM */
  41:Core/Src/main.cpp **** 
  42:Core/Src/main.cpp **** /* USER CODE END PM */
  43:Core/Src/main.cpp **** 
  44:Core/Src/main.cpp **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.cpp **** 
  46:Core/Src/main.cpp **** /* USER CODE BEGIN PV */
  47:Core/Src/main.cpp **** 
  48:Core/Src/main.cpp **** /* USER CODE END PV */
  49:Core/Src/main.cpp **** 
  50:Core/Src/main.cpp **** /* Private function prototypes -----------------------------------------------*/
  51:Core/Src/main.cpp **** void SystemClock_Config(void);
  52:Core/Src/main.cpp **** /* USER CODE BEGIN PFP */
  53:Core/Src/main.cpp **** // int _isatty(int fd);
  54:Core/Src/main.cpp **** // int _write(int fd, char *ptr, int len);
  55:Core/Src/main.cpp **** // int _close(int fd);
  56:Core/Src/main.cpp **** // int _lseek(int fd, int ptr, int dir);
  57:Core/Src/main.cpp **** // int _read(int fd, char *ptr, int len);
  58:Core/Src/main.cpp **** // int _fstat(int fd, struct stat *st);
  59:Core/Src/main.cpp **** /* USER CODE END PFP */
  60:Core/Src/main.cpp **** 
  61:Core/Src/main.cpp **** /* Private user code ---------------------------------------------------------*/
  62:Core/Src/main.cpp **** /* USER CODE BEGIN 0 */
  63:Core/Src/main.cpp **** #define LED0 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET)
  64:Core/Src/main.cpp **** #define LED1 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET)
  65:Core/Src/main.cpp **** using namespace std;
  66:Core/Src/main.cpp **** /* USER CODE END 0 */
  67:Core/Src/main.cpp **** 
  68:Core/Src/main.cpp **** /**
  69:Core/Src/main.cpp ****  * @brief  The application entry point.
  70:Core/Src/main.cpp ****  * @retval int
  71:Core/Src/main.cpp ****  */
  72:Core/Src/main.cpp **** int main(void)
  73:Core/Src/main.cpp **** {
  74:Core/Src/main.cpp ****   /* USER CODE BEGIN 1 */
  75:Core/Src/main.cpp **** 
  76:Core/Src/main.cpp ****   /* USER CODE END 1 */
  77:Core/Src/main.cpp **** 
  78:Core/Src/main.cpp ****   /* MCU Configuration--------------------------------------------------------*/
  79:Core/Src/main.cpp **** 
  80:Core/Src/main.cpp ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  81:Core/Src/main.cpp ****   HAL_Init();
  82:Core/Src/main.cpp **** 
  83:Core/Src/main.cpp ****   /* USER CODE BEGIN Init */
  84:Core/Src/main.cpp **** 
  85:Core/Src/main.cpp ****   /* USER CODE END Init */
  86:Core/Src/main.cpp **** 
  87:Core/Src/main.cpp ****   /* Configure the system clock */
  88:Core/Src/main.cpp ****   SystemClock_Config();
  89:Core/Src/main.cpp **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 3


  90:Core/Src/main.cpp ****   /* USER CODE BEGIN SysInit */
  91:Core/Src/main.cpp **** 
  92:Core/Src/main.cpp ****   /* USER CODE END SysInit */
  93:Core/Src/main.cpp **** 
  94:Core/Src/main.cpp ****   /* Initialize all configured peripherals */
  95:Core/Src/main.cpp ****   MX_GPIO_Init();
  96:Core/Src/main.cpp ****   MX_CRC_Init();
  97:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
  98:Core/Src/main.cpp ****   /* USER CODE END 2 */
  99:Core/Src/main.cpp **** 
 100:Core/Src/main.cpp ****   /* Infinite loop */
 101:Core/Src/main.cpp ****   /* USER CODE BEGIN WHILE */
 102:Core/Src/main.cpp ****   while (1)
 103:Core/Src/main.cpp ****   {
 104:Core/Src/main.cpp ****     LED0;
 105:Core/Src/main.cpp ****     HAL_Delay(100);
 106:Core/Src/main.cpp ****     LED1;
 107:Core/Src/main.cpp ****     HAL_Delay(100);
 108:Core/Src/main.cpp ****     string str("hello c++");
 109:Core/Src/main.cpp ****     str.append("cppdemo!");
 110:Core/Src/main.cpp ****     vector<std::string> sVec;
 111:Core/Src/main.cpp ****     sVec.push_back("hello c++ 1\n");
 112:Core/Src/main.cpp ****     sVec.push_back("hello c++ 2\n");
 113:Core/Src/main.cpp ****     sVec.push_back("hello c++ 3\n");
 114:Core/Src/main.cpp ****     sVec.push_back("hello c++ 4\n");
 115:Core/Src/main.cpp ****     sVec.push_back("hello c++ 5\n");
 116:Core/Src/main.cpp ****     for (auto s : sVec)
 117:Core/Src/main.cpp ****     {
 118:Core/Src/main.cpp ****       HAL_Delay(100);
 119:Core/Src/main.cpp ****     }
 120:Core/Src/main.cpp ****     HAL_Delay(500);
 121:Core/Src/main.cpp ****     /* USER CODE END WHILE */
 122:Core/Src/main.cpp **** 
 123:Core/Src/main.cpp ****     /* USER CODE BEGIN 3 */
 124:Core/Src/main.cpp ****   }
 125:Core/Src/main.cpp ****   /* USER CODE END 3 */
 126:Core/Src/main.cpp **** }
 127:Core/Src/main.cpp **** 
 128:Core/Src/main.cpp **** /**
 129:Core/Src/main.cpp ****  * @brief System Clock Configuration
 130:Core/Src/main.cpp ****  * @retval None
 131:Core/Src/main.cpp ****  */
 132:Core/Src/main.cpp **** void SystemClock_Config(void)
 133:Core/Src/main.cpp **** {
 134:Core/Src/main.cpp ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 135:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 136:Core/Src/main.cpp **** 
 137:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 138:Core/Src/main.cpp ****    * in the RCC_OscInitTypeDef structure.
 139:Core/Src/main.cpp ****    */
 140:Core/Src/main.cpp ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 141:Core/Src/main.cpp ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 142:Core/Src/main.cpp ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 143:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 144:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 145:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 146:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 4


 147:Core/Src/main.cpp ****   {
 148:Core/Src/main.cpp ****     Error_Handler();
 149:Core/Src/main.cpp ****   }
 150:Core/Src/main.cpp **** 
 151:Core/Src/main.cpp ****   /** Initializes the CPU, AHB and APB buses clocks
 152:Core/Src/main.cpp ****    */
 153:Core/Src/main.cpp ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 154:Core/Src/main.cpp ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 155:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 156:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 157:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 158:Core/Src/main.cpp **** 
 159:Core/Src/main.cpp ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 160:Core/Src/main.cpp ****   {
 161:Core/Src/main.cpp ****     Error_Handler();
 162:Core/Src/main.cpp ****   }
 163:Core/Src/main.cpp **** }
 164:Core/Src/main.cpp **** 
 165:Core/Src/main.cpp **** /* USER CODE BEGIN 4 */
 166:Core/Src/main.cpp **** /* USER CODE END 4 */
 167:Core/Src/main.cpp **** 
 168:Core/Src/main.cpp **** /**
 169:Core/Src/main.cpp ****  * @brief  This function is executed in case of error occurrence.
 170:Core/Src/main.cpp ****  * @retval None
 171:Core/Src/main.cpp ****  */
 172:Core/Src/main.cpp **** void Error_Handler(void)
 173:Core/Src/main.cpp **** {
  27              		.loc 1 173 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 174:Core/Src/main.cpp ****   /* USER CODE BEGIN Error_Handler_Debug */
 175:Core/Src/main.cpp ****   /* User can add his own implementation to report the HAL error return state */
 176:Core/Src/main.cpp ****   __disable_irq();
  33              		.loc 1 176 3 view .LVU1
  34              	.LBB637:
  35              	.LBI637:
  36              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 5


  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 6


  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 7


 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
  37              		.loc 2 140 27 view .LVU2
  38              	.LBB638:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  39              		.loc 2 142 3 view .LVU3
  40              		.syntax unified
  41              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  42 0000 72B6     		cpsid i
  43              	@ 0 "" 2
  44              		.thumb
  45              		.syntax unified
  46              	.L2:
  47              	.LBE638:
  48              	.LBE637:
 177:Core/Src/main.cpp ****   while (1)
  49              		.loc 1 177 3 discriminator 1 view .LVU4
  50              		.loc 1 177 3 discriminator 1 view .LVU5
  51 0002 FEE7     		b	.L2
  52              		.cfi_endproc
  53              	.LFE1577:
  55              		.section	.text._Z18SystemClock_Configv,"ax",%progbits
  56              		.align	1
  57              		.global	_Z18SystemClock_Configv
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  62              	_Z18SystemClock_Configv:
  63              	.LFB1576:
 133:Core/Src/main.cpp ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  64              		.loc 1 133 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 64
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68 0000 00B5     		push	{lr}
  69              	.LCFI0:
  70              		.cfi_def_cfa_offset 4
  71              		.cfi_offset 14, -4
  72 0002 91B0     		sub	sp, sp, #68
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 72
 134:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  75              		.loc 1 134 3 view .LVU7
 134:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  76              		.loc 1 134 22 is_stmt 0 view .LVU8
  77 0004 2822     		movs	r2, #40
  78 0006 0021     		movs	r1, #0
  79 0008 06A8     		add	r0, sp, #24
  80 000a FFF7FEFF 		bl	memset
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 8


  81              	.LVL0:
 135:Core/Src/main.cpp **** 
  82              		.loc 1 135 3 is_stmt 1 view .LVU9
 135:Core/Src/main.cpp **** 
  83              		.loc 1 135 22 is_stmt 0 view .LVU10
  84 000e 0023     		movs	r3, #0
  85 0010 0193     		str	r3, [sp, #4]
  86 0012 0293     		str	r3, [sp, #8]
  87 0014 0393     		str	r3, [sp, #12]
  88 0016 0493     		str	r3, [sp, #16]
  89 0018 0593     		str	r3, [sp, #20]
 140:Core/Src/main.cpp ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  90              		.loc 1 140 3 is_stmt 1 view .LVU11
 140:Core/Src/main.cpp ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  91              		.loc 1 140 36 is_stmt 0 view .LVU12
  92 001a 0223     		movs	r3, #2
  93 001c 0693     		str	r3, [sp, #24]
 141:Core/Src/main.cpp ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  94              		.loc 1 141 3 is_stmt 1 view .LVU13
 141:Core/Src/main.cpp ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  95              		.loc 1 141 30 is_stmt 0 view .LVU14
  96 001e 0122     		movs	r2, #1
  97 0020 0A92     		str	r2, [sp, #40]
 142:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  98              		.loc 1 142 3 is_stmt 1 view .LVU15
 142:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  99              		.loc 1 142 41 is_stmt 0 view .LVU16
 100 0022 1022     		movs	r2, #16
 101 0024 0B92     		str	r2, [sp, #44]
 143:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 102              		.loc 1 143 3 is_stmt 1 view .LVU17
 143:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 103              		.loc 1 143 34 is_stmt 0 view .LVU18
 104 0026 0D93     		str	r3, [sp, #52]
 144:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 105              		.loc 1 144 3 is_stmt 1 view .LVU19
 145:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 106              		.loc 1 145 3 view .LVU20
 145:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 107              		.loc 1 145 32 is_stmt 0 view .LVU21
 108 0028 4FF46013 		mov	r3, #3670016
 109 002c 0F93     		str	r3, [sp, #60]
 146:Core/Src/main.cpp ****   {
 110              		.loc 1 146 3 is_stmt 1 view .LVU22
 146:Core/Src/main.cpp ****   {
 111              		.loc 1 146 24 is_stmt 0 view .LVU23
 112 002e 06A8     		add	r0, sp, #24
 113 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 114              	.LVL1:
 146:Core/Src/main.cpp ****   {
 115              		.loc 1 146 3 view .LVU24
 116 0034 80B9     		cbnz	r0, .L7
 153:Core/Src/main.cpp ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 117              		.loc 1 153 3 is_stmt 1 view .LVU25
 153:Core/Src/main.cpp ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 118              		.loc 1 153 31 is_stmt 0 view .LVU26
 119 0036 0F23     		movs	r3, #15
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 9


 120 0038 0193     		str	r3, [sp, #4]
 154:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 121              		.loc 1 154 3 is_stmt 1 view .LVU27
 154:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 122              		.loc 1 154 34 is_stmt 0 view .LVU28
 123 003a 0221     		movs	r1, #2
 124 003c 0291     		str	r1, [sp, #8]
 155:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 125              		.loc 1 155 3 is_stmt 1 view .LVU29
 155:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 126              		.loc 1 155 35 is_stmt 0 view .LVU30
 127 003e 0023     		movs	r3, #0
 128 0040 0393     		str	r3, [sp, #12]
 156:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 129              		.loc 1 156 3 is_stmt 1 view .LVU31
 156:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 130              		.loc 1 156 36 is_stmt 0 view .LVU32
 131 0042 4FF48062 		mov	r2, #1024
 132 0046 0492     		str	r2, [sp, #16]
 157:Core/Src/main.cpp **** 
 133              		.loc 1 157 3 is_stmt 1 view .LVU33
 157:Core/Src/main.cpp **** 
 134              		.loc 1 157 36 is_stmt 0 view .LVU34
 135 0048 0593     		str	r3, [sp, #20]
 159:Core/Src/main.cpp ****   {
 136              		.loc 1 159 3 is_stmt 1 view .LVU35
 159:Core/Src/main.cpp ****   {
 137              		.loc 1 159 26 is_stmt 0 view .LVU36
 138 004a 01A8     		add	r0, sp, #4
 139 004c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 140              	.LVL2:
 159:Core/Src/main.cpp ****   {
 141              		.loc 1 159 3 view .LVU37
 142 0050 20B9     		cbnz	r0, .L8
 163:Core/Src/main.cpp **** 
 143              		.loc 1 163 1 view .LVU38
 144 0052 11B0     		add	sp, sp, #68
 145              	.LCFI2:
 146              		.cfi_remember_state
 147              		.cfi_def_cfa_offset 4
 148              		@ sp needed
 149 0054 5DF804FB 		ldr	pc, [sp], #4
 150              	.L7:
 151              	.LCFI3:
 152              		.cfi_restore_state
 148:Core/Src/main.cpp ****   }
 153              		.loc 1 148 5 is_stmt 1 view .LVU39
 148:Core/Src/main.cpp ****   }
 154              		.loc 1 148 18 is_stmt 0 view .LVU40
 155 0058 FFF7FEFF 		bl	Error_Handler
 156              	.LVL3:
 157              	.L8:
 161:Core/Src/main.cpp ****   }
 158              		.loc 1 161 5 is_stmt 1 view .LVU41
 161:Core/Src/main.cpp ****   }
 159              		.loc 1 161 18 is_stmt 0 view .LVU42
 160 005c FFF7FEFF 		bl	Error_Handler
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 10


 161              	.LVL4:
 162              		.cfi_endproc
 163              	.LFE1576:
 165              		.section	.text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2E
 166              		.align	1
 167              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 172              	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:
 173              	.LVL5:
 174              	.LFB1846:
 175              		.file 3 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\inclu
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // Vector implementation -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // Copyright (C) 2001-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** /*
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  *
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * Copyright (c) 1994
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * Hewlett-Packard Company
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  *
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * representations about the suitability of this software for any
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  *
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  *
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * Copyright (c) 1996
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  *
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 11


  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * representations about the suitability of this  software for any
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  */
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** /** @file bits/stl_vector.h
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****  */
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #ifndef _STL_VECTOR_H
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define _STL_VECTOR_H 1
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #include <bits/functexcept.h>
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #include <bits/concept_check.h>
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #include <initializer_list>
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 202002L
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** # include <compare>
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define __cpp_lib_constexpr_vector 201907L
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #include <debug/assertions.h>
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** extern "C" void
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 					  const void*, const void*);
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** {
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****   template<typename _Tp, typename _Alloc>
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     struct _Vector_base
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     {
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        	pointer;
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       struct _Vector_impl_data
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	pointer _M_start;
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	pointer _M_finish;
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	pointer _M_end_of_storage;
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ }
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 12


 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_start = __x._M_start;
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_finish = __x._M_finish;
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  // information used by TBAA.
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _Vector_impl_data __tmp;
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  __tmp._M_copy_data(*this);
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_copy_data(__x);
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  __x._M_copy_data(__tmp);
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       };
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       struct _Vector_impl
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type()
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ }
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(__a)
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ }
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ }
 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ }
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 13


 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ }
 164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	template<typename = _Tp_alloc_type>
 168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  struct _Asan
 169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  {
 170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      ::size_type size_type;
 172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
 174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    _S_shrink(_Vector_impl&, size_type) { }
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
 176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    _S_on_dealloc(_Vector_impl&) { }
 177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 180:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    struct _Grow
 181:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    {
 182:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR _Grow(_Vector_impl&, size_type) { }
 183:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR void _M_grew(size_type) { }
 184:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    };
 185:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  };
 186:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 187:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 188:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	template<typename _Up>
 189:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 190:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  {
 191:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      ::size_type size_type;
 193:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 194:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 195:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 196:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
 197:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 198:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    {
 199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cpp_lib_is_constant_evaluated
 200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      if (std::is_constant_evaluated())
 201:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		return;
 202:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 203:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 204:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 205:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    }
 206:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 207:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
 208:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 209:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 210:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 211:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
 212:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 213:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 214:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 215:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 14


 216:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 217:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    {
 218:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      if (__impl._M_start)
 219:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 220:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    }
 221:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 222:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    struct _Reinit
 224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    {
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      explicit _GLIBCXX20_CONSTEXPR
 226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 227:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      {
 228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		_S_on_dealloc(_M_impl);
 230:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      }
 231:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 232:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      ~_Reinit()
 234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      {
 235:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 236:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		if (_M_impl._M_start)
 237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			    _M_impl._M_finish);
 239:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      }
 240:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _Vector_impl& _M_impl;
 242:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 243:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 244:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 245:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 246:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 247:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    };
 248:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 249:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 250:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    struct _Grow
 251:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    {
 252:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR
 253:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 254:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 255:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 256:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 257:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR
 258:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 259:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR
 261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 262:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 263:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 264:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 265:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 266:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 267:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    private:
 268:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _Vector_impl& _M_impl;
 269:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      size_type _M_n;
 270:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    };
 271:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  };
 272:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 15


 273:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 274:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 275:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 276:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 277:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 278:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 279:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 280:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 281:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 282:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 283:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 284:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 285:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 286:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 287:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 288:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 289:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 290:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 291:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       };
 292:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     public:
 294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef _Alloc allocator_type;
 295:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 296:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 297:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Tp_alloc_type&
 298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 299:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 300:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 301:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 302:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const _Tp_alloc_type&
 303:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 304:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 305:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 306:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 307:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       allocator_type
 308:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 309:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 310:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 311:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 312:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Vector_base() = default;
 313:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
 314:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Vector_base() { }
 315:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 316:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 317:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 318:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 319:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _M_impl(__a) { }
 320:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 321:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Kept for ABI compatibility.
 322:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 323:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 324:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Vector_base(size_t __n)
 325:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _M_impl()
 326:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { _M_create_storage(__n); }
 327:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 328:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 329:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 16


 330:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 331:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _M_impl(__a)
 332:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { _M_create_storage(__n); }
 333:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 334:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 335:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 336:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 337:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Kept for ABI compatibility.
 338:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 339:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 340:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 341:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _M_impl(std::move(__a)) { }
 342:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 343:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 344:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 345:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _M_impl(__a)
 346:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 347:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	if (__x.get_allocator() == __a)
 348:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 349:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	else
 350:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  {
 351:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 352:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    _M_create_storage(__n);
 353:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  }
 354:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 355:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** # endif
 356:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 357:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 358:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 359:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 360:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { }
 361:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 362:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 363:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 364:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 176              		.loc 3 364 7 is_stmt 1 view -0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		.loc 3 364 7 is_stmt 0 view .LVU44
 181 0000 10B5     		push	{r4, lr}
 182              	.LCFI4:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 4, -8
 185              		.cfi_offset 14, -4
 186 0002 0446     		mov	r4, r0
 187              	.LBB639:
 365:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 366:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 188              		.loc 3 366 15 view .LVU45
 189 0004 0068     		ldr	r0, [r0]
 190              	.LVL6:
 367:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 191              		.loc 3 367 17 view .LVU46
 192 0006 A168     		ldr	r1, [r4, #8]
 193              		.loc 3 367 35 view .LVU47
 194 0008 091A     		subs	r1, r1, r0
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 17


 195              	.LVL7:
 196              	.LBB640:
 197              	.LBI640:
 368:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 369:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 370:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     public:
 371:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Vector_impl _M_impl;
 372:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 373:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 374:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       pointer
 375:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_allocate(size_t __n)
 376:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 377:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 378:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 379:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 380:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 381:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 382:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
 383:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 198              		.loc 3 383 7 is_stmt 1 view .LVU48
 199              	.LBB641:
 384:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 385:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 386:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	if (__p)
 200              		.loc 3 386 2 is_stmt 0 view .LVU49
 201 000a 08B1     		cbz	r0, .L10
 202              	.LVL8:
 203              	.LBB642:
 204              	.LBI642:
 205              		.file 4 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\inclu
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // Copyright (C) 2011-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** /** @file bits/alloc_traits.h
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 18


  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****  */
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #include <bits/stl_construct.h>
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #include <bits/memoryfwd.h>
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201103L
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** # include <bits/allocator.h>
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** # include <bits/ptr_traits.h>
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** # include <ext/numeric_traits.h>
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** {
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201103L
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411L
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   /// @cond undocumented
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   struct __allocator_traits_base
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   {
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     template<typename _Tp, typename _Up>
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       struct __rebind<_Tp, _Up,
  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   protected:
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   };
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename _Up>
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     using __alloc_rebind
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   /// @endcond
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   /**
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 19


  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****    * @headerfile memory
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****    * @ingroup allocators
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****    * @since C++11
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   */
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     {
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator type
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       typedef _Alloc allocator_type;
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocated type
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @brief   The allocator's pointer type.
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     private:
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	struct _Ptr
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	};
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  using type = _Func<_Alloc>;
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	};
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	struct _Diff
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _PtrT>
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _DiffT>
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     public:
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @brief   The allocator's const pointer type.
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 20


 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @brief   The allocator's void pointer type.
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @brief   The allocator's difference type
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @brief   The allocator's size type
 170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 180:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
 181:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 182:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using propagate_on_container_copy_assignment
 183:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 184:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 185:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 186:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 187:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 188:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 189:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
 190:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 191:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using propagate_on_container_move_assignment
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 193:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 194:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 195:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 196:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 197:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 198:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 21


 199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using propagate_on_container_swap
 201:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 202:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 203:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 204:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 205:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 206:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 207:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 208:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 209:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using is_always_equal
 210:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 211:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 212:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 213:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 214:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 215:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 216:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 217:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     private:
 218:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 219:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static constexpr auto
 220:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 221:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 222:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static constexpr pointer
 226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 227:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ return __a.allocate(__n); }
 228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 230:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	struct __construct_helper
 231:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{
 232:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  template<typename _Alloc2,
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 235:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	    static true_type __test(int);
 236:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  template<typename>
 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	    static false_type __test(...);
 239:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 240:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	};
 242:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 243:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 244:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	using __has_construct
 245:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 246:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 247:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 248:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 249:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 250:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 251:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 252:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 253:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 254:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 255:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 22


 256:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 257:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 258:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 259:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{
 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 262:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #else
 263:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 264:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 265:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	}
 266:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 267:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 268:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 269:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 270:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 271:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 272:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ __a.destroy(__p); }
 273:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 274:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 275:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 276:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 277:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 278:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ std::_Destroy(__p); }
 279:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 280:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 281:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static constexpr auto
 282:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 283:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	-> decltype(__a.max_size())
 284:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ return __a.max_size(); }
 285:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 286:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 287:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static constexpr size_type
 288:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 289:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{
 290:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 291:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 292:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	    / sizeof(value_type);
 294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	}
 295:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 296:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 297:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static constexpr auto
 298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 299:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 300:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 301:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 302:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 303:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static constexpr _Alloc2
 304:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 305:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ return __a; }
 306:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 307:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     public:
 308:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 309:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 310:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 311:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 312:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 23


 313:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 314:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Calls @c a.allocate(n)
 315:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 316:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 317:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 318:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { return __a.allocate(__n); }
 319:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 320:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 321:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 322:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 323:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 324:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __hint Aid to locality.
 325:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 326:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *          of type @c value_type
 327:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 328:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 329:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 330:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 331:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 332:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 333:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 334:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 335:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 336:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Deallocate memory.
 337:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 338:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 339:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 340:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 341:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 342:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 343:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 344:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 345:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 346:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 347:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 348:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Construct an object of type `_Tp`
 349:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 350:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 351:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 352:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 353:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 354:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 355:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 356:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  arguments @a __args...
 357:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 358:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 359:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 360:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 361:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 362:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 363:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 364:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 365:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 366:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 367:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 368:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 369:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 24


 370:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 371:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 372:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 373:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 374:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 375:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 376:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 377:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 378:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 379:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 380:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 381:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  The maximum supported allocation size
 382:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 383:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 384:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 385:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 386:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 387:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 388:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 389:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 390:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { return _S_max_size(__a, 0); }
 391:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 392:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 393:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 394:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __rhs  An allocator.
 395:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 396:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 397:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 398:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 399:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 400:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 401:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 402:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { return _S_select(__rhs, 0); }
 403:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     };
 404:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 405:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus > 201703L
 406:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 407:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 408:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 409:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   /// Partial specialization for std::allocator.
 410:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Tp>
 411:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 412:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     {
 413:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator type
 414:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 415:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 416:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocated type
 417:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using value_type = _Tp;
 418:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 419:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's pointer type.
 420:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using pointer = _Tp*;
 421:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 422:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's const pointer type.
 423:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using const_pointer = const _Tp*;
 424:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 425:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's void pointer type.
 426:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using void_pointer = void*;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 25


 427:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 428:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's const void pointer type.
 429:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using const_void_pointer = const void*;
 430:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 431:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's difference type
 432:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 433:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 434:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's size type
 435:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using size_type = std::size_t;
 436:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 437:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 438:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 439:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 440:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on move assignment
 441:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 442:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 443:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on swap
 444:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using propagate_on_container_swap = false_type;
 445:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 446:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 447:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using is_always_equal = true_type;
 448:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 449:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Up>
 450:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 451:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 452:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Up>
 453:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 454:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 455:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 456:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 457:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 458:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 459:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 460:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Calls @c a.allocate(n)
 461:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 462:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 463:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 464:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { return __a.allocate(__n); }
 465:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 466:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 467:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 468:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 469:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 470:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __hint Aid to locality.
 471:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 472:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *          of type @c value_type
 473:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 474:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 475:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 476:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 477:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 478:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       {
 479:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 480:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	return __a.allocate(__n, __hint);
 481:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #else
 482:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	return __a.allocate(__n);
 483:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 26


 484:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       }
 485:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 486:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 487:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Deallocate memory.
 488:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 489:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 490:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 491:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 492:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 493:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 494:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 495:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 206              		.loc 4 495 7 is_stmt 1 view .LVU50
 207              	.LBB643:
 208              	.LBB644:
 209              	.LBI644:
 210              		.file 5 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\inclu
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // Copyright (C) 2001-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** /** @file bits/new_allocator.h
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****  *  This is an internal header file, included by other library headers.
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****  */
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #ifndef _STD_NEW_ALLOCATOR_H
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #define _STD_NEW_ALLOCATOR_H 1
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #include <bits/c++config.h>
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #include <new>
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #include <bits/functexcept.h>
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #include <bits/move.h>
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #if __cplusplus >= 201103L
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #include <type_traits>
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #endif
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 27


  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** {
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****   /**
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****    *  @brief  An allocator that uses global new, as per C++03 [20.4.1].
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****    *  @ingroup allocators
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****    *
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****    *    - all allocation calls operator new
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****    *    - all deallocation calls operator delete
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****    *
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****    */
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****   template<typename _Tp>
  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****     class __new_allocator
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****     {
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****     public:
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       typedef _Tp        value_type;
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       typedef std::size_t     size_type;
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #if __cplusplus <= 201703L
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       typedef _Tp*       pointer;
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       typedef const _Tp* const_pointer;
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       typedef _Tp&       reference;
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       typedef const _Tp& const_reference;
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       template<typename _Tp1>
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	struct rebind
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	{ typedef __new_allocator<_Tp1> other; };
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #endif
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #if __cplusplus >= 201103L
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #endif
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       template<typename _Tp1>
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #if __cplusplus <= 201703L
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       pointer
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       { return std::__addressof(__x); }
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       const_pointer
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 28


  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       { return std::__addressof(__x); }
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #endif
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #if __has_builtin(__builtin_operator_new) >= 201802L
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** # define _GLIBCXX_OPERATOR_NEW __builtin_operator_new
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** # define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #else
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** # define _GLIBCXX_OPERATOR_NEW ::operator new
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** # define _GLIBCXX_OPERATOR_DELETE ::operator delete
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #endif
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       // about what the return value is when __n == 0.
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       {
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #if __cplusplus >= 201103L
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	// 3308. std::allocator<void>().allocate(n)
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #endif
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	if (__builtin_expect(__n > this->_M_max_size(), false))
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	  {
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	    // 3190. allocator::allocate sometimes returns too little storage
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	      std::__throw_bad_array_new_length();
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	    std::__throw_bad_alloc();
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	  }
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #if __cpp_aligned_new
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	  {
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 							   __al));
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	  }
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #endif
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       }
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       // __p is not permitted to be a null pointer.
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       void
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 211              		.loc 5 142 7 view .LVU51
 212              	.LBB645:
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       {
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #if __cpp_sized_deallocation
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** # define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #else
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** # define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #endif
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #if __cpp_aligned_new
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	  {
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 29


 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 				     std::align_val_t(alignof(_Tp)));
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	    return;
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	  }
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #endif
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 213              		.loc 5 158 26 is_stmt 0 view .LVU52
 214 000c FFF7FEFF 		bl	_ZdlPvj
 215              	.LVL9:
 216              	.L10:
 217              		.loc 5 158 26 view .LVU53
 218              	.LBE645:
 219              	.LBE644:
 220              	.LBE643:
 221              	.LBE642:
 222              	.LBE641:
 223              	.LBE640:
 224              	.LBB646:
 225              	.LBI646:
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 226              		.loc 3 133 14 is_stmt 1 view .LVU54
 227              	.LBB647:
 228              	.LBI647:
 229              		.file 6 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\inclu
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // Allocators -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // Copyright (C) 2001-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** /*
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  * Copyright (c) 1996-1997
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  *
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  * that both that copyright notice and this permission notice appear
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 30


  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  * representations about the suitability of this software for any
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  */
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** /** @file bits/allocator.h
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  *  This is an internal header file, included by other library headers.
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****  */
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #ifndef _ALLOCATOR_H
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #define _ALLOCATOR_H 1
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #include <bits/memoryfwd.h>
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #include <type_traits>
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #endif
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #define __cpp_lib_incomplete_container_elements 201505L
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** {
  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****   /**
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****    *  @addtogroup allocators
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****    *  @{
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****    */
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****   // Since C++20 the primary template should be used for allocator<void>,
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****   // but then it would have a non-trivial default ctor and dtor for C++20,
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****   // but trivial for C++98-17, which would be an ABI incompatibiliy between
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****   // different standard dialects. So C++20 still uses the allocator<void>
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****   // explicit specialization, with the historical ABI properties, but with
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****   // the same members that are present in the primary template.
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****   /// allocator<void> specialization.
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****   template<>
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****     class allocator<void>
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****     {
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****     public:
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef void        value_type;
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef size_t      size_type;
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef ptrdiff_t   difference_type;
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #if __cplusplus <= 201703L
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // These were removed for C++20, allocator_traits does the right thing.
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef void*       pointer;
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef const void* const_pointer;
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       template<typename _Tp1>
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	struct rebind
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	{ typedef allocator<_Tp1> other; };
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #endif
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 31


  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       using propagate_on_container_move_assignment = true_type;
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       using is_always_equal
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	= true_type;
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #if __cplusplus >= 202002L
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // As noted above, these members are present for C++20 to provide the
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // same API as the primary template, but still trivial as in pre-C++20.
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       allocator() = default;
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       ~allocator() = default;
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       template<typename _Up>
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	constexpr
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	allocator(const allocator<_Up>&) noexcept { }
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // No allocate member because it's ill-formed by LWG 3307.
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // No deallocate member because it would be undefined to call it
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // with any pointer which wasn't obtained from allocate.
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #endif // C++20
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #endif // C++11
 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****     };
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****   /**
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****    * @brief  The @a standard allocator, as per C++03 [20.4.1].
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****    *
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****    *  for further details.
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****    *
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****    */
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****   template<typename _Tp>
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****     class allocator : public __allocator_base<_Tp>
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****     {
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****     public:
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef _Tp        value_type;
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef size_t     size_type;
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef ptrdiff_t  difference_type;
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #if __cplusplus <= 201703L
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // These were removed for C++20.
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef _Tp*       pointer;
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef const _Tp* const_pointer;
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef _Tp&       reference;
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       typedef const _Tp& const_reference;
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       template<typename _Tp1>
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	struct rebind
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	{ typedef allocator<_Tp1> other; };
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #endif
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       using propagate_on_container_move_assignment = true_type;
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 32


 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       using is_always_equal
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	= true_type;
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #endif
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       _GLIBCXX20_CONSTEXPR
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       _GLIBCXX20_CONSTEXPR
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       : __allocator_base<_Tp>(__a) { }
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
 163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       // Avoid implicit deprecation.
 164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       allocator& operator=(const allocator&) = default;
 165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #endif
 166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       template<typename _Tp1>
 168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	_GLIBCXX20_CONSTEXPR
 169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #if __cpp_constexpr_dynamic_alloc
 172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       constexpr
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** #endif
 174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 230              		.loc 6 174 7 view .LVU55
 231              	.LBB648:
 232              	.LBI648:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 233              		.loc 5 90 7 view .LVU56
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 234              		.loc 5 90 7 is_stmt 0 view .LVU57
 235              	.LBE648:
 236              	.LBE647:
 237              	.LBE646:
 238              	.LBE639:
 368:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 239              		.loc 3 368 7 view .LVU58
 240 0010 2046     		mov	r0, r4
 241 0012 10BD     		pop	{r4, pc}
 368:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 242              		.loc 3 368 7 view .LVU59
 243              		.cfi_endproc
 244              	.LFE1846:
 246              		.weak	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 247              		.thumb_set _ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev,_Z
 248              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev,"axG"
 249              		.align	1
 250              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 255              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:
 256              	.LVL10:
 257              	.LFB1849:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 33


 387:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 388:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 389:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 390:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     protected:
 391:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 392:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
 393:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_create_storage(size_t __n)
 394:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 395:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 396:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 397:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 398:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 399:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     };
 400:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 401:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****   /**
 402:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 403:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  individual elements in any order.
 404:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *
 405:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  @ingroup sequences
 406:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *
 407:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  @tparam _Tp  Type of element.
 408:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 409:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *
 410:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 411:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 412:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 413:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 414:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 415:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *
 416:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 417:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 418:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  elements in any order and saves the user from worrying about
 419:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 420:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****    *  also provided as with C-style arrays.
 421:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****   */
 422:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 423:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 424:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     {
 425:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 426:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Concept requirements.
 427:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 428:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** # if __cplusplus < 201103L
 429:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 430:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** # endif
 431:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 432:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 433:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 434:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 435:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 436:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 437:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 438:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 439:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 440:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** # endif
 441:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 442:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 443:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 34


 444:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 445:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 446:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 447:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     public:
 448:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef _Tp					value_type;
 449:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef typename _Base::pointer			pointer;
 450:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 451:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 452:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 453:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 454:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 455:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_iterator;
 456:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 457:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 458:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef size_t					size_type;
 459:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef ptrdiff_t					difference_type;
 460:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       typedef _Alloc					allocator_type;
 461:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 462:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     private:
 463:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 464:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       static constexpr bool
 465:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _S_nothrow_relocate(true_type)
 466:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 467:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 468:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 					  std::declval<pointer>(),
 469:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 					  std::declval<pointer>(),
 470:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 471:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 472:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 473:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       static constexpr bool
 474:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _S_nothrow_relocate(false_type)
 475:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return false; }
 476:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 477:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       static constexpr bool
 478:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _S_use_relocate()
 479:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 480:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 481:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 482:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 483:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 484:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 485:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 486:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       static pointer
 487:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 488:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 489:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 490:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 491:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 492:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 493:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       static pointer
 494:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 495:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 496:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return __result; }
 497:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 498:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       static _GLIBCXX20_CONSTEXPR pointer
 499:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 500:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 35


 501:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 502:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cpp_if_constexpr
 503:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	// All callers have already checked _S_use_relocate() so just do it.
 504:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 505:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
 506:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 507:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 508:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 509:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 510:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif // C++11
 511:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 512:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     protected:
 513:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       using _Base::_M_allocate;
 514:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       using _Base::_M_deallocate;
 515:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       using _Base::_M_impl;
 516:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 517:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 518:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     public:
 519:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 520:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 521:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 522:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 523:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 524:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 525:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 526:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector() = default;
 527:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
 528:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector() { }
 529:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 530:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 531:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 532:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 533:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator object.
 534:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 535:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       explicit
 536:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 537:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 538:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _Base(__a) { }
 539:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 540:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 541:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 542:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 543:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 544:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 545:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 546:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 547:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  constructed elements.
 548:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 549:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       explicit
 550:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 551:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 552:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 553:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { _M_default_initialize(__n); }
 554:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 555:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 556:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 557:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 36


 558:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __value  An element to copy.
 559:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 560:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 561:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 562:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 563:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 564:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector(size_type __n, const value_type& __value,
 565:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 566:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 567:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 568:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
 569:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 570:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 571:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 572:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __value  An element to copy.
 573:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 574:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 575:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 576:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 577:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       explicit
 578:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 579:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 580:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 581:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 582:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 583:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 584:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 585:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  %Vector copy constructor.
 586:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 587:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 588:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 589:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @a __x  will not be copied
 590:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 591:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 592:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 593:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 594:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 595:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 596:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector(const vector& __x)
 597:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _Base(__x.size(),
 598:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 599:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 600:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
 601:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 602:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 				      this->_M_impl._M_start,
 603:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 604:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 605:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 606:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 607:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 608:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  %Vector move constructor.
 609:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 610:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 611:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  moved instance.
 612:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 613:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %vector.
 614:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 37


 615:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector(vector&&) noexcept = default;
 616:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 617:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /// Copy constructor with alternative allocator
 618:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 619:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector(const vector& __x, const __type_identity_t<allocator_type>& __a)
 620:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _Base(__x.size(), __a)
 621:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 622:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
 623:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 624:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 				      this->_M_impl._M_start,
 625:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 626:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 627:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 628:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     private:
 629:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 630:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 631:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _Base(__m, std::move(__rv))
 632:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { }
 633:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 634:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 635:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 636:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _Base(__m)
 637:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 638:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	if (__rv.get_allocator() == __m)
 639:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 640:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	else if (!__rv.empty())
 641:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  {
 642:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 643:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    this->_M_impl._M_finish =
 644:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 645:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 					  this->_M_impl._M_start,
 646:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 					  _M_get_Tp_allocator());
 647:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    __rv.clear();
 648:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  }
 649:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 650:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 651:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     public:
 652:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /// Move constructor with alternative allocator
 653:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 654:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const __type_identity_t<allocator_type>& __m)
 655:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       noexcept( noexcept(
 656:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 657:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 658:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 659:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { }
 660:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 661:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 662:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 663:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 664:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 665:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 666:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 667:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  initializer_list @a __l.
 668:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 669:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This will call the element type's copy constructor N times
 670:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 671:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 38


 672:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 673:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector(initializer_list<value_type> __l,
 674:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 675:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       : _Base(__a)
 676:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 677:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 678:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			    random_access_iterator_tag());
 679:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 680:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 681:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 682:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 683:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Builds a %vector from a range.
 684:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
 685:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __last  An input iterator.
 686:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 687:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 688:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 689:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  [first,last).
 690:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 691:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 692:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  random-access, then this will call the elements' copy
 693:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 694:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 695:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 696:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  constructor, and logN memory reallocations.
 697:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 698:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 699:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator,
 700:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 701:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 702:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 703:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 704:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: _Base(__a)
 705:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
 706:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_range_initialize(__first, __last,
 707:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			      std::__iterator_category(__first));
 708:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
 709:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
 710:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
 711:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 712:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 713:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: _Base(__a)
 714:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
 715:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 716:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 717:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 718:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
 719:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 720:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 721:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 722:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 723:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 724:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 725:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  responsibility.
 726:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 727:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 728:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 39


 258              		.loc 3 728 7 is_stmt 1 view -0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		.loc 3 728 7 is_stmt 0 view .LVU61
 263 0000 70B5     		push	{r4, r5, r6, lr}
 264              	.LCFI5:
 265              		.cfi_def_cfa_offset 16
 266              		.cfi_offset 4, -16
 267              		.cfi_offset 5, -12
 268              		.cfi_offset 6, -8
 269              		.cfi_offset 14, -4
 270 0002 0646     		mov	r6, r0
 271              	.LBB649:
 729:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 730:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 272              		.loc 3 730 15 view .LVU62
 273 0004 0468     		ldr	r4, [r0]
 274 0006 4568     		ldr	r5, [r0, #4]
 275              	.LVL11:
 276              	.LBB650:
 277              	.LBI650:
 298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 278              		.loc 3 298 7 is_stmt 1 view .LVU63
 298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 279              		.loc 3 298 7 is_stmt 0 view .LVU64
 280              	.LBE650:
 281              	.LBB651:
 282              	.LBI651:
 496:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 497:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 498:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 499:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 500:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 501:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 502:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *	       an object of type `_Up`.
 503:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 504:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 505:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 506:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 507:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 508:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 509:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Up, typename... _Args>
 510:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 511:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 512:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 		  _Args&&... __args)
 513:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 514:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{
 515:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 516:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  __a.construct(__p, std::forward<_Args>(__args)...);
 517:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #else
 518:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 519:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 520:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	}
 521:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 522:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 523:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 40


 524:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 525:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 526:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 527:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 528:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 529:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Up>
 530:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 531:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 532:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 533:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{
 534:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 535:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  __a.destroy(__p);
 536:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #else
 537:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  std::destroy_at(__p);
 538:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 539:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	}
 540:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 541:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 542:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  The maximum supported allocation size
 543:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 544:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @return @c __a.max_size()
 545:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 546:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 547:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 548:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       {
 549:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 550:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	return __a.max_size();
 551:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #else
 552:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	return size_t(-1) / sizeof(value_type);
 553:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 554:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       }
 555:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 556:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 557:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 558:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __rhs  An allocator.
 559:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @return @c __rhs
 560:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 561:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 562:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 563:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { return __rhs; }
 564:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     };
 565:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 566:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   /// Explicit specialization for std::allocator<void>.
 567:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<>
 568:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     struct allocator_traits<allocator<void>>
 569:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     {
 570:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator type
 571:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using allocator_type = allocator<void>;
 572:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 573:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocated type
 574:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using value_type = void;
 575:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 576:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's pointer type.
 577:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using pointer = void*;
 578:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 579:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's const pointer type.
 580:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using const_pointer = const void*;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 41


 581:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 582:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's void pointer type.
 583:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using void_pointer = void*;
 584:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 585:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's const void pointer type.
 586:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using const_void_pointer = const void*;
 587:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 588:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's difference type
 589:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 590:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 591:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// The allocator's size type
 592:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using size_type = std::size_t;
 593:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 594:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 595:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 596:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 597:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on move assignment
 598:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 599:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 600:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on swap
 601:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using propagate_on_container_swap = false_type;
 602:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 603:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 604:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using is_always_equal = true_type;
 605:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 606:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Up>
 607:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 608:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 609:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Up>
 610:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 611:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 612:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// allocate is ill-formed for allocator<void>
 613:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       static void*
 614:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       allocate(allocator_type&, size_type, const void* = nullptr) = delete;
 615:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 616:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// deallocate is ill-formed for allocator<void>
 617:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       static void
 618:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       deallocate(allocator_type&, void*, size_type) = delete;
 619:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 620:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 621:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 622:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 623:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 624:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *	       an object of type `_Up`.
 625:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 626:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 627:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 628:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 629:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 630:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 631:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Up, typename... _Args>
 632:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 633:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	construct(allocator_type&, _Up* __p, _Args&&... __args)
 634:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 635:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 636:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 637:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 42


 638:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Destroy an object of type `_Up`
 639:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 640:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 641:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *
 642:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  Invokes the destructor for `*__p`.
 643:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 644:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       template<typename _Up>
 645:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 646:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	destroy(allocator_type&, _Up* __p)
 647:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 648:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{ std::_Destroy(__p); }
 649:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 650:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /// max_size is ill-formed for allocator<void>
 651:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       static size_type
 652:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       max_size(const allocator_type&) = delete;
 653:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 654:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       /**
 655:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 656:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @param  __rhs  An allocator.
 657:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****        *  @return `__rhs`
 658:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       */
 659:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 660:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 661:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { return __rhs; }
 662:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     };
 663:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 664:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus < 201703L
 665:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 666:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     inline void
 667:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
 668:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     { __one = __two; }
 669:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 670:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 671:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     inline void
 672:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 673:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     { }
 674:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 675:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 676:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 677:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 678:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 679:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     {
 680:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 681:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       typedef typename __traits::propagate_on_container_copy_assignment __pocca;
 682:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201703L
 683:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       if constexpr (__pocca::value)
 684:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	__one = __two;
 685:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #else
 686:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       __do_alloc_on_copy(__one, __two, __pocca());
 687:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 688:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     }
 689:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 690:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 691:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     constexpr _Alloc
 692:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     __alloc_on_copy(const _Alloc& __a)
 693:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     {
 694:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 43


 695:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       return __traits::select_on_container_copy_construction(__a);
 696:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     }
 697:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 698:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus < 201703L
 699:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 700:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 701:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     { __one = std::move(__two); }
 702:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 703:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 704:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
 705:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     { }
 706:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 707:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 708:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 709:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 710:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     __alloc_on_move(_Alloc& __one, _Alloc& __two)
 711:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     {
 712:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 713:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       typedef typename __traits::propagate_on_container_move_assignment __pocma;
 714:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201703L
 715:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       if constexpr (__pocma::value)
 716:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	__one = std::move(__two);
 717:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #else
 718:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       __do_alloc_on_move(__one, __two, __pocma());
 719:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 720:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     }
 721:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 722:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus < 201703L
 723:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 724:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
 725:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     {
 726:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       using std::swap;
 727:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       swap(__one, __two);
 728:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     }
 729:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 730:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 731:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 732:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     { }
 733:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 734:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 735:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 736:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 737:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 738:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     {
 739:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 740:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       typedef typename __traits::propagate_on_container_swap __pocs;
 741:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201703L
 742:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       if constexpr (__pocs::value)
 743:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	{
 744:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  using std::swap;
 745:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	  swap(__one, __two);
 746:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	}
 747:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #else
 748:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       __do_alloc_on_swap(__one, __two, __pocs());
 749:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 750:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     }
 751:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 44


 752:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename _Tp,
 753:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
 754:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	   typename = void>
 755:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     struct __is_alloc_insertable_impl
 756:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     : false_type
 757:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     { };
 758:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 759:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename _Tp, typename _ValueT>
 760:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
 761:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       __void_t<decltype(allocator_traits<_Alloc>::construct(
 762:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 		   std::declval<_Alloc&>(), std::declval<_ValueT*>(),
 763:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 		   std::declval<_Tp>()))>>
 764:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     : true_type
 765:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     { };
 766:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 767:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc
 768:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 769:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 770:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 771:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     struct __is_copy_insertable
 772:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc,
 773:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 				 typename _Alloc::value_type const&>::type
 774:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     { };
 775:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 776:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   // std::allocator<_Tp> just requires CopyConstructible
 777:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Tp>
 778:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     struct __is_copy_insertable<allocator<_Tp>>
 779:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     : is_copy_constructible<_Tp>
 780:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     { };
 781:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 782:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc
 783:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 784:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 785:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 786:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     struct __is_move_insertable
 787:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
 788:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     { };
 789:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 790:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   // std::allocator<_Tp> just requires MoveConstructible
 791:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Tp>
 792:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     struct __is_move_insertable<allocator<_Tp>>
 793:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     : is_move_constructible<_Tp>
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     { };
 795:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 796:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   // Trait to detect Allocator-like types.
 797:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename = void>
 798:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     struct __is_allocator : false_type { };
 799:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 800:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 801:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     struct __is_allocator<_Alloc,
 802:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       __void_t<typename _Alloc::value_type,
 803:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
 804:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     : true_type { };
 805:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 806:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 807:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     using _RequireAllocator
 808:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 45


 809:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 810:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 811:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     using _RequireNotAllocator
 812:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
 813:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 814:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cpp_concepts >= 201907L
 815:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 816:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     concept __allocator_like = requires (_Alloc& __a) {
 817:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       typename _Alloc::value_type;
 818:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       __a.deallocate(__a.allocate(1u), 1u);
 819:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     };
 820:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 821:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif // C++11
 822:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 823:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   /**
 824:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****    * Destroy a range of objects using the supplied allocator.  For
 825:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****    * non-default allocators we do not optimize away invocation of
 826:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****    * destroy() even if _Tp has a trivial destructor.
 827:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****    */
 828:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 829:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _ForwardIterator, typename _Allocator>
 830:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     _GLIBCXX20_CONSTEXPR
 831:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     void
 832:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 833:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	     _Allocator& __alloc)
 834:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     {
 835:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       for (; __first != __last; ++__first)
 836:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #if __cplusplus < 201103L
 837:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	__alloc.destroy(std::__addressof(*__first));
 838:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #else
 839:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	allocator_traits<_Allocator>::destroy(__alloc,
 840:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 					      std::__addressof(*__first));
 841:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** #endif
 842:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     }
 843:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 844:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****   template<typename _ForwardIterator, typename _Tp>
 845:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     _GLIBCXX20_CONSTEXPR
 846:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     inline void
 847:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 283              		.loc 4 847 5 is_stmt 1 view .LVU65
 284 0008 03E0     		b	.L13
 285              	.LVL12:
 286              	.L14:
 287              	.LBB652:
 288              	.LBB653:
 289              	.LBB654:
 290              	.LBB655:
 291              	.LBB656:
 292              	.LBI656:
 293              		.file 7 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\inclu
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // Copyright (C) 2001-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // terms of the GNU General Public License as published by the
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 46


   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** /*
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  *
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * Copyright (c) 1994
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * Hewlett-Packard Company
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  *
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * representations about the suitability of this software for any
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  *
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  *
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * Copyright (c) 1996,1997
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  *
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * representations about the suitability of this software for any
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  */
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** /** @file bits/stl_construct.h
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  */
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #include <new>
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #include <bits/move.h>
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #include <bits/stl_iterator_base_types.h> // for iterator_traits
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #include <bits/stl_iterator_base_funcs.h> // for advance
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** /* This file provides the C++17 functions std::destroy_at, std::destroy, and
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 47


  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * std::destroy_n, and the C++20 function std::construct_at.
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * It also provides std::_Construct, std::_Destroy,and std::_Destroy_n functions
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * which are defined in all standard modes and so can be used in C++98-14 code.
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * The _Destroy functions will dispatch to destroy_at during constant
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * evaluation, because calls to that function are intercepted by the compiler
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  * to allow use in constant expressions.
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****  */
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** {
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #if __cplusplus >= 201703L
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****   template <typename _Tp>
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     _GLIBCXX20_CONSTEXPR inline void
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     destroy_at(_Tp* __location)
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     {
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****       if constexpr (__cplusplus > 201703L && is_array_v<_Tp>)
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	{
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	  for (auto& __x : *__location)
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	    std::destroy_at(std::__addressof(__x));
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	}
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****       else
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	__location->~_Tp();
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     }
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #if __cplusplus >= 202002L
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****   template<typename _Tp, typename... _Args>
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     constexpr auto
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     construct_at(_Tp* __location, _Args&&... __args)
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #endif // C++20
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #endif// C++17
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****   /**
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****    * object's constructor with an initializer.
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****    */
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #if __cplusplus >= 201103L
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****   template<typename _Tp, typename... _Args>
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     _GLIBCXX20_CONSTEXPR
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     inline void
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     _Construct(_Tp* __p, _Args&&... __args)
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     {
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #if __cplusplus >= 202002L
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****       if (std::__is_constant_evaluated())
 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	{
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	  // Allow std::_Construct to be used in constant expressions.
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	  return;
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	}
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #endif
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****       ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     }
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #else
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 48


 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****   template<typename _T1, typename _T2>
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     inline void
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     {
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     }
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #endif
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****   template<typename _T1>
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     inline void
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     _Construct_novalue(_T1* __p)
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     { ::new((void*)__p) _T1; }
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****   template<typename _ForwardIterator>
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     _GLIBCXX20_CONSTEXPR void
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last);
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****   /**
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****    * Destroy the object pointed to by a pointer type.
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****    */
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****   template<typename _Tp>
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     _GLIBCXX14_CONSTEXPR inline void
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     _Destroy(_Tp* __pointer)
 294              		.loc 7 146 5 view .LVU66
 295              	.LBB657:
 296              	.LBI657:
 297              		.file 8 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\inclu
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // Copyright (C) 1997-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** /** @file bits/basic_string.h
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****  */
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 49


  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** //
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** //
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #ifndef _BASIC_STRING_H
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #define _BASIC_STRING_H 1
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #pragma GCC system_header
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #include <ext/alloc_traits.h>
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #include <debug/debug.h>
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #include <initializer_list>
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** # include <string_view>
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if ! _GLIBCXX_USE_CXX11_ABI
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** # include "cow_string.h"
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #else
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** {
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #ifdef __cpp_lib_is_constant_evaluated
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // Support P0980R1 in C++20.
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** # define __cpp_lib_constexpr_string 201907L
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #elif __cplusplus >= 201703L && _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** // Support P0426R1 changes to char_traits in C++17.
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** # define __cpp_lib_constexpr_string 201611L
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****   /**
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  @class basic_string basic_string.h <string>
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  @ingroup strings
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  @ingroup sequences
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  @tparam _CharT  Type of character
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *                   char_traits<_CharT>.
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****    */
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****     class basic_string
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 50


  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****     {
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cpp_lib_constexpr_string < 201907L
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #else
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _Traits2, typename _Dummy_for_PR85282>
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	struct _Alloc_traits_impl : __gnu_cxx::__alloc_traits<_Char_alloc_type>
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	{
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Base;
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  [[__gnu__::__always_inline__]]
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  static constexpr typename _Base::pointer
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  allocate(_Char_alloc_type& __a, typename _Base::size_type __n)
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  {
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    pointer __p = _Base::allocate(__a, __n);
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    if (std::is_constant_evaluated())
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	      // Begin the lifetime of characters in allocated storage.
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	      for (size_type __i = 0; __i < __n; ++__i)
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		std::construct_at(__builtin_addressof(__p[__i]));
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    return __p;
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  }
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	};
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _Dummy_for_PR85282>
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	struct _Alloc_traits_impl<char_traits<_CharT>, _Dummy_for_PR85282>
 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	: __gnu_cxx::__alloc_traits<_Char_alloc_type>
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	{
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  // std::char_traits begins the lifetime of characters.
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	};
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       using _Alloc_traits = _Alloc_traits_impl<_Traits, void>;
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // Types:
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****     public:
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef _Traits					traits_type;
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef typename _Traits::char_type		value_type;
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef _Char_alloc_type				allocator_type;
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 							const_iterator;
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       ///  Value returned by various member functions when they fail.
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****     protected:
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // type used for positions in insert, erase etc.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 51


 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus < 201103L
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef iterator __const_iterator;
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #else
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef const_iterator __const_iterator;
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****     private:
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // A helper type for avoiding boiler-plate.
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _Tp, typename _Res>
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	using _If_sv = enable_if_t<
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  _Res>;
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // Allows an implicit conversion to __sv_type.
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       static __sv_type
 164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { return __svt; }
 166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // Wraps a string_view by explicit conversion and thus
 168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // allows to add an internal constructor that does not
 169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // participate in overload resolution when a string_view
 170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // is provided.
 171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       struct __sv_wrapper
 172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_GLIBCXX20_CONSTEXPR explicit
 174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	__sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	__sv_type _M_sv;
 177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       };
 178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 180:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
 181:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *          wrapper.
 182:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __svw  string view wrapper.
 183:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use.
 184:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 185:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 186:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       explicit
 187:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 188:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 189:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 190:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 191:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 193:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 194:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus < 201103L
 195:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 196:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 197:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #else
 198:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_GLIBCXX20_CONSTEXPR
 199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 52


 200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 201:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 202:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_GLIBCXX20_CONSTEXPR
 203:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 204:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 205:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 206:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 207:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	pointer _M_p; // The actual data.
 208:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       };
 209:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 210:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _Alloc_hider	_M_dataplus;
 211:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       size_type		_M_string_length;
 212:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 213:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 214:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 215:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       union
 216:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 217:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 218:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	size_type        _M_allocated_capacity;
 219:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       };
 220:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 221:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 222:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
 223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_data(pointer __p)
 224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_dataplus._M_p = __p; }
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 227:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
 228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_length(size_type __length)
 229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_string_length = __length; }
 230:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 231:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 232:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       pointer
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_data() const
 234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { return _M_dataplus._M_p; }
 235:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 236:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       pointer
 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_local_data()
 239:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 240:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 242:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #else
 243:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	return pointer(_M_local_buf);
 244:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 245:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 246:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 247:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 248:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       const_pointer
 249:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_local_data() const
 250:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 251:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 252:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 253:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #else
 254:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	return const_pointer(_M_local_buf);
 255:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 256:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 53


 257:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 258:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 259:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_capacity(size_type __capacity)
 261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_allocated_capacity = __capacity; }
 262:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 263:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 264:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
 265:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_set_length(size_type __n)
 266:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 267:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_length(__n);
 268:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 269:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 270:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 271:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 272:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       bool
 273:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_is_local() const
 274:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { return _M_data() == _M_local_data(); }
 275:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 276:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // Create & Destroy
 277:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 278:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       pointer
 279:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_create(size_type&, size_type);
 280:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 281:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 282:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
 283:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_dispose()
 284:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 285:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (!_M_is_local())
 286:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 287:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 288:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 289:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 290:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
 291:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_destroy(size_type __size) throw()
 292:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus < 201103L || defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 295:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 296:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 297:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _InIterator>
 298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         void
 299:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 300:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 			 std::__false_type)
 301:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	{
 302:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 303:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****           _M_construct(__beg, __end, _Tag());
 304:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	}
 305:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 306:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 307:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 308:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _Integer>
 309:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         void
 310:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 311:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 312:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 313:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 54


 314:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 315:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_construct(__req, __c); }
 316:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 317:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 318:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 319:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _InIterator>
 320:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_GLIBCXX20_CONSTEXPR
 321:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         void
 322:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 323:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		     std::input_iterator_tag);
 324:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 325:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 326:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // string::iterator, _CharT*, etc.
 327:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _FwdIterator>
 328:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_GLIBCXX20_CONSTEXPR
 329:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         void
 330:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 331:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		     std::forward_iterator_tag);
 332:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 333:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 334:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
 335:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 336:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 337:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 338:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       allocator_type&
 339:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_get_allocator()
 340:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { return _M_dataplus; }
 341:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 342:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 343:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       const allocator_type&
 344:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_get_allocator() const
 345:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { return _M_dataplus; }
 346:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 347:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // Ensure that _M_local_buf is the active member of the union.
 348:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       __attribute__((__always_inline__))
 349:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX14_CONSTEXPR
 350:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       pointer
 351:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_use_local_data() _GLIBCXX_NOEXCEPT
 352:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 353:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cpp_lib_is_constant_evaluated
 354:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (std::is_constant_evaluated())
 355:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
 356:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    _M_local_buf[__i] = _CharT();
 357:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 358:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	return _M_local_data();
 359:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 360:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 361:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****     private:
 362:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 363:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 364:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 365:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 366:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _Tp, bool _Requires =
 367:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 368:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 369:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 370:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 55


 371:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	struct __enable_if_not_native_iterator
 372:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	{ typedef basic_string& __type; };
 373:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _Tp>
 374:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 375:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 376:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 377:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 378:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       size_type
 379:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 380:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 381:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (__pos > this->size())
 382:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 383:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 				       "this->size() (which is %zu)"),
 384:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 				   __s, __pos, this->size());
 385:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	return __pos;
 386:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 387:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 388:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 389:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
 390:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 391:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 392:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 393:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  __throw_length_error(__N(__s));
 394:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 395:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 396:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 397:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 398:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 399:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       size_type
 400:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 401:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 402:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 403:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 404:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 405:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 406:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // True if _Rep and source do not overlap.
 407:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       bool
 408:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 409:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 410:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 411:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 412:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 413:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 414:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // When __n = 1 way faster than the general multichar
 415:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // traits_type::copy/move/assign.
 416:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 417:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       static void
 418:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 419:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 420:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (__n == 1)
 421:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  traits_type::assign(*__d, *__s);
 422:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	else
 423:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 424:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 425:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 426:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 427:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       static void
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 56


 428:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 429:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 430:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (__n == 1)
 431:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  traits_type::assign(*__d, *__s);
 432:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	else
 433:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  traits_type::move(__d, __s, __n);
 434:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 435:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 436:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 437:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       static void
 438:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 439:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 440:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (__n == 1)
 441:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  traits_type::assign(*__d, __c);
 442:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	else
 443:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 444:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 445:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 446:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 447:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // to optimize for the common case of pointers as iterators.
 448:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<class _Iterator>
 449:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_GLIBCXX20_CONSTEXPR
 450:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         static void
 451:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 452:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         {
 453:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 454:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 455:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	}
 456:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 457:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 458:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       static void
 459:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 460:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 461:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 462:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 463:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       static void
 464:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 465:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX_NOEXCEPT
 466:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 467:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 468:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 469:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       static void
 470:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 471:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 472:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 473:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 474:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       static void
 475:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 476:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX_NOEXCEPT
 477:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 478:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 479:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 480:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       static int
 481:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 482:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 483:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 484:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 57


 485:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 486:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 487:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 488:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 489:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	else
 490:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  return int(__d);
 491:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 492:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 493:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 494:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
 495:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_assign(const basic_string&);
 496:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 497:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 498:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
 499:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 500:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		size_type __len2);
 501:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 502:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 503:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       void
 504:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 505:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 506:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****     public:
 507:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // Construct/copy/destroy:
 508:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 509:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 510:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 511:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 512:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Default constructor creates an empty string.
 513:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 514:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 515:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string()
 516:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 517:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data())
 518:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 519:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_use_local_data();
 520:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_set_length(0);
 521:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 522:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 523:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 524:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 525:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 526:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 527:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       explicit
 528:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 529:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 530:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 531:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_use_local_data();
 532:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_set_length(0);
 533:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 534:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 535:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 536:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 537:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
 538:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 539:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 540:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(const basic_string& __str)
 541:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(),
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 58


 542:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 543:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 544:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
 545:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		     std::forward_iterator_tag());
 546:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 547:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 548:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 549:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 550:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 551:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct string as copy of a substring.
 552:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
 553:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 554:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use.
 555:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 556:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 557:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 558:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		   const _Alloc& __a = _Alloc())
 559:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 560:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 561:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	const _CharT* __start = __str._M_data()
 562:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 563:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos),
 564:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		     std::forward_iterator_tag());
 565:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 566:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 567:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 568:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct string as copy of a substring.
 569:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
 570:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 571:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __n  Number of characters to copy.
 572:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 573:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 574:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 575:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		   size_type __n)
 576:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data())
 577:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 578:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	const _CharT* __start = __str._M_data()
 579:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 580:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n),
 581:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		     std::forward_iterator_tag());
 582:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 583:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 584:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 585:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct string as copy of a substring.
 586:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
 587:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 588:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __n  Number of characters to copy.
 589:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use.
 590:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 591:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 592:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 593:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		   size_type __n, const _Alloc& __a)
 594:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 595:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 596:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	const _CharT* __start
 597:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 598:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n),
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 59


 599:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		     std::forward_iterator_tag());
 600:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 601:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 602:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 603:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 604:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __s  Source character %array.
 605:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __n  Number of characters to copy.
 606:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 607:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *
 608:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 609:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  has no special meaning.
 610:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 611:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 612:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 613:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		   const _Alloc& __a = _Alloc())
 614:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 615:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 616:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	// NB: Not required, but considered best practice.
 617:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (__s == 0 && __n > 0)
 618:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  std::__throw_logic_error(__N("basic_string: "
 619:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 				       "construction from null is not valid"));
 620:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_construct(__s, __s + __n, std::forward_iterator_tag());
 621:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 622:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 623:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 624:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct string as copy of a C string.
 625:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __s  Source C string.
 626:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 627:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 628:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 629:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 630:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // 3076. basic_string CTAD ambiguity
 631:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 632:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 633:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 634:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 635:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 636:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 637:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	// NB: Not required, but considered best practice.
 638:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (__s == 0)
 639:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  std::__throw_logic_error(__N("basic_string: "
 640:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 				       "construction from null is not valid"));
 641:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	const _CharT* __end = __s + traits_type::length(__s);
 642:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_construct(__s, __end, forward_iterator_tag());
 643:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 644:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 645:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 646:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct string as multiple characters.
 647:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __n  Number of characters.
 648:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __c  Character to use.
 649:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 650:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 651:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 652:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 653:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       // 3076. basic_string CTAD ambiguity
 654:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 655:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 60


 656:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 657:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 658:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 659:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_construct(__n, __c); }
 660:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 661:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 662:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 663:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Move construct string.
 664:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
 665:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *
 666:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 667:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @a __str is a valid, but unspecified string.
 668:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 669:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 670:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(basic_string&& __str) noexcept
 671:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 672:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 673:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (__str._M_is_local())
 674:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  {
 675:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 676:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 			      __str.length() + 1);
 677:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  }
 678:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	else
 679:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  {
 680:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    _M_data(__str._M_data());
 681:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 682:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  }
 683:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 684:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 685:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 686:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 687:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_M_length(__str.length());
 688:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	__str._M_data(__str._M_local_data());
 689:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	__str._M_set_length(0);
 690:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 691:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 692:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 693:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct string from an initializer %list.
 694:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 695:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 696:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 697:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 698:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 699:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 700:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_construct(__l.begin(), __l.end(), std::forward_iterator_tag()); }
 701:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 702:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 703:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 704:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 705:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_construct(__str.begin(), __str.end(), std::forward_iterator_tag()); }
 706:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 707:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 708:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 709:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 710:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 711:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 712:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	if (__str._M_is_local())
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 61


 713:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  {
 714:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 715:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 			      __str.length() + 1);
 716:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    _M_length(__str.length());
 717:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    __str._M_set_length(0);
 718:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  }
 719:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 720:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    || __str.get_allocator() == __a)
 721:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  {
 722:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    _M_data(__str._M_data());
 723:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    _M_length(__str.length());
 724:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 725:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 726:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	    __str._M_set_length(0);
 727:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  }
 728:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	else
 729:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  _M_construct(__str.begin(), __str.end(), std::forward_iterator_tag());
 730:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 731:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif // C++11
 732:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 733:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus >= 202100L
 734:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string(nullptr_t) = delete;
 735:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       basic_string& operator=(nullptr_t) = delete;
 736:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif // C++23
 737:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 738:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 739:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct string as copy of a range.
 740:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __beg  Start of range.
 741:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __end  End of range.
 742:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 743:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 744:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 745:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _InputIterator,
 746:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 747:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #else
 748:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _InputIterator>
 749:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 750:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_GLIBCXX20_CONSTEXPR
 751:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 752:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		     const _Alloc& __a = _Alloc())
 753:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 754:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	{
 755:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 756:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  _M_construct(__beg, __end, std::__iterator_category(__beg));
 757:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #else
 758:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 759:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 760:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif
 761:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	}
 762:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 763:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
 764:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 765:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
 766:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __t   Source object convertible to string view.
 767:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
 768:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
 769:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __a   Allocator to use.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 62


 770:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 771:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _Tp,
 772:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	       typename = enable_if_t<is_convertible_v<const _Tp&, __sv_type>>>
 773:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_GLIBCXX20_CONSTEXPR
 774:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
 775:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 		     const _Alloc& __a = _Alloc())
 776:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
 777:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 778:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 779:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Construct string from a string_view.
 780:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __t  Source object convertible to string view.
 781:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 782:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 783:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 784:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	_GLIBCXX20_CONSTEXPR
 785:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	explicit
 786:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 787:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 788:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #endif // C++17
 789:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 790:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       /**
 791:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        *  @brief  Destroy the string instance.
 792:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****        */
 793:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX20_CONSTEXPR
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       ~basic_string()
 298              		.loc 8 794 7 view .LVU67
 299              	.LBB658:
 795:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_dispose(); }
 300              		.loc 8 795 19 is_stmt 0 view .LVU68
 301 000a 2046     		mov	r0, r4
 302 000c FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 303              	.LVL13:
 304              	.LBB659:
 305              	.LBI659:
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 306              		.loc 8 192 14 is_stmt 1 view .LVU69
 307              	.LBB660:
 308              	.LBI660:
 309              		.loc 6 174 7 view .LVU70
 310              	.LBB661:
 311              	.LBI661:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 312              		.loc 5 90 7 view .LVU71
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 313              		.loc 5 90 7 is_stmt 0 view .LVU72
 314              	.LBE661:
 315              	.LBE660:
 316              	.LBE659:
 317              	.LBE658:
 318              	.LBE657:
 319              	.LBE656:
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     {
 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #if __cplusplus > 201703L
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****       std::destroy_at(__pointer);
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #else
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****       __pointer->~_Tp();
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** #endif
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 63


 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     }
 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****   template<bool>
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     struct _Destroy_aux
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****     {
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h ****       template<typename _ForwardIterator>
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	static _GLIBCXX20_CONSTEXPR void
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	{
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_construct.h **** 	  for (; __first != __last; ++__first)
 320              		.loc 7 162 4 is_stmt 1 view .LVU73
 321 0010 1834     		adds	r4, r4, #24
 322              	.LVL14:
 323              	.L13:
 324              		.loc 7 162 19 view .LVU74
 325 0012 A542     		cmp	r5, r4
 326 0014 F9D1     		bne	.L14
 327              	.LVL15:
 328              		.loc 7 162 19 is_stmt 0 view .LVU75
 329              	.LBE655:
 330              	.LBE654:
 331              	.LBE653:
 332              	.LBE652:
 333              	.LBE651:
 731:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		      _M_get_Tp_allocator());
 732:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 733:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 334              		.loc 3 733 7 view .LVU76
 335 0016 3046     		mov	r0, r6
 336 0018 FFF7FEFF 		bl	_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
 337              	.LVL16:
 338              	.LBE649:
 339 001c 3046     		mov	r0, r6
 340 001e 70BD     		pop	{r4, r5, r6, pc}
 341              		.loc 3 733 7 view .LVU77
 342              		.cfi_endproc
 343              	.LFE1849:
 345              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 346              		.thumb_set _ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev,_ZNSt6vec
 347              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20
 348              		.align	1
 349              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_i
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 354              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator
 355              	.LVL17:
 356              	.LFB1897:
 357              		.file 9 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\inclu
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // Components for manipulating sequences of characters -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // Copyright (C) 1997-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // Free Software Foundation; either version 3, or (at your option)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 64


   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** /** @file bits/basic_string.tcc
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****  *  This is an internal header file, included by other library headers.
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****  *  Do not attempt to use it directly. @headername{string}
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****  */
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** //
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // ISO C++ 14882: 21  Strings library
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** //
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // Written by Jason Merrill based upon the specification by Takanori Adachi
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // Non-reference-counted implementation written by Paolo Carlini and
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** // updated by Jonathan Wakely for ISO-14882-2011.
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** #ifndef _BASIC_STRING_TCC
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** #define _BASIC_STRING_TCC 1
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** #pragma GCC system_header
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** #include <bits/cxxabi_forced.h>
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** {
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** #if _GLIBCXX_USE_CXX11_ABI
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::npos;
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     _GLIBCXX20_CONSTEXPR
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     void
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     swap(basic_string& __s) _GLIBCXX_NOEXCEPT
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     {
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       if (this == std::__addressof(__s))
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	return;
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 65


  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       if (_M_is_local())
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	if (__s._M_is_local())
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  {
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    if (length() && __s.length())
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      {
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		_CharT __tmp_data[_S_local_capacity + 1];
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		traits_type::copy(__tmp_data, __s._M_local_buf,
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 				  __s.length() + 1);
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 				  length() + 1);
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		traits_type::copy(_M_local_buf, __tmp_data,
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 				  __s.length() + 1);
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      }
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    else if (__s.length())
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      {
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		traits_type::copy(_M_local_buf, __s._M_local_buf,
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 				  __s.length() + 1);
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		_M_length(__s.length());
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		__s._M_set_length(0);
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		return;
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      }
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    else if (length())
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      {
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 				  length() + 1);
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		__s._M_length(length());
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		_M_set_length(0);
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		return;
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      }
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  }
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	else
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  {
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 			      length() + 1);
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    _M_data(__s._M_data());
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    __s._M_data(__s._M_local_buf);
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    _M_capacity(__tmp_capacity);
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  }
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       else
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	{
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  const size_type __tmp_capacity = _M_allocated_capacity;
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  if (__s._M_is_local())
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    {
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 				__s.length() + 1);
 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      __s._M_data(_M_data());
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      _M_data(_M_local_buf);
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    }
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  else
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    {
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      pointer __tmp_ptr = _M_data();
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      _M_data(__s._M_data());
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      __s._M_data(__tmp_ptr);
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      _M_capacity(__s._M_allocated_capacity);
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    }
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 66


 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  __s._M_capacity(__tmp_capacity);
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	}
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       const size_type __tmp_length = length();
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       _M_length(__s.length());
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       __s._M_length(__tmp_length);
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     }
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     _GLIBCXX20_CONSTEXPR
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::pointer
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     _M_create(size_type& __capacity, size_type __old_capacity)
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     {
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       // 83.  String::npos vs. string::max_size()
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       if (__capacity > max_size())
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	std::__throw_length_error(__N("basic_string::_M_create"));
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       // The below implements an exponential growth policy, necessary to
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       // meet amortized linear time requirements of the library: see
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	{
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  __capacity = 2 * __old_capacity;
 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  // Never allocate a string bigger than max_size.
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  if (__capacity > max_size())
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    __capacity = max_size();
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	}
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       // NB: Need an array of char_type[__capacity], plus a terminating
 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       // null char_type() element.
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     }
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****   // NB: This is the special case for Input Iterators, used in
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****   // istreambuf_iterators, etc.
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****   // Input Iterators have a cost structure very different from
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****   // pointers, calling for a different coding style.
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     template<typename _InIterator>
 164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       _GLIBCXX20_CONSTEXPR
 165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       void
 166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		   std::input_iterator_tag)
 169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       {
 170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	size_type __len = 0;
 171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	size_type __capacity = size_type(_S_local_capacity);
 172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	pointer __p = _M_use_local_data();
 174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	while (__beg != __end && __len < __capacity)
 176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  {
 177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    __p[__len++] = *__beg;
 178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    ++__beg;
 179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  }
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 67


 180:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 181:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	struct _Guard
 182:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	{
 183:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  _GLIBCXX20_CONSTEXPR
 184:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 185:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 186:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  _GLIBCXX20_CONSTEXPR
 187:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 188:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 189:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  basic_string* _M_guarded;
 190:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	} __guard(this);
 191:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	while (__beg != __end)
 193:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  {
 194:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    if (__len == __capacity)
 195:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      {
 196:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		// Allocate more space.
 197:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		__capacity = __len + 1;
 198:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		pointer __another = _M_create(__capacity, __len);
 199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		this->_S_copy(__another, _M_data(), __len);
 200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		_M_dispose();
 201:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		_M_data(__another);
 202:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		_M_capacity(__capacity);
 203:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	      }
 204:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    traits_type::assign(_M_data()[__len++], *__beg);
 205:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    ++__beg;
 206:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  }
 207:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 208:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	__guard._M_guarded = 0;
 209:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 210:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	_M_set_length(__len);
 211:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       }
 212:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 213:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 214:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****     template<typename _InIterator>
 215:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       _GLIBCXX20_CONSTEXPR
 216:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       void
 217:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 358              		.loc 9 217 7 is_stmt 1 view -0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 8
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362              		.loc 9 217 7 is_stmt 0 view .LVU79
 363 0000 70B5     		push	{r4, r5, r6, lr}
 364              	.LCFI6:
 365              		.cfi_def_cfa_offset 16
 366              		.cfi_offset 4, -16
 367              		.cfi_offset 5, -12
 368              		.cfi_offset 6, -8
 369              		.cfi_offset 14, -4
 370 0002 82B0     		sub	sp, sp, #8
 371              	.LCFI7:
 372              		.cfi_def_cfa_offset 24
 373 0004 0446     		mov	r4, r0
 374 0006 0E46     		mov	r6, r1
 375              	.LVL18:
 376              	.LBB662:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 68


 377              	.LBI662:
 378              		.file 10 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // Functions used by iterators -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // Copyright (C) 2001-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** /*
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  *
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * Copyright (c) 1994
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * Hewlett-Packard Company
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  *
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  *
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  *
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * Copyright (c) 1996-1998
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  *
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  */
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** /** @file bits/stl_iterator_base_funcs.h
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  *  This is an internal header file, included by other library headers.
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  *
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  *  This file contains all of the general iterator-related utility
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 69


  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  *  functions, such as distance() and advance().
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****  */
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** #ifndef _STL_ITERATOR_BASE_FUNCS_H
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** #define _STL_ITERATOR_BASE_FUNCS_H 1
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** #pragma GCC system_header
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** #include <bits/concept_check.h>
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** #include <debug/assertions.h>
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** #include <bits/stl_iterator_base_types.h>
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** {
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   // Forward declaration for the overloads of __distance.
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   template <typename> struct _List_iterator;
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   template <typename> struct _List_const_iterator;
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   template<typename _InputIterator>
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     __distance(_InputIterator __first, _InputIterator __last,
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****                input_iterator_tag)
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     {
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****       // concept requirements
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****       typename iterator_traits<_InputIterator>::difference_type __n = 0;
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****       while (__first != __last)
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 	{
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 	  ++__first;
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 	  ++__n;
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 	}
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****       return __n;
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     }
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   template<typename _RandomAccessIterator>
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     typename iterator_traits<_RandomAccessIterator>::difference_type
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     {
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****       // concept requirements
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_RandomAccessIteratorConcept<
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 				  _RandomAccessIterator>)
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****       return __last - __first;
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     }
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** #if _GLIBCXX_USE_CXX11_ABI
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   // Forward declaration because of the qualified call in distance.
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   template<typename _Tp>
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     ptrdiff_t
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 70


 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_iterator<_Tp>,
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   template<typename _Tp>
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     ptrdiff_t
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** #endif
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** #if __cplusplus >= 201103L
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   // Give better error if std::distance called with a non-Cpp17InputIterator.
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   template<typename _OutputIterator>
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     void
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     __distance(_OutputIterator, _OutputIterator, output_iterator_tag) = delete;
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** #endif
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h **** 
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   /**
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****    *  @brief A generalization of pointer arithmetic.
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****    *  @param  __first  An input iterator.
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****    *  @param  __last  An input iterator.
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****    *  @return  The distance between them.
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****    *
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****    *  Returns @c n such that __first + n == __last.  This requires
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****    *  that @p __last must be reachable from @p __first.  Note that @c
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****    *  n may be negative.
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****    *
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****    *  For random access iterators, this uses their @c + and @c - operations
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****    *  and are constant time.  For other %iterator classes they are linear time.
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   */
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****   template<typename _InputIterator>
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     _GLIBCXX_NODISCARD
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     inline _GLIBCXX17_CONSTEXPR
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     distance(_InputIterator __first, _InputIterator __last)
 379              		.loc 10 147 5 is_stmt 1 view .LVU80
 380              	.LBB663:
 381              	.LBI663:
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 382              		.loc 10 99 5 view .LVU81
 383              	.LBB664:
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     }
 384              		.loc 10 105 23 is_stmt 0 view .LVU82
 385 0008 551A     		subs	r5, r2, r1
 386              	.LVL19:
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator_base_funcs.h ****     }
 387              		.loc 10 105 23 view .LVU83
 388              	.LBE664:
 389              	.LBE663:
 390              	.LBE662:
 218:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 219:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 		   std::forward_iterator_tag)
 220:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       {
 221:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 391              		.loc 9 221 12 view .LVU84
 392 000a 0195     		str	r5, [sp, #4]
 222:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 71


 223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	if (__dnew > size_type(_S_local_capacity))
 393              		.loc 9 223 2 view .LVU85
 394 000c 0F2D     		cmp	r5, #15
 395 000e 0DD8     		bhi	.L19
 396              	.LVL20:
 397              	.L17:
 398              	.LBB665:
 399              	.LBI665:
 224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  {
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    _M_data(_M_create(__dnew, size_type(0)));
 226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    _M_capacity(__dnew);
 227:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  }
 228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	else
 229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  _M_use_local_data();
 230:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 231:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	// Check for out_of_range and length_error exceptions.
 232:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	struct _Guard
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	{
 234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  _GLIBCXX20_CONSTEXPR
 235:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 400              		.loc 9 235 13 is_stmt 1 view .LVU86
 401              	.LBB666:
 402              	.LBB667:
 403              		.loc 9 235 41 is_stmt 0 view .LVU87
 404 0010 0094     		str	r4, [sp]
 405              	.LVL21:
 406              		.loc 9 235 41 view .LVU88
 407              	.LBE667:
 408              	.LBE666:
 409              	.LBE665:
 410              	.LBB668:
 411              	.LBI668:
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { return _M_dataplus._M_p; }
 412              		.loc 8 233 7 is_stmt 1 view .LVU89
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { return _M_dataplus._M_p; }
 413              		.loc 8 233 7 is_stmt 0 view .LVU90
 414              	.LBE668:
 415              	.LBB669:
 416              	.LBI669:
 475:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       _GLIBCXX_NOEXCEPT
 417              		.loc 8 475 7 is_stmt 1 view .LVU91
 418              	.LBB670:
 477:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 419              		.loc 8 477 16 is_stmt 0 view .LVU92
 420 0012 2A46     		mov	r2, r5
 421 0014 3146     		mov	r1, r6
 422 0016 2068     		ldr	r0, [r4]
 423 0018 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj
 424              	.LVL22:
 477:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 425              		.loc 8 477 16 view .LVU93
 426              	.LBE670:
 427              	.LBE669:
 236:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  _GLIBCXX20_CONSTEXPR
 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 239:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 72


 240:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  basic_string* _M_guarded;
 241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	} __guard(this);
 242:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 243:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	this->_S_copy_chars(_M_data(), __beg, __end);
 244:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 245:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	__guard._M_guarded = 0;
 428              		.loc 9 245 21 view .LVU94
 429 001c 0022     		movs	r2, #0
 430 001e 0092     		str	r2, [sp]
 246:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 247:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	_M_set_length(__dnew);
 431              		.loc 9 247 15 view .LVU95
 432 0020 019B     		ldr	r3, [sp, #4]
 433              	.LVL23:
 434              	.LBB671:
 435              	.LBI671:
 265:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 436              		.loc 8 265 7 is_stmt 1 view .LVU96
 437              	.LBB672:
 438              	.LBB673:
 439              	.LBI673:
 228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_string_length = __length; }
 440              		.loc 8 228 7 view .LVU97
 441              	.LBB674:
 229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 442              		.loc 8 229 26 is_stmt 0 view .LVU98
 443 0022 6360     		str	r3, [r4, #4]
 444              	.LVL24:
 229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 445              		.loc 8 229 26 view .LVU99
 446              	.LBE674:
 447              	.LBE673:
 448              	.LBB675:
 449              	.LBI675:
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { return _M_dataplus._M_p; }
 450              		.loc 8 233 7 is_stmt 1 view .LVU100
 451              	.LBB676:
 234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 452              		.loc 8 234 28 is_stmt 0 view .LVU101
 453 0024 2168     		ldr	r1, [r4]
 454              	.LVL25:
 234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 455              		.loc 8 234 28 view .LVU102
 456              	.LBE676:
 457              	.LBE675:
 458              	.LBB677:
 459              	.LBI677:
 460              		.file 11 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // Copyright (C) 1997-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // any later version.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 73


  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** /** @file bits/char_traits.h
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****  */
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** //
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** //
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #define _CHAR_TRAITS_H 1
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #pragma GCC system_header
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #include <bits/postypes.h>      // For streampos
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cplusplus >= 201103L
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** # include <type_traits>
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cplusplus >= 202002L
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** # include <compare>
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** # include <bits/stl_construct.h>
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #ifndef _GLIBCXX_ALWAYS_INLINE
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** # define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** {
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #pragma GCC diagnostic push
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #pragma GCC diagnostic ignored "-Wstringop-overflow"
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #pragma GCC diagnostic ignored "-Wstringop-overread"
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #pragma GCC diagnostic ignored "-Warray-bounds"
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   /**
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  @brief  Mapping from character type to associated types.
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  @note This is an implementation class for the generic version
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 74


  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  types, but who don't need to change the definitions of any function
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   template<typename _CharT>
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     struct _Char_types
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     {
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef unsigned long   int_type;
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef std::streampos  pos_type;
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef std::streamoff  off_type;
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef std::mbstate_t  state_type;
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     };
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   /**
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  @note For any given actual character type, this definition is
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  namespace __gnu_cxx may be.
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    */
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   template<typename _CharT>
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     struct char_traits
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     {
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef _CharT                                    char_type;
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cpp_lib_three_way_comparison
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       using comparison_category = std::strong_ordering;
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX14_CONSTEXPR void
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       {
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cpp_constexpr_dynamic_alloc
 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	if (std::__is_constant_evaluated())
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  std::construct_at(__builtin_addressof(__c1), __c2);
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	else
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	__c1 = __c2;
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       }
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       { return __c1 == __c2; }
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 75


 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       { return __c1 < __c2; }
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX14_CONSTEXPR int
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX14_CONSTEXPR std::size_t
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       length(const char_type* __s);
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX14_CONSTEXPR const char_type*
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       to_char_type(const int_type& __c)
 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       { return static_cast<char_type>(__c); }
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       to_int_type(const char_type& __c)
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       { return static_cast<int_type>(__c); }
 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       { return __c1 == __c2; }
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       eof()
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       not_eof(const int_type& __c)
 164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     };
 166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   template<typename _CharT>
 168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     _GLIBCXX14_CONSTEXPR int
 169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     char_traits<_CharT>::
 170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     {
 172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  return -1;
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  return 1;
 177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       return 0;
 178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     }
 179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 180:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   template<typename _CharT>
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 76


 181:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     _GLIBCXX14_CONSTEXPR std::size_t
 182:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     char_traits<_CharT>::
 183:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     length(const char_type* __p)
 184:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     {
 185:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       std::size_t __i = 0;
 186:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       while (!eq(__p[__i], char_type()))
 187:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****         ++__i;
 188:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       return __i;
 189:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     }
 190:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 191:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   template<typename _CharT>
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     _GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type*
 193:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     char_traits<_CharT>::
 194:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 195:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     {
 196:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 197:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****         if (eq(__s[__i], __a))
 198:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****           return __s + __i;
 199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       return 0;
 200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     }
 201:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 202:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   template<typename _CharT>
 203:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     _GLIBCXX20_CONSTEXPR
 204:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     typename char_traits<_CharT>::char_type*
 205:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     char_traits<_CharT>::
 206:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 207:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     {
 208:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       if (__n == 0)
 209:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	return __s1;
 210:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cplusplus >= 202002L
 211:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       if (std::__is_constant_evaluated())
 212:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	{
 213:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  if (__s1 == __s2) // unlikely, but saves a lot of work
 214:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	    return __s1;
 215:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cpp_constexpr_dynamic_alloc
 216:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  // The overlap detection below fails due to PR c++/89074,
 217:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  // so use a temporary buffer instead.
 218:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  char_type* __tmp = new char_type[__n];
 219:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  copy(__tmp, __s2, __n);
 220:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  copy(__s1, __tmp, __n);
 221:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  delete[] __tmp;
 222:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #else
 223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  const auto __end = __s2 + __n - 1;
 224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  bool __overlap = false;
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  for (std::size_t __i = 0; __i < __n - 1; ++__i)
 226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	    {
 227:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	      if (__s1 + __i == __end)
 228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 		{
 229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 		  __overlap = true;
 230:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 		  break;
 231:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 		}
 232:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	    }
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  if (__overlap)
 234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	    {
 235:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	      do
 236:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 		{
 237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 		  --__n;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 77


 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 		  assign(__s1[__n], __s2[__n]);
 239:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 		}
 240:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	      while (__n > 0);
 241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	    }
 242:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  else
 243:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	    copy(__s1, __s2, __n);
 244:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
 245:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  return __s1;
 246:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	}
 247:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
 248:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       __builtin_memmove(__s1, __s2, __n * sizeof(char_type));
 249:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       return __s1;
 250:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     }
 251:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 252:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   template<typename _CharT>
 253:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     _GLIBCXX20_CONSTEXPR
 254:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     typename char_traits<_CharT>::char_type*
 255:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     char_traits<_CharT>::
 256:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 257:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     {
 258:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cplusplus >= 202002L
 259:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       if (std::__is_constant_evaluated())
 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	{
 261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  for (std::size_t __i = 0; __i < __n; ++__i)
 262:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	    std::construct_at(__s1 + __i, __s2[__i]);
 263:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  return __s1;
 264:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	}
 265:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
 266:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 267:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));
 268:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       return __s1;
 269:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     }
 270:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 271:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   template<typename _CharT>
 272:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     _GLIBCXX20_CONSTEXPR
 273:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     typename char_traits<_CharT>::char_type*
 274:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     char_traits<_CharT>::
 275:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 276:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     {
 277:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cplusplus >= 202002L
 278:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       if (std::__is_constant_evaluated())
 279:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	{
 280:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  for (std::size_t __i = 0; __i < __n; ++__i)
 281:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	    std::construct_at(__s + __i, __a);
 282:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  return __s;
 283:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	}
 284:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
 285:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 286:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       if _GLIBCXX17_CONSTEXPR (sizeof(_CharT) == 1 && __is_trivial(_CharT))
 287:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	{
 288:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  unsigned char __c;
 289:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  __builtin_memcpy(&__c, __builtin_addressof(__a), 1);
 290:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  __builtin_memset(__s, __c, __n);
 291:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	}
 292:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       else
 293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	{
 294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  for (std::size_t __i = 0; __i < __n; ++__i)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 78


 295:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	    __s[__i] = __a;
 296:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	}
 297:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       return __s;
 298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     }
 299:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 300:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 301:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** } // namespace
 302:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 303:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 304:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** {
 305:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 306:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 307:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #ifdef __cpp_lib_is_constant_evaluated
 308:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // Unofficial macro indicating P1032R1 support in C++20
 309:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** # define __cpp_lib_constexpr_char_traits 201811L
 310:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #elif __cplusplus >= 201703L && _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED
 311:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** // Unofficial macro indicating P0426R1 support in C++17
 312:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** # define __cpp_lib_constexpr_char_traits 201611L
 313:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
 314:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 315:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   // 21.1
 316:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   /**
 317:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 318:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *
 319:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  @note  For any given actual character type, this definition is
 320:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 321:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 322:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 323:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *
 324:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 325:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 326:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 327:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   */
 328:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   template<typename _CharT>
 329:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 330:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     { };
 331:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 332:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 333:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   /// 21.1.3.1  char_traits specializations
 334:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****   template<>
 335:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     struct char_traits<char>
 336:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****     {
 337:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef char              char_type;
 338:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef int               int_type;
 339:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef streampos         pos_type;
 340:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef streamoff         off_type;
 341:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       typedef mbstate_t         state_type;
 342:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cpp_lib_three_way_comparison
 343:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       using comparison_category = strong_ordering;
 344:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
 345:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 346:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX17_CONSTEXPR void
 347:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 461              		.loc 11 347 7 is_stmt 1 view .LVU103
 462              	.LBB678:
 348:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       {
 349:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cpp_constexpr_dynamic_alloc
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 79


 350:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	if (std::__is_constant_evaluated())
 351:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  std::construct_at(__builtin_addressof(__c1), __c2);
 352:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	else
 353:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
 354:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	__c1 = __c2;
 463              		.loc 11 354 2 view .LVU104
 464              		.loc 11 354 7 is_stmt 0 view .LVU105
 465 0026 CA54     		strb	r2, [r1, r3]
 466              	.LVL26:
 467              		.loc 11 354 7 view .LVU106
 468              	.LBE678:
 469              	.LBE677:
 470              	.LBE672:
 471              	.LBE671:
 472              	.LBB679:
 473              	.LBI679:
 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 474              		.loc 9 238 4 is_stmt 1 view .LVU107
 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 
 475              		.loc 9 238 4 is_stmt 0 view .LVU108
 476              	.LBE679:
 248:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc ****       }
 477              		.loc 9 248 7 view .LVU109
 478 0028 02B0     		add	sp, sp, #8
 479              	.LCFI8:
 480              		.cfi_remember_state
 481              		.cfi_def_cfa_offset 16
 482              		@ sp needed
 483 002a 70BD     		pop	{r4, r5, r6, pc}
 484              	.LVL27:
 485              	.L19:
 486              	.LCFI9:
 487              		.cfi_restore_state
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    _M_capacity(__dnew);
 488              		.loc 9 225 13 view .LVU110
 489 002c 0022     		movs	r2, #0
 490              	.LVL28:
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    _M_capacity(__dnew);
 491              		.loc 9 225 13 view .LVU111
 492 002e 01A9     		add	r1, sp, #4
 493              	.LVL29:
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	    _M_capacity(__dnew);
 494              		.loc 9 225 13 view .LVU112
 495 0030 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
 496              	.LVL30:
 497              	.LBB680:
 498              	.LBI680:
 223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_dataplus._M_p = __p; }
 499              		.loc 8 223 7 is_stmt 1 view .LVU113
 500              	.LBB681:
 224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 501              		.loc 8 224 26 is_stmt 0 view .LVU114
 502 0034 2060     		str	r0, [r4]
 503              	.LVL31:
 224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 504              		.loc 8 224 26 view .LVU115
 505              	.LBE681:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 80


 506              	.LBE680:
 226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.tcc **** 	  }
 507              		.loc 9 226 17 view .LVU116
 508 0036 019B     		ldr	r3, [sp, #4]
 509              	.LVL32:
 510              	.LBB682:
 511              	.LBI682:
 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_allocated_capacity = __capacity; }
 512              		.loc 8 260 7 is_stmt 1 view .LVU117
 513              	.LBB683:
 261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 514              		.loc 8 261 31 is_stmt 0 view .LVU118
 515 0038 A360     		str	r3, [r4, #8]
 261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 516              		.loc 8 261 45 view .LVU119
 517 003a E9E7     		b	.L17
 518              	.LBE683:
 519              	.LBE682:
 520              		.cfi_endproc
 521              	.LFE1897:
 523              		.section	.rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.str1.4,"aMS
 524              		.align	2
 525              	.LC0:
 526 0000 62617369 		.ascii	"basic_string: construction from null is not valid\000"
 526      635F7374 
 526      72696E67 
 526      3A20636F 
 526      6E737472 
 527              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_,"axG",%progbi
 528              		.align	1
 529              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 534              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:
 535              	.LVL33:
 536              	.LFB1836:
 634:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 537              		.loc 8 634 7 is_stmt 1 view -0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 634:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 541              		.loc 8 634 7 is_stmt 0 view .LVU121
 542 0000 38B5     		push	{r3, r4, r5, lr}
 543              	.LCFI10:
 544              		.cfi_def_cfa_offset 16
 545              		.cfi_offset 3, -16
 546              		.cfi_offset 4, -12
 547              		.cfi_offset 5, -8
 548              		.cfi_offset 14, -4
 549              	.LVL34:
 550              	.LBB684:
 551              	.LBI684:
 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 552              		.loc 8 238 7 is_stmt 1 view .LVU122
 553              	.LBB685:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 81


 241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #else
 554              		.loc 8 241 51 is_stmt 0 view .LVU123
 555 0002 00F10803 		add	r3, r0, #8
 556              	.LVL35:
 241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** #else
 557              		.loc 8 241 51 view .LVU124
 558              	.LBE685:
 559              	.LBE684:
 560              	.LBB686:
 561              	.LBI686:
 199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 562              		.loc 8 199 2 is_stmt 1 view .LVU125
 563              	.LBB687:
 564              	.LBB688:
 565              	.LBI688:
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h ****       : __allocator_base<_Tp>(__a) { }
 566              		.loc 6 159 7 view .LVU126
 567              	.LBB689:
 568              	.LBI689:
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 569              		.loc 5 83 7 view .LVU127
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 570              		.loc 5 83 7 is_stmt 0 view .LVU128
 571              	.LBE689:
 572              	.LBE688:
 200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 573              		.loc 8 200 25 view .LVU129
 574 0006 0360     		str	r3, [r0]
 575              	.LVL36:
 200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 576              		.loc 8 200 25 view .LVU130
 577              	.LBE687:
 578              	.LBE686:
 579              	.LBB690:
 638:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 	  std::__throw_logic_error(__N("basic_string: "
 580              		.loc 8 638 2 view .LVU131
 581 0008 69B1     		cbz	r1, .L23
 582 000a 0446     		mov	r4, r0
 583 000c 0D46     		mov	r5, r1
 584              	.LVL37:
 585              	.LBB691:
 586              	.LBI691:
 355:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       }
 356:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 357:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 358:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 359:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       { return __c1 == __c2; }
 360:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 361:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 362:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 363:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       {
 364:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	// LWG 467.
 365:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	return (static_cast<unsigned char>(__c1)
 366:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 		< static_cast<unsigned char>(__c2));
 367:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       }
 368:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 369:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX17_CONSTEXPR int
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 82


 370:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 371:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       {
 372:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	if (__n == 0)
 373:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  return 0;
 374:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cplusplus >= 201703L
 375:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	if (std::__is_constant_evaluated())
 376:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  {
 377:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	    for (size_t __i = 0; __i < __n; ++__i)
 378:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	      if (lt(__s1[__i], __s2[__i]))
 379:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 		return -1;
 380:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	      else if (lt(__s2[__i], __s1[__i]))
 381:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 		return 1;
 382:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	    return 0;
 383:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  }
 384:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
 385:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	return __builtin_memcmp(__s1, __s2, __n);
 386:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       }
 387:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 
 388:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       static _GLIBCXX17_CONSTEXPR size_t
 389:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       length(const char_type* __s)
 587              		.loc 11 389 7 is_stmt 1 view .LVU132
 588              	.LBB692:
 390:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h ****       {
 391:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #if __cplusplus >= 201703L
 392:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	if (std::__is_constant_evaluated())
 589              		.loc 11 392 2 view .LVU133
 393:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 394:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** #endif
 395:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\char_traits.h **** 	return __builtin_strlen(__s);
 590              		.loc 11 395 2 view .LVU134
 591              		.loc 11 395 25 is_stmt 0 view .LVU135
 592 000e 0846     		mov	r0, r1
 593              	.LVL38:
 594              		.loc 11 395 25 view .LVU136
 595 0010 FFF7FEFF 		bl	strlen
 596              	.LVL39:
 597              		.loc 11 395 25 view .LVU137
 598              	.LBE692:
 599              	.LBE691:
 642:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 600              		.loc 8 642 14 view .LVU138
 601 0014 4FF00003 		mov	r3, #0
 602 0018 2A18     		adds	r2, r5, r0
 603              	.LVL40:
 642:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 604              		.loc 8 642 14 view .LVU139
 605 001a 2946     		mov	r1, r5
 606 001c 2046     		mov	r0, r4
 607 001e FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iter
 608              	.LVL41:
 642:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       }
 609              		.loc 8 642 14 view .LVU140
 610              	.LBE690:
 643:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 
 611              		.loc 8 643 7 view .LVU141
 612 0022 2046     		mov	r0, r4
 613 0024 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 83


 614              	.LVL42:
 615              	.L23:
 616              	.LBB693:
 639:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 				       "construction from null is not valid"));
 617              		.loc 8 639 28 view .LVU142
 618 0026 0148     		ldr	r0, .L24
 619              	.LVL43:
 639:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 				       "construction from null is not valid"));
 620              		.loc 8 639 28 view .LVU143
 621 0028 FFF7FEFF 		bl	_ZSt19__throw_logic_errorPKc
 622              	.LVL44:
 623              	.L25:
 639:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h **** 				       "construction from null is not valid"));
 624              		.loc 8 639 28 view .LVU144
 625              		.align	2
 626              	.L24:
 627 002c 00000000 		.word	.LC0
 628              	.LBE693:
 629              		.cfi_endproc
 630              	.LFE1836:
 632              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 633              		.thumb_set _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_,_ZNSt7__cxx1112ba
 634              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4backEv,"a
 635              		.align	1
 636              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4backEv
 637              		.syntax unified
 638              		.thumb
 639              		.thumb_func
 641              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4backEv:
 642              	.LVL45:
 643              	.LFB2056:
 734:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 735:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 736:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  %Vector assignment operator.
 737:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 738:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 739:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 740:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @a __x will not be copied.
 741:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 742:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 743:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 744:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 745:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector&
 746:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       operator=(const vector& __x);
 747:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 748:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 749:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 750:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  %Vector move assignment operator.
 751:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 752:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 753:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 754:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  if the allocators permit it).
 755:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 756:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 757:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 758:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 759:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 84


 760:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector&
 761:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 762:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 763:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	constexpr bool __move_storage =
 764:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 765:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 766:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 767:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return *this;
 768:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 769:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 770:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 771:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  %Vector list assignment operator.
 772:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 773:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 774:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 775:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  initializer list @a __l.
 776:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 777:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 778:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 779:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  of elements assigned.
 780:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 781:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 782:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       vector&
 783:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       operator=(initializer_list<value_type> __l)
 784:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 785:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 786:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			    random_access_iterator_tag());
 787:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return *this;
 788:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 789:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 790:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 791:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 792:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 793:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __val  Value to be assigned.
 795:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 796:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 797:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  value.  Note that the assignment completely changes the
 798:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 799:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the number of elements assigned.
 800:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 801:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 802:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
 803:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       assign(size_type __n, const value_type& __val)
 804:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { _M_fill_assign(__n, __val); }
 805:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 806:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 807:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 808:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
 809:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __last   An input iterator.
 810:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 811:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 812:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  range [__first,__last).
 813:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 814:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 815:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 816:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  of elements assigned.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 85


 817:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 818:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 819:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator,
 820:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 821:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 822:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
 823:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 824:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 825:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
 826:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
 827:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
 828:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 829:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
 830:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 831:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 832:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 833:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
 834:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 835:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 836:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 837:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 838:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 839:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 840:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 841:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 842:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  initializer list @a __l.
 843:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
 844:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 845:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 846:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  of elements assigned.
 847:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 848:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 849:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
 850:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       assign(initializer_list<value_type> __l)
 851:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 852:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 853:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			    random_access_iterator_tag());
 854:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 855:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 856:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 857:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /// Get a copy of the memory allocation object.
 858:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       using _Base::get_allocator;
 859:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 860:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // iterators
 861:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 862:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read/write iterator that points to the first
 863:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 864:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  element order.
 865:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 866:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 867:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       iterator
 868:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 869:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 870:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 871:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 872:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 873:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 86


 874:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  element order.
 875:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 876:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 877:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_iterator
 878:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 879:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 880:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 881:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 882:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 883:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 884:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  element order.
 885:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 886:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 887:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       iterator
 888:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 889:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 890:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 891:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 892:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 893:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 894:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  ordinary element order.
 895:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 896:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 897:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_iterator
 898:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 899:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 900:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 901:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 902:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 903:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 904:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  element order.
 905:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 906:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 907:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       reverse_iterator
 908:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 909:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return reverse_iterator(end()); }
 910:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 911:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 912:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 913:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 914:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  reverse element order.
 915:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 916:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 917:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_reverse_iterator
 918:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 919:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(end()); }
 920:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 921:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 922:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 923:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 924:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  in reverse element order.
 925:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 926:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 927:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       reverse_iterator
 928:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 929:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return reverse_iterator(begin()); }
 930:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 87


 931:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 932:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 933:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 934:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  is done in reverse element order.
 935:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 936:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 937:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_reverse_iterator
 938:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 939:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(begin()); }
 940:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 941:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 942:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 943:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 944:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 945:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  element order.
 946:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 947:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
 948:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_iterator
 949:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       cbegin() const noexcept
 950:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 951:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 952:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 953:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 954:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 955:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  ordinary element order.
 956:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 957:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
 958:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_iterator
 959:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       cend() const noexcept
 960:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 961:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 962:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 963:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 964:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 965:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  reverse element order.
 966:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 967:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
 968:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_reverse_iterator
 969:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       crbegin() const noexcept
 970:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(end()); }
 971:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 972:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 973:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 974:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 975:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  is done in reverse element order.
 976:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
 977:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
 978:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_reverse_iterator
 979:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       crend() const noexcept
 980:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(begin()); }
 981:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
 982:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 983:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // [23.2.4.2] capacity
 984:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 985:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 986:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       size_type
 987:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 88


 988:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 989:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 990:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 991:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 992:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       size_type
 993:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 994:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 995:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 996:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 997:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
 998:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 999:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
1000:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1001:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
1002:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
1003:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
1004:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  default constructed elements are appended.
1005:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1006:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1007:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1008:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       resize(size_type __new_size)
1009:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1010:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	if (__new_size > size())
1011:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_default_append(__new_size - size());
1012:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	else if (__new_size < size())
1013:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
1014:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1015:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1016:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1017:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
1018:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
1019:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
1020:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1021:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
1022:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
1023:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
1024:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the %vector is extended and new elements are populated with
1025:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  given data.
1026:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1027:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1028:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1029:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
1030:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1031:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	if (__new_size > size())
1032:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
1033:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	else if (__new_size < size())
1034:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
1035:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1036:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
1037:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1038:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
1039:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
1040:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
1041:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1042:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
1043:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
1044:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 89


1045:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the %vector is extended and new elements are populated with
1046:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  given data.
1047:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1048:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1049:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1050:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
1051:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1052:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	if (__new_size > size())
1053:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
1054:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	else if (__new_size < size())
1055:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
1056:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1057:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1058:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1059:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1060:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
1061:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1062:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1063:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       shrink_to_fit()
1064:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { _M_shrink_to_fit(); }
1065:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1066:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1067:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1068:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns the total number of elements that the %vector can
1069:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  hold before needing to allocate more memory.
1070:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1071:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       size_type
1073:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
1074:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
1075:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			 - this->_M_impl._M_start); }
1076:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1077:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1078:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1079:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  equal end().)
1080:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1081:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1082:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       bool
1083:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
1084:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return begin() == end(); }
1085:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1086:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1087:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1088:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *          elements.
1089:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements required.
1090:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1091:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1092:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function attempts to reserve enough memory for the
1093:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1094:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  number requested is more than max_size(), length_error is
1095:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  thrown.
1096:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1097:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1098:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  necessity and the user can determine the number of elements
1099:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  that will be required, the user can reserve the memory in
1100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  and copying of %vector data.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 90


1102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       reserve(size_type __n);
1106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // element access
1108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  accessed.
1112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  Read/write reference to data.
1113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that data access with this operator is unchecked and
1116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  see at().)
1118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       reference
1121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
1122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  accessed.
1131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that data access with this operator is unchecked and
1135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  see at().)
1137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_reference
1140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     protected:
1147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /// Safety check used only from at().
1148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_range_check(size_type __n) const
1151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	if (__n >= this->size())
1153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 				       "(which is %zu) >= this->size() "
1155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 				       "(which is %zu)"),
1156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 				   __n, this->size());
1157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 91


1159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     public:
1160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  accessed.
1164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  Read/write reference to data.
1165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function provides for safer data access.  The parameter
1168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  function throws out_of_range if the check fails.
1170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       reference
1173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       at(size_type __n)
1174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_range_check(__n);
1176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return (*this)[__n];
1177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1180:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1181:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1182:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  accessed.
1183:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1184:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1185:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1186:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function provides for safer data access.  The parameter
1187:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1188:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  function throws out_of_range if the check fails.
1189:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1190:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1191:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_reference
1192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       at(size_type __n) const
1193:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1194:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_range_check(__n);
1195:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return (*this)[__n];
1196:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1197:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1198:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read/write reference to the data at the first
1200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  element of the %vector.
1201:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1202:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1203:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       reference
1204:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1205:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1206:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1207:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return *begin();
1208:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1209:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1210:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1211:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1212:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  element of the %vector.
1213:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1214:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1215:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_reference
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 92


1216:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1217:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1218:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1219:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return *begin();
1220:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1221:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1222:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read/write reference to the data at the last
1224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  element of the %vector.
1225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1227:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       reference
1228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
 644              		.loc 3 1228 7 is_stmt 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648              		@ link register save eliminated.
 649              	.LBB694:
 650              	.LBI694:
 888:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 651              		.loc 3 888 7 view .LVU146
 652              	.LBB695:
 653              	.LBB696:
 654              	.LBI696:
 655              		.file 12 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // Iterators -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // Copyright (C) 2001-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** /*
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  *
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * Copyright (c) 1994
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * Hewlett-Packard Company
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  *
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 93


  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * representations about the suitability of this software for any
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  *
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  *
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * Copyright (c) 1996-1998
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  *
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * representations about the suitability of this software for any
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  */
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** /** @file bits/stl_iterator.h
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  *
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****  */
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #include <bits/stl_iterator_base_types.h>
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #include <ext/type_traits.h>
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #include <bits/move.h>
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #include <bits/ptr_traits.h>
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** # include <type_traits>
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** # define __cpp_lib_array_constexpr 201811L
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** # define __cpp_lib_constexpr_iterator 201811L
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #elif __cplusplus == 201703L
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** # define __cpp_lib_array_constexpr 201803L
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus >= 202002L
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** # include <compare>
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** # include <new>
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** # include <bits/exception_defines.h>
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** # include <bits/iterator_concepts.h>
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** # include <bits/stl_construct.h>
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 94


  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** {
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   /**
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    * @addtogroup iterators
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    * @{
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    */
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cpp_lib_concepts
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   namespace __detail
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   {
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     // Weaken iterator_category _Cat to _Limit if it is derived from that,
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     // otherwise use _Otherwise.
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     template<typename _Cat, typename _Limit, typename _Otherwise = _Cat>
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       using __clamp_iter_cat
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	= __conditional_t<derived_from<_Cat, _Limit>, _Limit, _Otherwise>;
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   }
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** // Ignore warnings about std::iterator.
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #pragma GCC diagnostic push
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // 24.4.1 Reverse iterators
 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   /**
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @code
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @endcode
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  the requirement that the iterators must be safe.
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   */
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     class reverse_iterator
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     {
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       template<typename _Iter>
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	friend class reverse_iterator;
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cpp_lib_concepts
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       // 3435. three_way_comparable_with<reverse_iterator<int*>, [...]>
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       template<typename _Iter>
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 95


 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	static constexpr bool __convertible = !is_same_v<_Iter, _Iterator>
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	    && convertible_to<const _Iter&, _Iterator>;
 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     protected:
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _Iterator current;
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     public:
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef _Iterator					iterator_type;
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if ! __cpp_lib_concepts
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #else
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       using iterator_concept
 163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	= __conditional_t<random_access_iterator<_Iterator>,
 164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 			  random_access_iterator_tag,
 165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 			  bidirectional_iterator_tag>;
 166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       using iterator_category
 167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	= __detail::__clamp_iter_cat<typename __traits_type::iterator_category,
 168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 				     random_access_iterator_tag>;
 169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       using value_type = iter_value_t<_Iterator>;
 170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       using difference_type = iter_difference_t<_Iterator>;
 171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       using reference = iter_reference_t<_Iterator>;
 172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 180:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
 181:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 182:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       reverse_iterator()
 183:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator()))
 184:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : current()
 185:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { }
 186:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 187:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 188:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 189:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 190:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 191:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       reverse_iterator(iterator_type __x)
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x)))
 193:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : current(__x)
 194:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { }
 195:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 196:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 197:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  The copy constructor is normal.
 198:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 201:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x.current)))
 202:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : current(__x.current)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 96


 203:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { }
 204:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 205:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
 206:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       reverse_iterator& operator=(const reverse_iterator&) = default;
 207:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 208:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 209:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 210:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 211:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 212:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 213:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       template<typename _Iter>
 214:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cpp_lib_concepts
 215:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	requires __convertible<_Iter>
 216:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 217:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 218:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 219:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	_GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x.current)))
 220:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	: current(__x.current)
 221:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	{ }
 222:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
 224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       template<typename _Iter>
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cpp_lib_concepts
 226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	requires __convertible<_Iter>
 227:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	  && assignable_from<_Iterator&, const _Iter&>
 228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 230:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	reverse_iterator&
 231:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	operator=(const reverse_iterator<_Iter>& __x)
 232:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	_GLIBCXX_NOEXCEPT_IF(noexcept(current = __x.current))
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	{
 234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	  current = __x.current;
 235:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	  return *this;
 236:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	}
 237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 239:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 240:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 242:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 243:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 244:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       base() const
 245:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(current)))
 246:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return current; }
 247:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 248:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 249:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  A reference to the value at @c --current
 250:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 251:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 252:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 253:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 254:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 255:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 256:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 257:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 258:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 259:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 97


 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator*() const
 261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 262:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	_Iterator __tmp = current;
 263:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *--__tmp;
 264:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 265:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 266:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 267:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 268:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 269:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 270:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 271:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 272:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 273:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator->() const
 274:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_concepts >= 201907L
 275:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       requires is_pointer_v<_Iterator>
 276:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	|| requires(const _Iterator __i) { __i.operator->(); }
 277:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 278:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 279:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 280:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	// 1052. operator-> should also support smart pointers
 281:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	_Iterator __tmp = current;
 282:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	--__tmp;
 283:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return _S_to_pointer(__tmp);
 284:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 285:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 286:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 287:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  @c *this
 288:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 289:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  Decrements the underlying iterator.
 290:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 291:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 292:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator++()
 293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	--current;
 295:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 296:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 297:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 299:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  The original value of @c *this
 300:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 301:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  Decrements the underlying iterator.
 302:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 303:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 304:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator++(int)
 305:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 306:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	reverse_iterator __tmp = *this;
 307:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	--current;
 308:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return __tmp;
 309:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 310:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 311:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 312:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  @c *this
 313:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 314:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  Increments the underlying iterator.
 315:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 316:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 98


 317:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator--()
 318:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 319:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	++current;
 320:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 321:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 322:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 323:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 324:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 325:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 326:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  Increments the underlying iterator.
 327:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 328:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 329:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator--(int)
 330:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 331:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	reverse_iterator __tmp = *this;
 332:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	++current;
 333:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return __tmp;
 334:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 335:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 336:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 337:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 338:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 339:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 340:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 341:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 342:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 343:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator+(difference_type __n) const
 344:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return reverse_iterator(current - __n); }
 345:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 346:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 347:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  *this
 348:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 349:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 350:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 351:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 352:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 353:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator+=(difference_type __n)
 354:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 355:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	current -= __n;
 356:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 357:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 358:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 359:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 360:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 361:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 362:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 363:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 364:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 365:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 366:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator-(difference_type __n) const
 367:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return reverse_iterator(current + __n); }
 368:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 369:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 370:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  *this
 371:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 372:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 373:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 99


 374:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 375:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 376:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator-=(difference_type __n)
 377:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 378:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	current += __n;
 379:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 380:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 381:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 382:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 383:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 384:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 385:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 386:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 387:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 388:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 389:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator[](difference_type __n) const
 390:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return *(*this + __n); }
 391:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 392:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 393:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       [[nodiscard]]
 394:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       friend constexpr iter_rvalue_reference_t<_Iterator>
 395:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       iter_move(const reverse_iterator& __i)
 396:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       noexcept(is_nothrow_copy_constructible_v<_Iterator>
 397:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       && noexcept(ranges::iter_move(--std::declval<_Iterator&>())))
 398:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 399:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	auto __tmp = __i.base();
 400:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return ranges::iter_move(--__tmp);
 401:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 402:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 403:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       template<indirectly_swappable<_Iterator> _Iter2>
 404:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	friend constexpr void
 405:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	iter_swap(const reverse_iterator& __x,
 406:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 		  const reverse_iterator<_Iter2>& __y)
 407:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	noexcept(is_nothrow_copy_constructible_v<_Iterator>
 408:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 		 && is_nothrow_copy_constructible_v<_Iter2>
 409:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 		 && noexcept(ranges::iter_swap(--std::declval<_Iterator&>(),
 410:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 					       --std::declval<_Iter2&>())))
 411:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	{
 412:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	  auto __xtmp = __x.base();
 413:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	  auto __ytmp = __y.base();
 414:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	  ranges::iter_swap(--__xtmp, --__ytmp);
 415:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	}
 416:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 417:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 418:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     private:
 419:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       template<typename _Tp>
 420:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR _Tp*
 421:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	_S_to_pointer(_Tp* __p)
 422:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****         { return __p; }
 423:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 424:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       template<typename _Tp>
 425:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR pointer
 426:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	_S_to_pointer(_Tp __t)
 427:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****         { return __t.operator->(); }
 428:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     };
 429:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 430:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   ///@{
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 100


 431:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   /**
 432:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 433:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 434:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @return  A simple bool.
 435:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 436:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Reverse iterators forward comparisons to their underlying base()
 437:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  iterators.
 438:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 439:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   */
 440:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus <= 201703L || ! defined __cpp_lib_concepts
 441:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 442:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 443:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 444:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 445:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 446:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 447:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 448:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 449:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 450:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 451:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 452:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 453:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __y.base() < __x.base(); }
 454:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 455:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 456:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 457:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 458:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 459:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 460:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return !(__x == __y); }
 461:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 462:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 463:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 464:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 465:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 466:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 467:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __y < __x; }
 468:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 469:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 470:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 471:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 472:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 473:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 474:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return !(__y < __x); }
 475:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 476:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 477:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 478:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 479:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 480:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 481:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return !(__x < __y); }
 482:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 483:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 484:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 485:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 486:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 487:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 101


 488:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 489:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 490:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 491:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 492:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 493:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 494:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 495:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 496:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 497:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 498:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() > __y.base(); }
 499:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 500:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 501:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 502:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 503:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 504:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 505:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() != __y.base(); }
 506:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 507:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 508:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 509:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 510:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 511:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 512:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() < __y.base(); }
 513:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 514:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 515:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 516:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 517:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 518:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() >= __y.base(); }
 519:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 520:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 521:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 522:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 523:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 524:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 525:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() <= __y.base(); }
 526:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #else // C++20
 527:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 528:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
 529:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr bool
 530:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 531:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 532:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }
 533:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 534:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 535:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 536:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
 537:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr bool
 538:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 539:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 540:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() != __y.base() } -> convertible_to<bool>; }
 541:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() != __y.base(); }
 542:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 543:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 544:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 102


 545:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr bool
 546:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 547:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 548:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() > __y.base() } -> convertible_to<bool>; }
 549:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() > __y.base(); }
 550:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 551:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 552:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
 553:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr bool
 554:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 555:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 556:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() < __y.base() } -> convertible_to<bool>; }
 557:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() < __y.base(); }
 558:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 559:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 560:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
 561:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr bool
 562:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 563:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 564:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() >= __y.base() } -> convertible_to<bool>; }
 565:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() >= __y.base(); }
 566:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 567:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 568:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
 569:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr bool
 570:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 571:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 572:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() <= __y.base() } -> convertible_to<bool>; }
 573:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() <= __y.base(); }
 574:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 575:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL,
 576:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	   three_way_comparable_with<_IteratorL> _IteratorR>
 577:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
 578:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr compare_three_way_result_t<_IteratorL, _IteratorR>
 579:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<=>(const reverse_iterator<_IteratorL>& __x,
 580:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 		const reverse_iterator<_IteratorR>& __y)
 581:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __y.base() <=> __x.base(); }
 582:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 583:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // Additional, non-standard overloads to avoid ambiguities with greedy,
 584:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // unconstrained overloads in associated namespaces.
 585:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 586:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 587:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
 588:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr bool
 589:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 590:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 591:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }
 592:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 593:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 594:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<three_way_comparable _Iterator>
 595:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
 596:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr compare_three_way_result_t<_Iterator, _Iterator>
 597:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<=>(const reverse_iterator<_Iterator>& __x,
 598:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 		const reverse_iterator<_Iterator>& __y)
 599:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __y.base() <=> __x.base(); }
 600:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif // C++20
 601:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   ///@}
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 103


 602:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 603:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 604:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 605:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 606:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 607:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 608:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 609:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 610:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 611:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 612:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 613:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 614:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 615:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #else
 616:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 617:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 618:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 619:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[__nodiscard__]]
 620:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 621:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 622:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 623:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 624:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 625:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 626:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 627:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 628:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 629:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 630:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 631:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 632:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 633:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 634:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
 635:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++11 mode too.
 636:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 637:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 638:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 639:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 640:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 641:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** # if __cplusplus >= 201402L
 642:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402L
 643:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 644:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 645:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // DR 2285. make_reverse_iterator
 646:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   /// Generator function for reverse_iterator.
 647:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 648:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[__nodiscard__]]
 649:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 650:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 651:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 652:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 653:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #  if __cplusplus > 201703L && defined __cpp_lib_concepts
 654:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator1, typename _Iterator2>
 655:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     requires (!sized_sentinel_for<_Iterator1, _Iterator2>)
 656:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline constexpr bool
 657:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     disable_sized_sentinel_for<reverse_iterator<_Iterator1>,
 658:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 			       reverse_iterator<_Iterator2>> = true;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 104


 659:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #  endif // C++20
 660:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** # endif // C++14
 661:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 662:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 663:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 664:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     auto
 665:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 666:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 667:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 668:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 669:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 670:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 671:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : __is_move_iterator<_Iterator>
 672:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { };
 673:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 674:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 675:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 676:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     auto
 677:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 678:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 679:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 680:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif // C++11
 681:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 682:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 683:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   /**
 684:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 685:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 686:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 687:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 688:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  push_back.
 689:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 690:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 691:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  save typing.
 692:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   */
 693:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Container>
 694:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     class back_insert_iterator
 695:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 696:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     {
 697:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     protected:
 698:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _Container* container;
 699:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 700:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     public:
 701:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 702:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef _Container          container_type;
 703:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L
 704:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 705:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 706:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 707:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 708:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 709:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       back_insert_iterator(_Container& __x)
 710:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : container(std::__addressof(__x)) { }
 711:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 712:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 713:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 714:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 715:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 105


 716:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 717:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 718:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 719:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  container (you can think of the position as being permanently at
 720:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 721:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  always append the value to the end of the container.
 722:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 723:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 724:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 725:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 726:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 727:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	container->push_back(__value);
 728:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 729:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 730:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #else
 731:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 732:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 733:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 734:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 735:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	container->push_back(__value);
 736:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 737:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 738:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 739:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 740:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 741:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 742:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 743:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	container->push_back(std::move(__value));
 744:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 745:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 746:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 747:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 748:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// Simply returns *this.
 749:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 750:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 751:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator*()
 752:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return *this; }
 753:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 754:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 755:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 756:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 757:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator++()
 758:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return *this; }
 759:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 760:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 761:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 762:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       back_insert_iterator
 763:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator++(int)
 764:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return *this; }
 765:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     };
 766:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 767:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   /**
 768:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 769:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 770:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 771:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 772:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 106


 773:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 774:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 775:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 776:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  types for you.
 777:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   */
 778:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Container>
 779:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 780:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline back_insert_iterator<_Container>
 781:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     back_inserter(_Container& __x)
 782:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 783:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 784:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   /**
 785:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 786:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 787:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 788:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 789:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  push_front.
 790:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 791:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 792:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  save typing.
 793:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   */
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Container>
 795:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     class front_insert_iterator
 796:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 797:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     {
 798:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     protected:
 799:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _Container* container;
 800:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 801:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     public:
 802:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 803:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef _Container          container_type;
 804:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L
 805:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 806:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 807:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 808:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 809:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 810:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       front_insert_iterator(_Container& __x)
 811:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : container(std::__addressof(__x)) { }
 812:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 813:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 814:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 815:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 816:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 817:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 818:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 819:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 820:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  container (you can think of the position as being permanently at
 821:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 822:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  always prepend the value to the front of the container.
 823:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 824:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 825:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 826:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 827:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 828:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	container->push_front(__value);
 829:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 107


 830:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 831:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #else
 832:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 833:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 834:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 835:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 836:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	container->push_front(__value);
 837:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 838:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 839:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 840:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 841:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 842:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 843:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 844:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	container->push_front(std::move(__value));
 845:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 846:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 847:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 848:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 849:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// Simply returns *this.
 850:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 851:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 852:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator*()
 853:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return *this; }
 854:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 855:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 856:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 857:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 858:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator++()
 859:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return *this; }
 860:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 861:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 862:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 863:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       front_insert_iterator
 864:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator++(int)
 865:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return *this; }
 866:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     };
 867:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 868:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   /**
 869:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 870:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 871:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 872:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 873:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 874:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 875:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 876:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 877:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  types for you.
 878:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   */
 879:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Container>
 880:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 881:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline front_insert_iterator<_Container>
 882:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     front_inserter(_Container& __x)
 883:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 884:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 885:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   /**
 886:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 108


 887:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 888:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 889:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 890:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 891:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  position.
 892:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 893:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 894:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  %iterator's position.)
 895:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
 896:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 897:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  save typing.
 898:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   */
 899:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Container>
 900:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     class insert_iterator
 901:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 902:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     {
 903:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 904:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       using _Iter = std::__detail::__range_iter_t<_Container>;
 905:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #else
 906:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef typename _Container::iterator		_Iter;
 907:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 908:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     protected:
 909:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _Container* container;
 910:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _Iter iter;
 911:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 912:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     public:
 913:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 914:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef _Container          container_type;
 915:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 916:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 917:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 918:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 919:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 920:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 921:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 922:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 923:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 924:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 925:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       insert_iterator(_Container& __x, _Iter __i)
 926:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 927:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 928:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /**
 929:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 930:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 931:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 932:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 933:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 934:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 935:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 936:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  value into the container at the place before the %iterator.
 937:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 938:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 939:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  insert values immediately after one another.  For example,
 940:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @code
 941:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *     // vector v contains A and Z
 942:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 943:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 109


 944:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *     i = 1;
 945:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *     i = 2;
 946:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *     i = 3;
 947:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *
 948:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 949:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****        *  @endcode
 950:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       */
 951:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 952:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       insert_iterator&
 953:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 954:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 955:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	iter = container->insert(iter, __value);
 956:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	++iter;
 957:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 958:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 959:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #else
 960:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 961:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       insert_iterator&
 962:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 963:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 964:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	iter = container->insert(iter, __value);
 965:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	++iter;
 966:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 967:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 968:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 969:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 970:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       insert_iterator&
 971:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 972:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 973:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 974:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	++iter;
 975:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 976:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
 977:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
 978:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 979:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// Simply returns *this.
 980:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 981:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       insert_iterator&
 982:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator*()
 983:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return *this; }
 984:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 985:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 986:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 987:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       insert_iterator&
 988:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator++()
 989:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return *this; }
 990:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 991:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 992:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 993:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       insert_iterator&
 994:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator++(int)
 995:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return *this; }
 996:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     };
 997:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 998:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #pragma GCC diagnostic pop
 999:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1000:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   /**
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 110


1001:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @param __x  A container of arbitrary type.
1002:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @param __i  An iterator into the container.
1003:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
1004:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *
1005:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
1006:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
1007:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
1008:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
1009:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
1010:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    *  types for you.
1011:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   */
1012:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
1013:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Container>
1014:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
1015:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr insert_iterator<_Container>
1016:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)
1017:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
1018:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #else
1019:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Container>
1020:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
1021:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline insert_iterator<_Container>
1022:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inserter(_Container& __x, typename _Container::iterator __i)
1023:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
1024:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
1025:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1026:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   /// @} group iterators
1027:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1028:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
1029:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** } // namespace
1030:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1031:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
1032:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** {
1033:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
1034:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1035:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
1036:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // change the semantics of any of the operators of its iterator
1037:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
1038:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
1039:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // The _Container parameter exists solely so that different containers
1040:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // using this template can instantiate different types, even if the
1041:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // _Iterator parameter is the same.
1042:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1043:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     class __normal_iterator
1044:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     {
1045:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     protected:
1046:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _Iterator _M_current;
1047:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1048:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef std::iterator_traits<_Iterator>		__traits_type;
1049:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1050:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
1051:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       template<typename _Iter>
1052:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	using __convertible_from
1053:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	  = std::__enable_if_t<std::is_convertible<_Iter, _Iterator>::value>;
1054:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
1055:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1056:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     public:
1057:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef _Iterator					iterator_type;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 111


1058:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
1059:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
1060:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
1061:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
1062:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
1063:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1064:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
1065:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       using iterator_concept = std::__detail::__iter_concept<_Iterator>;
1066:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
1067:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1068:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
1069:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : _M_current(_Iterator()) { }
1070:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1071:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 656              		.loc 12 1072 7 view .LVU147
 657              	.LBB697:
 658              	.LBB698:
1073:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 659              		.loc 12 1073 9 is_stmt 0 view .LVU148
 660 0000 4068     		ldr	r0, [r0, #4]
 661              	.LVL46:
 662              		.loc 12 1073 9 view .LVU149
 663              	.LBE698:
 664              	.LBE697:
 665              	.LBE696:
 666              	.LBE695:
 667              	.LBE694:
 668              	.LBB699:
 669              	.LBI699:
1074:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1075:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       // Allow iterator to const_iterator conversion
1076:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
1077:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       template<typename _Iter, typename = __convertible_from<_Iter>>
1078:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	_GLIBCXX20_CONSTEXPR
1079:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
1080:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	noexcept
1081:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #else
1082:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       // N.B. _Container::pointer is not actually in container requirements,
1083:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       // but is present in std::vector and std::basic_string.
1084:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       template<typename _Iter>
1085:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
1086:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 			  typename __enable_if<
1087:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
1088:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 		      _Container>::__type>& __i)
1089:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
1090:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****         : _M_current(__i.base()) { }
1091:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1092:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       // Forward iterator requirements
1093:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1094:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       reference
1095:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
1096:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return *_M_current; }
1097:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1098:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1099:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       pointer
1100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 112


1101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return _M_current; }
1102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       __normal_iterator&
1105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
1106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
1107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	++_M_current;
1108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
1109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
1110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       __normal_iterator
1113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
1114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current++); }
1115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       // Bidirectional iterator requirements
1117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       __normal_iterator&
1119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
1120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
1121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	--_M_current;
1122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
1123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       }
1124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       __normal_iterator
1127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
1128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current--); }
1129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       // Random access iterator requirements
1131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       reference
1133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
1134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return _M_current[__n]; }
1135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       __normal_iterator&
1138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
1139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { _M_current += __n; return *this; }
1140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       __normal_iterator
1143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
1144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
1145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       __normal_iterator&
1148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
1149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { _M_current -= __n; return *this; }
1150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       __normal_iterator
1153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 670              		.loc 12 1153 7 is_stmt 1 view .LVU150
 671              	.LBB700:
 672              	.LBB701:
 673              	.LBI701:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 113


1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 674              		.loc 12 1072 7 view .LVU151
1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 675              		.loc 12 1072 7 is_stmt 0 view .LVU152
 676              	.LBE701:
 677              	.LBE700:
 678              	.LBE699:
1229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1230:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1231:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return *(end() - 1);
1232:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 679              		.loc 3 1232 7 view .LVU153
 680 0002 1838     		subs	r0, r0, #24
 681 0004 7047     		bx	lr
 682              		.cfi_endproc
 683              	.LFE2056:
 685              		.section	.text._ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_chec
 686              		.align	1
 687              		.weak	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPK
 688              		.syntax unified
 689              		.thumb
 690              		.thumb_func
 692              	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc:
 693              	.LVL47:
 694              	.LFB2108:
1233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1235:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1236:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  last element of the %vector.
1237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1239:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const_reference
1240:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1242:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1243:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return *(end() - 1);
1244:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1245:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1246:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1247:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1248:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // data access
1249:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1250:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
1251:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1252:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1253:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1254:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _Tp*
1255:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1256:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1257:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1258:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1259:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       const _Tp*
1260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1262:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1263:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // [23.2.4.3] modifiers
1264:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 114


1265:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1266:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be added.
1267:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1268:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1269:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1270:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1271:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1272:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  available.
1273:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1274:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1275:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1276:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       push_back(const value_type& __x)
1277:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1278:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
1279:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  {
1280:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1281:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
1282:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 				     __x);
1283:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    ++this->_M_impl._M_finish;
1284:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
1285:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  }
1286:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	else
1287:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_realloc_insert(end(), __x);
1288:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1289:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1290:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1291:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1292:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       push_back(value_type&& __x)
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { emplace_back(std::move(__x)); }
1295:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1296:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename... _Args>
1297:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus > 201402L
1298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1299:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	reference
1300:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
1301:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1302:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1303:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	emplace_back(_Args&&... __args);
1304:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1305:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1306:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1307:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Removes last element.
1308:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1309:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1310:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1311:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that no data is returned, and if the last element's
1312:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
1313:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  called.
1314:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1315:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1316:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1317:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1318:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1319:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1320:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	--this->_M_impl._M_finish;
1321:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 115


1322:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1323:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1324:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1325:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1326:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1327:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1328:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1329:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __args  Arguments.
1330:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1331:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1332:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will insert an object of type T constructed
1333:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1334:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1335:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  and if it is frequently used the user should consider using
1336:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  std::list.
1337:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1338:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename... _Args>
1339:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1340:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	iterator
1341:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
1342:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1343:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1344:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1345:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1346:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1347:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1348:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1349:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1350:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will insert a copy of the given value before
1351:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1352:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1353:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  used the user should consider using std::list.
1354:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1355:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1356:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       iterator
1357:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1358:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
1359:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1360:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1361:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1362:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1363:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1364:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1365:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will insert a copy of the given value before
1366:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1367:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1368:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  used the user should consider using std::list.
1369:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1370:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       iterator
1371:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       insert(iterator __position, const value_type& __x);
1372:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1373:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1374:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1375:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1376:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1377:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1378:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 116


1379:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1380:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1381:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1382:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1383:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1384:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  used the user should consider using std::list.
1385:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1386:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1387:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       iterator
1388:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1389:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1390:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1391:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1392:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1393:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1394:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
1395:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1396:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will insert copies of the data in the
1397:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1398:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  specified by @a position.
1399:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1400:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1401:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1402:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  consider using std::list.
1403:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1404:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1405:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       iterator
1406:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1407:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1408:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	auto __offset = __position - cbegin();
1409:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1410:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			std::random_access_iterator_tag());
1411:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return begin() + __offset;
1412:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1413:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1414:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1415:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1416:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1417:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1418:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1419:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1420:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1421:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1422:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1423:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will insert a specified number of copies of
1424:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the given data before the location specified by @a position.
1425:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1426:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1427:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1428:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  consider using std::list.
1429:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1430:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1431:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       iterator
1432:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1433:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1434:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	difference_type __offset = __position - cbegin();
1435:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 117


1436:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return begin() + __offset;
1437:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1438:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
1439:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1440:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1441:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1442:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1443:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1444:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1445:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will insert a specified number of copies of
1446:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the given data before the location specified by @a position.
1447:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1448:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1449:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1450:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  consider using std::list.
1451:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1452:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1453:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1454:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1455:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1456:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1457:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1458:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1459:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1460:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1461:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
1462:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __last   An input iterator.
1463:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1464:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1465:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will insert copies of the data in the range
1466:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1467:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  by @a pos.
1468:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1469:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1470:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1471:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  consider using std::list.
1472:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1473:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator,
1474:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1475:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1476:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	iterator
1477:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1478:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	       _InputIterator __last)
1479:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
1480:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1481:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1482:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			     __first, __last, __false_type());
1483:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  return begin() + __offset;
1484:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
1485:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
1486:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1487:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1488:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1489:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
1490:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __last   An input iterator.
1491:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1492:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will insert copies of the data in the range
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 118


1493:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1494:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  by @a pos.
1495:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1496:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1497:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1498:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  consider using std::list.
1499:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1500:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1501:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1502:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1503:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	       _InputIterator __last)
1504:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
1505:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1506:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1507:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1508:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
1509:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1510:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1511:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1512:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Remove element at given position.
1513:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1514:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1515:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1516:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will erase the element at the given position and thus
1517:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  shorten the %vector by one.
1518:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1519:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note This operation could be expensive and if it is
1520:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  frequently used the user should consider using std::list.
1521:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  The user is also cautioned that this function only erases
1522:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1523:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1524:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the pointer is the user's responsibility.
1525:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1526:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1527:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       iterator
1528:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1529:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       erase(const_iterator __position)
1530:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1531:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
1532:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       erase(iterator __position)
1533:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return _M_erase(__position); }
1534:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1535:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1536:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1537:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Remove a range of elements.
1538:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1539:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1540:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *                  erased.
1541:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1542:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *           prior to erasing (or end()).
1543:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1544:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This function will erase the elements in the range
1545:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1546:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1547:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note This operation could be expensive and if it is
1548:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  frequently used the user should consider using std::list.
1549:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  The user is also cautioned that this function only erases
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 119


1550:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the elements, and that if the elements themselves are
1551:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1552:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1553:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1554:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1555:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       iterator
1556:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1557:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1558:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1559:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	const auto __beg = begin();
1560:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	const auto __cbeg = cbegin();
1561:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1562:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1563:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
1564:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       erase(iterator __first, iterator __last)
1565:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return _M_erase(__first, __last); }
1566:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1567:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1568:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1569:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @brief  Swaps data with another %vector.
1570:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1571:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1572:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1573:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1574:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1575:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1576:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *
1577:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1578:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1579:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1580:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1581:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1582:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1583:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1584:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1585:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1586:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1587:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1588:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1589:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 				  __x._M_get_Tp_allocator());
1590:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1591:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1592:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1593:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1594:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1595:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1596:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  the user's responsibility.
1597:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1598:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1599:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1600:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1601:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1602:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1603:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****     protected:
1604:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       /**
1605:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1606:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 120


1607:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****        */
1608:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1609:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1610:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	pointer
1611:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1612:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1613:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
1614:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1615:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  __try
1616:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    {
1617:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1618:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 					  _M_get_Tp_allocator());
1619:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      return __result;
1620:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    }
1621:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  __catch(...)
1622:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    {
1623:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      _M_deallocate(__result, __n);
1624:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      __throw_exception_again;
1625:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    }
1626:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
1627:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1628:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1629:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Internal constructor functions follow.
1630:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1631:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1632:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1633:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus < 201103L
1634:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1635:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1636:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _Integer>
1637:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1638:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1639:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
1640:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(_S_check_init_len(
1641:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		static_cast<size_type>(__n), _M_get_Tp_allocator()));
1642:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1643:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1644:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1645:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
1646:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1647:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1648:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1649:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1650:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1651:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			       __false_type)
1652:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
1653:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_range_initialize(__first, __last,
1654:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			      std::__iterator_category(__first));
1655:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
1656:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1657:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1658:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the second initialize_dispatch above
1659:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1660:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1661:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1662:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1663:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			    std::input_iterator_tag)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 121


1664:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
1665:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  __try {
1666:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    for (; __first != __last; ++__first)
1667:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1668:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      emplace_back(*__first);
1669:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
1670:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	      push_back(*__first);
1671:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1672:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  } __catch(...) {
1673:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    clear();
1674:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    __throw_exception_again;
1675:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  }
1676:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
1677:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1678:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the second initialize_dispatch above
1679:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1680:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1681:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1682:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1683:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			    std::forward_iterator_tag)
1684:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
1685:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1686:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_start
1687:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
1688:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1689:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_finish =
1690:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1691:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 					this->_M_impl._M_start,
1692:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 					_M_get_Tp_allocator());
1693:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
1694:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1695:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1696:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // vector(n,value,a) constructor.
1697:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1698:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1699:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1700:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1701:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
1702:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1703:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 					_M_get_Tp_allocator());
1704:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1705:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1706:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1707:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the vector(n) constructor.
1708:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1709:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1710:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_default_initialize(size_type __n)
1711:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1712:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
1713:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1714:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 					   _M_get_Tp_allocator());
1715:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
1716:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1717:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1718:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1719:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // assignment work for the range versions.
1720:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 122


1721:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1722:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1723:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1724:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1725:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _Integer>
1726:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1727:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1728:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1729:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1730:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1731:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1732:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1733:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1734:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1735:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1736:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			   __false_type)
1737:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1738:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1739:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the second assign_dispatch above
1740:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1741:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1742:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1743:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1744:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		      std::input_iterator_tag);
1745:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1746:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the second assign_dispatch above
1747:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1748:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1749:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1750:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1751:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		      std::forward_iterator_tag);
1752:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1753:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1754:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // to be the same thing.
1755:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1756:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1757:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1758:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1759:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Internal insert functions follow.
1760:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1761:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1762:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1763:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1764:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1765:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _Integer>
1766:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1767:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1768:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1769:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			   __true_type)
1770:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1771:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1772:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1773:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1774:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1775:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1776:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
1777:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			   _InputIterator __last, __false_type)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 123


1778:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
1779:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1780:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			  std::__iterator_category(__first));
1781:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	}
1782:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1783:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the second insert_dispatch above
1784:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1785:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1786:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1787:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1788:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1789:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1790:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by the second insert_dispatch above
1791:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1792:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1793:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1795:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1796:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1797:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1798:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // the same thing.
1799:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1800:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1801:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1802:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1803:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1804:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by resize(n).
1805:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1806:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1807:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_default_append(size_type __n);
1808:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1809:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1810:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       bool
1811:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_shrink_to_fit();
1812:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1813:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1814:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #if __cplusplus < 201103L
1815:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by insert(p,x)
1816:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1817:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1818:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1819:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       void
1820:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1821:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
1822:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1823:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1824:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       struct _Temporary_value
1825:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1826:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	template<typename... _Args>
1827:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _GLIBCXX20_CONSTEXPR explicit
1828:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
1829:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  {
1830:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
1831:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 				     std::forward<_Args>(__args)...);
1832:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  }
1833:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1834:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 124


1835:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	~_Temporary_value()
1836:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1837:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1838:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR value_type&
1839:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_val() noexcept { return _M_storage._M_val; }
1840:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1841:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       private:
1842:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR _Tp*
1843:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_ptr() noexcept { return std::__addressof(_M_storage._M_val); }
1844:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1845:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	union _Storage
1846:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{
1847:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  constexpr _Storage() : _M_byte() { }
1848:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _GLIBCXX20_CONSTEXPR ~_Storage() { }
1849:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _Storage& operator=(const _Storage&) = delete;
1850:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  unsigned char _M_byte;
1851:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _Tp _M_val;
1852:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	};
1853:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1854:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	vector*  _M_this;
1855:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_Storage _M_storage;
1856:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       };
1857:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1858:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1859:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
1860:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename _Arg>
1861:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1862:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1863:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1864:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1865:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename... _Args>
1866:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1867:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	void
1868:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
1869:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1870:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1871:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1872:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       iterator
1873:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1874:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1875:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1876:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       template<typename... _Args>
1877:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1878:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	iterator
1879:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
1880:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1881:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1882:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1883:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       iterator
1884:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1885:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1886:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #endif
1887:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1888:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1889:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1890:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       size_type
1891:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 125


 695              		.loc 3 1891 7 is_stmt 1 view -0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 16
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              		.loc 3 1891 7 is_stmt 0 view .LVU155
 700 0000 30B5     		push	{r4, r5, lr}
 701              	.LCFI11:
 702              		.cfi_def_cfa_offset 12
 703              		.cfi_offset 4, -12
 704              		.cfi_offset 5, -8
 705              		.cfi_offset 14, -4
 706 0002 85B0     		sub	sp, sp, #20
 707              	.LCFI12:
 708              		.cfi_def_cfa_offset 32
 709 0004 8446     		mov	ip, r0
 710 0006 0191     		str	r1, [sp, #4]
 711              	.LVL48:
 712              	.LBB702:
 713              	.LBI702:
 987:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 714              		.loc 3 987 7 is_stmt 1 view .LVU156
 715              	.LBB703:
 988:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 716              		.loc 3 988 40 is_stmt 0 view .LVU157
 717 0008 4468     		ldr	r4, [r0, #4]
 988:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 718              		.loc 3 988 66 view .LVU158
 719 000a 0368     		ldr	r3, [r0]
 988:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 720              		.loc 3 988 50 view .LVU159
 721 000c E31A     		subs	r3, r4, r3
 722 000e DB10     		asrs	r3, r3, #3
 723 0010 1148     		ldr	r0, .L37
 724              	.LVL49:
 988:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 725              		.loc 3 988 50 view .LVU160
 726 0012 03FB00F0 		mul	r0, r3, r0
 727              	.LVL50:
 988:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 728              		.loc 3 988 50 view .LVU161
 729              	.LBE703:
 730              	.LBE702:
1892:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
1893:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	if (max_size() - size() < __n)
 731              		.loc 3 1893 17 view .LVU162
 732 0016 114D     		ldr	r5, .L37+4
 733 0018 2D1A     		subs	r5, r5, r0
 734              		.loc 3 1893 2 view .LVU163
 735 001a 8D42     		cmp	r5, r1
 736 001c 13D3     		bcc	.L35
1894:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  __throw_length_error(__N(__s));
1895:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
1896:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	const size_type __len = size() + (std::max)(size(), __n);
 737              		.loc 3 1896 50 view .LVU164
 738 001e 0390     		str	r0, [sp, #12]
 739              	.LVL51:
 740              	.LBB704:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 126


 741              	.LBI704:
 742              		.file 13 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // Copyright (C) 2001-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** /*
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  *
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * Copyright (c) 1994
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * Hewlett-Packard Company
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  *
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  *
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  *
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * Copyright (c) 1996-1998
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  *
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  */
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** /** @file bits/stl_algobase.h
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****  */
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 127


  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <bits/c++config.h>
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <bits/functexcept.h>
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <ext/type_traits.h>
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <ext/numeric_traits.h>
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <bits/stl_pair.h>
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator.h>
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <bits/concept_check.h>
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <debug/debug.h>
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #include <bits/predefined_ops.h>
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** # include <type_traits>
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #endif
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #if __cplusplus > 201703L
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** # include <compare>
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #endif
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** {
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   /*
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    */
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     inline int
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     {
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #endif
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	{
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	  return 0;
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	}
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       else
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #endif
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     }
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #if __cplusplus < 201103L
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   template<bool _BoolType>
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 128


 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     struct __iter_swap
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     {
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	static void
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	{
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	    _ValueType1;
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	  *__a = *__b;
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	  *__b = __tmp;
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	}
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     };
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   template<>
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     struct __iter_swap<true>
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     {
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	static void
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	{
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	  swap(*__a, *__b);
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	}
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     };
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #endif // C++03
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   /**
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @param  __a  An iterator.
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @param  __b  Another iterator.
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @return   Nothing.
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  iterators themselves.
 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   */
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     inline void
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     {
 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       // concept requirements
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #if __cplusplus < 201103L
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	_ValueType1;
 163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	_ValueType2;
 165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
 166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 				  _ValueType2>)
 168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 				  _ValueType1>)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 129


 170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
 171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	_ReferenceType1;
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	_ReferenceType2;
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	iter_swap(__a, __b);
 179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #else
 180:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       // 187. iter_swap underspecified
 182:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       swap(*__a, *__b);
 183:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** #endif
 184:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     }
 185:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
 186:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   /**
 187:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *
 194:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  The ranges must not overlap.
 197:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   */
 198:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     _ForwardIterator2
 201:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     {
 204:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       // concept requirements
 205:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 207:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 209:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
 211:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       return __first2;
 214:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     }
 215:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
 216:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   /**
 217:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 218:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *
 223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  preprocessor macro.
 226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   */
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 130


 227:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   template<typename _Tp>
 228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     inline const _Tp&
 230:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     {
 232:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       // concept requirements
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       if (__b < __a)
 236:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	return __b;
 237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       return __a;
 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     }
 239:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 
 240:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   /**
 241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 242:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 246:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *
 247:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****    *  preprocessor macro.
 250:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   */
 251:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****   template<typename _Tp>
 252:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     inline const _Tp&
 254:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 743              		.loc 13 254 5 is_stmt 1 view .LVU165
 744              	.LBB705:
 255:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****     {
 256:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       // concept requirements
 257:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       if (__a < __b)
 745              		.loc 13 259 7 is_stmt 0 view .LVU166
 746 0020 8142     		cmp	r1, r0
 747 0022 13D8     		bhi	.L31
 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h **** 	return __b;
 261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       return __a;
 748              		.loc 13 261 14 view .LVU167
 749 0024 03AA     		add	r2, sp, #12
 750              	.LVL52:
 751              	.L29:
 752              		.loc 13 261 14 view .LVU168
 753              	.LBE705:
 754              	.LBE704:
 755              		.loc 3 1896 33 view .LVU169
 756 0026 1268     		ldr	r2, [r2]
 757              		.loc 3 1896 18 view .LVU170
 758 0028 1044     		add	r0, r0, r2
 759              	.LVL53:
 760              	.LBB707:
 761              	.LBI707:
 987:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 762              		.loc 3 987 7 is_stmt 1 view .LVU171
 763              	.LBB708:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 131


 988:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 764              		.loc 3 988 66 is_stmt 0 view .LVU172
 765 002a DCF80030 		ldr	r3, [ip]
 988:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 766              		.loc 3 988 50 view .LVU173
 767 002e E41A     		subs	r4, r4, r3
 768 0030 E410     		asrs	r4, r4, #3
 769 0032 094B     		ldr	r3, .L37
 770 0034 03FB04F4 		mul	r4, r3, r4
 771              	.LVL54:
 988:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 772              		.loc 3 988 50 view .LVU174
 773              	.LBE708:
 774              	.LBE707:
1897:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 775              		.loc 3 1897 48 view .LVU175
 776 0038 A042     		cmp	r0, r4
 777 003a 09D3     		bcc	.L32
 778              		.loc 3 1897 25 view .LVU176
 779 003c 074B     		ldr	r3, .L37+4
 780 003e 9842     		cmp	r0, r3
 781 0040 08D8     		bhi	.L36
 782              	.LVL55:
 783              	.L27:
1898:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 784              		.loc 3 1898 7 view .LVU177
 785 0042 05B0     		add	sp, sp, #20
 786              	.LCFI13:
 787              		.cfi_remember_state
 788              		.cfi_def_cfa_offset 12
 789              		@ sp needed
 790 0044 30BD     		pop	{r4, r5, pc}
 791              	.LVL56:
 792              	.L35:
 793              	.LCFI14:
 794              		.cfi_restore_state
1894:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 795              		.loc 3 1894 24 view .LVU178
 796 0046 1046     		mov	r0, r2
 797 0048 FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 798              	.LVL57:
 799              	.L31:
 800              	.LBB709:
 801              	.LBB706:
 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       return __a;
 802              		.loc 13 260 9 view .LVU179
 803 004c 01AA     		add	r2, sp, #4
 804              	.LVL58:
 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       return __a;
 805              		.loc 13 260 9 view .LVU180
 806 004e EAE7     		b	.L29
 807              	.LVL59:
 808              	.L32:
 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_algobase.h ****       return __a;
 809              		.loc 13 260 9 view .LVU181
 810              	.LBE706:
 811              	.LBE709:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 132


1897:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 812              		.loc 3 1897 58 view .LVU182
 813 0050 0248     		ldr	r0, .L37+4
 814              	.LVL60:
1897:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 815              		.loc 3 1897 58 view .LVU183
 816 0052 F6E7     		b	.L27
 817              	.LVL61:
 818              	.L36:
1897:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 819              		.loc 3 1897 58 view .LVU184
 820 0054 0148     		ldr	r0, .L37+4
 821              	.LVL62:
1897:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 822              		.loc 3 1897 63 view .LVU185
 823 0056 F4E7     		b	.L27
 824              	.L38:
 825              		.align	2
 826              	.L37:
 827 0058 ABAAAAAA 		.word	-1431655765
 828 005c 55555505 		.word	89478485
 829              		.cfi_endproc
 830              	.LFE2108:
 832              		.section	.text._ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8alloca
 833              		.align	1
 834              		.weak	_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv
 835              		.syntax unified
 836              		.thumb
 837              		.thumb_func
 839              	_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv:
 840              	.LVL63:
 841              	.LFB2155:
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       {
 842              		.loc 5 112 7 is_stmt 1 view -0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 0
 845              		@ frame_needed = 0, uses_anonymous_args = 0
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       {
 846              		.loc 5 112 7 is_stmt 0 view .LVU187
 847 0000 08B5     		push	{r3, lr}
 848              	.LCFI15:
 849              		.cfi_def_cfa_offset 8
 850              		.cfi_offset 3, -8
 851              		.cfi_offset 14, -4
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	  {
 852              		.loc 5 120 2 view .LVU188
 853 0002 084B     		ldr	r3, .L44
 854 0004 9942     		cmp	r1, r3
 855 0006 05D8     		bhi	.L43
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       }
 856              		.loc 5 137 48 view .LVU189
 857 0008 01EB4101 		add	r1, r1, r1, lsl #1
 858              	.LVL64:
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       }
 859              		.loc 5 137 48 view .LVU190
 860 000c C800     		lsls	r0, r1, #3
 861              	.LVL65:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 133


 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       }
 862              		.loc 5 137 48 view .LVU191
 863 000e FFF7FEFF 		bl	_Znwj
 864              	.LVL66:
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 865              		.loc 5 138 7 view .LVU192
 866 0012 08BD     		pop	{r3, pc}
 867              	.LVL67:
 868              	.L43:
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	      std::__throw_bad_array_new_length();
 869              		.loc 5 124 6 view .LVU193
 870 0014 044B     		ldr	r3, .L44+4
 871 0016 9942     		cmp	r1, r3
 872 0018 01D9     		bls	.L41
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	    std::__throw_bad_alloc();
 873              		.loc 5 125 41 view .LVU194
 874 001a FFF7FEFF 		bl	_ZSt28__throw_bad_array_new_lengthv
 875              	.LVL68:
 876              	.L41:
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	  }
 877              		.loc 5 126 28 view .LVU195
 878 001e FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 879              	.LVL69:
 880              	.L45:
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	  }
 881              		.loc 5 126 28 view .LVU196
 882 0022 00BF     		.align	2
 883              	.L44:
 884 0024 55555505 		.word	89478485
 885 0028 AAAAAA0A 		.word	178956970
 886              		.cfi_endproc
 887              	.LFE2155:
 889              		.section	.text._ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_
 890              		.align	1
 891              		.weak	_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9
 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 896              	_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1
 897              	.LVL70:
 898              	.LFB2157:
 899              		.file 14 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // Copyright (C) 2001-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 134


  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** /*
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  *
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * Copyright (c) 1994
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * Hewlett-Packard Company
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  *
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  *
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  *
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  *
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  */
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****  */
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #include <type_traits>
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #endif
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #include <bits/stl_algobase.h>    // copy
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #include <ext/alloc_traits.h>     // __alloc_traits
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201703L
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #include <bits/stl_pair.h>
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #endif
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** {
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 135


  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /** @addtogroup memory
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @{
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    */
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ValueType, typename _Tp>
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     constexpr bool
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __check_constructible()
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted constructors, but std::copy etc.
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // only use assignment (or memmove) not construction, so we need an
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // explicit check that construction from _Tp is actually valid,
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // otherwise some ill-formed uses of std::uninitialized_xxx would
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // compile without errors. This gives a nice clear error message.
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, _Tp>::value,
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  "result type must be constructible from input type");
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return true;
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // If the type is trivial we don't need to construct it, just assign to it.
  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // But trivial types can still have deleted or inaccessible assignment,
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // so don't try to use std::copy or std::fill etc. if we can't assign.
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** # define _GLIBCXX_USE_ASSIGN_FOR_INIT(T, U) \
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __is_trivial(T) && __is_assignable(T&, U) \
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     && std::__check_constructible<T, U>()
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #else
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // No need to check if is_constructible<T, U> for C++98. Trivial types have
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // no user-declared constructors, so if the assignment is valid, construction
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** // should be too.
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** # define _GLIBCXX_USE_ASSIGN_FOR_INIT(T, U) \
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __is_trivial(T) && __is_assignable(T&, U)
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #endif
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		     _ForwardIterator __result)
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 136


 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueTypes>
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_copy
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{ return std::__do_uninit_copy(__first, __last, __result); }
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<>
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_copy<true>
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @endcond
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /**
 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   */
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
 165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_ValueType1;
 168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_ValueType2;
 170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // _ValueType1 must be trivially-copyable to use memmove, so don't
 172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // bother optimizing to std::copy if it isn't.
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // XXX Unnecessary because std::copy would check it anyway?
 174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       const bool __can_memmove = __is_trivial(_ValueType1);
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #if __cplusplus < 201103L
 177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _From;
 178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #else
 179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       using _From = decltype(*__first);
 180:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #endif
 181:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       const bool __assignable
 182:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
 183:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 184:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return std::__uninitialized_copy<__can_memmove && __assignable>::
 185:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 186:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 137


 187:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 188:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 189:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 190:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 191:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR void
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __do_uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 193:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		     const _Tp& __x)
 194:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 195:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 196:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 197:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 198:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), __x);
 200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 201:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 202:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 203:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur);
 204:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 205:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 206:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 207:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 208:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 209:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill
 210:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 211:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 212:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         static void
 213:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 214:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		      const _Tp& __x)
 215:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{ std::__do_uninit_fill(__first, __last, __x); }
 216:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 217:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 218:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<>
 219:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill<true>
 220:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 221:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 222:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         static void
 223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		      const _Tp& __x)
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 227:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @endcond
 229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 230:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /**
 231:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 232:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __x      The source value.
 235:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @return   Nothing.
 236:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *
 237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   */
 239:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 240:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline void
 241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 242:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		       const _Tp& __x)
 243:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 138


 244:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 245:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 246:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 247:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // Trivial types do not need a constructor to begin their lifetime,
 248:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // so try to use std::fill to benefit from its memset optimization.
 249:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       const bool __can_fill
 250:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType, const _Tp&);
 251:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 252:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_fill<__can_fill>::
 253:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 254:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 255:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 256:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 257:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 258:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 259:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __do_uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 262:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 263:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 264:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 265:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 266:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 267:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), __x);
 268:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 269:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 270:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 271:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 272:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur);
 273:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 274:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 275:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 276:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 277:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 278:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill_n
 279:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 280:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 281:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	static _ForwardIterator
 282:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 283:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			const _Tp& __x)
 284:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{ return std::__do_uninit_fill_n(__first, __n, __x); }
 285:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 286:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 287:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<>
 288:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 289:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 290:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 291:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	static _ForwardIterator
 292:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			const _Tp& __x)
 294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 295:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 296:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 297:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @endcond
 298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 299:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 300:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 139


 301:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /**
 302:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 303:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 304:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 305:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __x      The source value.
 306:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @return   Nothing.
 307:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *
 308:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 309:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   */
 310:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 311:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 312:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 313:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 314:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 315:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 316:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 317:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // Trivial types do not need a constructor to begin their lifetime,
 318:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // so try to use std::fill_n to benefit from its optimizations.
 319:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       const bool __can_fill
 320:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType, const _Tp&)
 321:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // For arbitrary class types and floating point types we can't assume
 322:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // that __n > 0 and std::__size_to_integer(__n) > 0 are equivalent,
 323:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // so only use std::fill_n when _Size is already an integral type.
 324:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	&& __is_integer<_Size>::__value;
 325:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 326:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return __uninitialized_fill_n<__can_fill>::
 327:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 328:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 329:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 330:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #undef _GLIBCXX_USE_ASSIGN_FOR_INIT
 331:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 332:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 333:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 334:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 335:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 336:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 337:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use
 338:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   //  any of the POD optimizations.
 339:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 340:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 341:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 342:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 343:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 344:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 345:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 346:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 347:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 348:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 349:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 350:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 351:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 352:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 353:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 354:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 355:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 356:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 357:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 140


 358:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 359:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 360:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 361:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 362:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 363:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 364:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 365:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 366:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 367:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 368:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #ifdef __cpp_lib_is_constant_evaluated
 369:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       if (std::is_constant_evaluated())
 370:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	return std::__do_uninit_copy(__first, __last, __result);
 371:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #endif
 372:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return std::uninitialized_copy(__first, __last, __result);
 373:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 374:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 375:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 376:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 377:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 378:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 379:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 380:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 381:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 382:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 383:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 384:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 					 __result, __alloc);
 385:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 386:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 387:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 388:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 389:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 390:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 391:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 392:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				       _InputIterator __last,
 393:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				       _ForwardIterator __result,
 394:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				       _Allocator& __alloc)
 395:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 396:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return std::__uninitialized_copy_a
 397:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 398:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 399:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 400:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 401:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 402:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 403:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     void
 404:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 405:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 406:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 407:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 408:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 409:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 410:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 411:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 412:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 413:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 414:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 141


 415:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 416:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 417:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 418:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 419:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 420:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 421:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 422:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 423:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline void
 424:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 425:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 426:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 427:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #ifdef __cpp_lib_is_constant_evaluated
 428:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       if (std::is_constant_evaluated())
 429:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	return std::__do_uninit_fill(__first, __last, __x);
 430:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #endif
 431:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       std::uninitialized_fill(__first, __last, __x);
 432:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 433:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 434:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 435:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 436:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****      _GLIBCXX20_CONSTEXPR
 437:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 438:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
 439:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 440:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 441:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 442:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 443:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 444:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 445:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 446:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 447:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 448:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 449:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 450:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 451:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 452:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 453:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 454:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 455:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 456:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 457:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _Tp2>
 458:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 459:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 460:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
 461:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			     const _Tp& __x, allocator<_Tp2>&)
 462:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 463:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #ifdef __cpp_lib_is_constant_evaluated
 464:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       if (std::is_constant_evaluated())
 465:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	return std::__do_uninit_fill_n(__first, __n, __x);
 466:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #endif
 467:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return std::uninitialized_fill_n(__first, __n, __x);
 468:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 469:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 470:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 471:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 142


 472:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_fill_move, __uninitialized_move_fill.
 473:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // All of these algorithms take a user-supplied allocator, which is used
 474:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // for construction and destruction.
 475:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 476:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_copy_move
 477:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Copies [first1, last1) into [result, result + (last1 - first1)), and
 478:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   //  move [first2, last2) into
 479:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 480:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 481:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 482:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 483:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_move(_InputIterator1 __first1,
 484:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _InputIterator1 __last1,
 485:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __first2,
 486:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __last2,
 487:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __result,
 488:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 489:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 490:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 491:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 							   __result,
 492:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 							   __alloc);
 493:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 494:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 495:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 496:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 497:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 498:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 499:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 500:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 501:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 502:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 503:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 504:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_move_copy
 505:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Moves [first1, last1) into [result, result + (last1 - first1)), and
 506:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   //  copies [first2, last2) into
 507:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 508:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 509:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 510:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 511:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_copy(_InputIterator1 __first1,
 512:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _InputIterator1 __last1,
 513:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __first2,
 514:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __last2,
 515:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __result,
 516:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 517:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 518:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 519:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 							   __result,
 520:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 							   __alloc);
 521:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 522:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 523:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 524:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 525:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 526:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 527:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 528:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 143


 529:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 530:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 531:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 532:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_fill_move
 533:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Fills [result, mid) with x, and moves [first, last) into
 534:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   //  [mid, mid + (last - first)).
 535:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
 536:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 537:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 538:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
 539:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      const _Tp& __x, _InputIterator __first,
 540:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _InputIterator __last, _Allocator& __alloc)
 541:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 542:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
 543:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 544:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 545:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 546:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 547:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 548:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 549:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 550:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 551:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 552:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 553:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 554:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_move_fill
 555:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and
 556:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   //  fills [first2 + (last1 - first1), last2) with x.
 557:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
 558:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 559:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline void
 560:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
 561:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __first2,
 562:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __last2, const _Tp& __x,
 563:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 564:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 565:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
 566:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 							    __first2,
 567:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 							    __alloc);
 568:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 569:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 570:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 571:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 572:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 573:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 574:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first2, __mid2, __alloc);
 575:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 576:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 577:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 578:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 579:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @endcond
 580:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 581:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
 582:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 583:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 584:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Extensions: __uninitialized_default, __uninitialized_default_n,
 585:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_a, __uninitialized_default_n_a.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 144


 586:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 587:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 588:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_1
 589:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 590:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 591:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         static void
 592:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 593:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         {
 594:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 595:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __try
 596:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    {
 597:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 598:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 599:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    }
 600:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 601:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    {
 602:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 603:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 604:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    }
 605:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 606:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 607:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 608:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<>
 609:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_1<true>
 610:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 611:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 612:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         static void
 613:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 614:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         {
 615:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  if (__first == __last)
 616:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    return;
 617:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 618:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  typename iterator_traits<_ForwardIterator>::value_type* __val
 619:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    = std::__addressof(*__first);
 620:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Construct(__val);
 621:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  if (++__first != __last)
 622:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    std::fill(__first, __last, *__val);
 623:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 624:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 625:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 626:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 627:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_n_1
 628:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 629:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 630:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_GLIBCXX20_CONSTEXPR
 631:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 632:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 633:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         {
 634:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 635:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __try
 636:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    {
 637:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 638:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 639:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      return __cur;
 640:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    }
 641:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 642:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    {
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 145


 643:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 644:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 645:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    }
 646:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 647:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 648:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 649:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<>
 650:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_n_1<true>
 651:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 652:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 653:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_GLIBCXX20_CONSTEXPR
 654:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 655:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 656:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         {
 657:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  if (__n > 0)
 658:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    {
 659:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      typename iterator_traits<_ForwardIterator>::value_type* __val
 660:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		= std::__addressof(*__first);
 661:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      std::_Construct(__val);
 662:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      ++__first;
 663:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      __first = std::fill_n(__first, __n - 1, *__val);
 664:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    }
 665:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  return __first;
 666:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 667:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 668:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 669:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default
 670:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Fills [first, last) with value-initialized value_types.
 671:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator>
 672:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline void
 673:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_default(_ForwardIterator __first,
 674:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			    _ForwardIterator __last)
 675:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 676:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 677:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 678:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // trivial types can have deleted assignment
 679:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 680:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 681:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_default_1<__is_trivial(_ValueType)
 682:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				     && __assignable>::
 683:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	__uninit_default(__first, __last);
 684:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 685:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 686:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_n
 687:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Fills [first, first + n) with value-initialized value_types.
 688:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 689:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 690:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 691:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 692:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 693:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 694:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 695:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       // See uninitialized_fill_n for the conditions for using std::fill_n.
 696:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       constexpr bool __can_fill
 697:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
 698:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 699:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_n_1<__is_trivial(_ValueType)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 146


 700:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 					 && __can_fill>::
 701:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	__uninit_default_n(__first, __n);
 702:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 703:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 704:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 705:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_a
 706:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Fills [first, last) with value_types constructed by the allocator
 707:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // alloc, with no arguments passed to the construct call.
 708:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Allocator>
 709:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     void
 710:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 711:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __last,
 712:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 713:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 714:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 715:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 716:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 717:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 718:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 719:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 720:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 721:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 722:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 723:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 724:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 725:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 726:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 727:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 728:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 729:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline void
 730:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 731:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __last,
 732:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      allocator<_Tp>&)
 733:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     { std::__uninitialized_default(__first, __last); }
 734:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 735:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 736:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_n_a
 737:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Fills [first, first + n) with value_types constructed by the allocator
 738:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // alloc, with no arguments passed to the construct call.
 739:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Allocator>
 740:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR _ForwardIterator
 741:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 742:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				_Allocator& __alloc)
 743:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 744:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 745:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 746:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 747:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 748:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 749:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 750:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 751:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 752:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 753:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 754:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 755:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 756:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 147


 757:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 758:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 759:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_n_a specialization for std::allocator,
 760:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // which ignores the allocator and value-initializes the elements.
 761:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 762:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 763:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 764:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 765:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				allocator<_Tp>&)
 766:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     { return std::__uninitialized_default_n(__first, __n); }
 767:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 768:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 769:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_1
 770:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 771:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 772:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	static void
 773:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue(_ForwardIterator __first,
 774:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				 _ForwardIterator __last)
 775:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 776:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 777:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __try
 778:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    {
 779:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 780:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 781:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    }
 782:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 783:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    {
 784:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 785:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 786:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    }
 787:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 788:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 789:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 790:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<>
 791:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_1<true>
 792:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 793:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         static void
 795:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****         __uninit_default_novalue(_ForwardIterator __first,
 796:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				 _ForwardIterator __last)
 797:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 798:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 799:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 800:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 801:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 802:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1
 803:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 804:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 805:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	static _ForwardIterator
 806:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 807:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 808:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 809:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __try
 810:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    {
 811:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 812:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 813:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      return __cur;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 148


 814:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    }
 815:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 816:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    {
 817:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 818:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 819:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    }
 820:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 821:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 822:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 823:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<>
 824:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1<true>
 825:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 826:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 827:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	static _ForwardIterator
 828:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 829:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{ return std::next(__first, __n); }
 830:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     };
 831:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 832:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_novalue
 833:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Fills [first, last) with default-initialized value_types.
 834:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator>
 835:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline void
 836:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_novalue(_ForwardIterator __first,
 837:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				    _ForwardIterator __last)
 838:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 839:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 840:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 841:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 842:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_default_novalue_1<
 843:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
 844:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue(__first, __last);
 845:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 846:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 847:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_novalue_n
 848:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Fills [first, first + n) with default-initialized value_types.
 849:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 850:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 851:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
 852:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 853:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 854:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 855:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 856:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_novalue_n_1<
 857:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
 858:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(__first, __n);
 859:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 860:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 861:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 862:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 863:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 864:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n(_InputIterator __first, _Size __n,
 865:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 866:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 867:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 868:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 869:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 870:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 149


 871:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 872:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 873:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 874:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 875:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 876:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 877:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 878:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 879:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 880:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 881:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 882:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 883:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 884:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
 885:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result,
 886:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			   random_access_iterator_tag)
 887:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __first + __n, __result); }
 888:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 889:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 890:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 891:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     pair<_InputIterator, _ForwardIterator>
 892:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 893:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 894:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 895:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 896:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __try
 897:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 898:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
 899:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 900:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  return {__first, __cur};
 901:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 902:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __catch(...)
 903:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
 904:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 905:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 906:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
 907:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 908:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 909:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 910:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 911:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline pair<_RandomAccessIterator, _ForwardIterator>
 912:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
 913:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result,
 914:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			   random_access_iterator_tag)
 915:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 916:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       auto __second_res = uninitialized_copy(__first, __first + __n, __result);
 917:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       auto __first_res = std::next(__first, __n);
 918:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return {__first_res, __second_res};
 919:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 920:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 921:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @endcond
 922:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 923:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /**
 924:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the range [first,first+n) into result.
 925:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 926:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __n      The number of elements to copy.
 927:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 150


 928:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @return  __result + __n
 929:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @since C++11
 930:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *
 931:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  Like copy_n(), but does not require an initialized output range.
 932:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   */
 933:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
 934:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 935:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     uninitialized_copy_n(_InputIterator __first, _Size __n,
 936:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			 _ForwardIterator __result)
 937:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     { return std::__uninitialized_copy_n(__first, __n, __result,
 938:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 					 std::__iterator_category(__first)); }
 939:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 940:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 941:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
 942:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
 943:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 944:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __result)
 945:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 946:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return
 947:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	std::__uninitialized_copy_n_pair(__first, __n, __result,
 948:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 					 std::__iterator_category(__first));
 949:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 950:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @endcond
 951:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #endif
 952:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 953:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201703L
 954:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** # define __cpp_lib_raw_memory_algorithms 201606L
 955:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 956:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /**
 957:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @brief Default-initializes objects in the range [first,last).
 958:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 959:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __last   A forward iterator.
 960:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @since C++17
 961:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   */
 962:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator>
 963:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline void
 964:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     uninitialized_default_construct(_ForwardIterator __first,
 965:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				    _ForwardIterator __last)
 966:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 967:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __uninitialized_default_novalue(__first, __last);
 968:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 969:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 970:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /**
 971:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @brief Default-initializes objects in the range [first,first+count).
 972:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 973:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to construct.
 974:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @return   __first + __count
 975:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @since C++17
 976:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   */
 977:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
 978:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 979:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)
 980:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 981:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_novalue_n(__first, __count);
 982:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 983:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 984:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /**
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 151


 985:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @brief Value-initializes objects in the range [first,last).
 986:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 987:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __last   A forward iterator.
 988:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @since C++17
 989:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   */
 990:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator>
 991:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline void
 992:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     uninitialized_value_construct(_ForwardIterator __first,
 993:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				  _ForwardIterator __last)
 994:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
 995:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default(__first, __last);
 996:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 997:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
 998:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /**
 999:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @brief Value-initializes objects in the range [first,first+count).
1000:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
1001:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to construct.
1002:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @return   __result + __count
1003:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @since C++17
1004:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   */
1005:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
1006:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
1007:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)
1008:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
1009:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_n(__first, __count);
1010:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
1011:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
1012:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /**
1013:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @brief Move-construct from the range [first,last) into result.
1014:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
1015:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
1016:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
1017:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @return   __result + (__first - __last)
1018:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @since C++17
1019:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   */
1020:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator>
1021:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
1022:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     uninitialized_move(_InputIterator __first, _InputIterator __last,
1023:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
1024:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
1025:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return std::uninitialized_copy
1026:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
1027:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);
1028:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
1029:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
1030:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /**
1031:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @brief Move-construct from the range [first,first+count) into result.
1032:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
1033:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to initialize.
1034:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
1035:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @return  __result + __count
1036:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****    *  @since C++17
1037:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   */
1038:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _Size, typename _ForwardIterator>
1039:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
1040:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     uninitialized_move_n(_InputIterator __first, _Size __count,
1041:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			 _ForwardIterator __result)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 152


1042:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
1043:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       auto __res = std::__uninitialized_copy_n_pair
1044:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
1045:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	 __count, __result);
1046:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return {__res.first.base(), __res.second};
1047:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
1048:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #endif // C++17
1049:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
1050:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
1051:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
1052:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
1053:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _Tp, typename _Up, typename _Allocator>
1054:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
1055:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline void
1056:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
1057:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			_Allocator& __alloc)
1058:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
1059:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			 __dest, std::move(*__orig)))
1060:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	     && noexcept(std::allocator_traits<_Allocator>::destroy(
1061:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			    __alloc, std::__addressof(*__orig))))
1062:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
1063:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef std::allocator_traits<_Allocator> __traits;
1064:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __traits::construct(__alloc, __dest, std::move(*__orig));
1065:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       __traits::destroy(__alloc, std::__addressof(*__orig));
1066:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
1067:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
1068:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // This class may be specialized for specific types.
1069:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   // Also known as is_trivially_relocatable.
1070:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template<typename _Tp, typename = void>
1071:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     struct __is_bitwise_relocatable
1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     : is_trivial<_Tp> { };
1073:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
1074:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator,
1075:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    typename _Allocator>
1076:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
1077:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
1078:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __relocate_a_1(_InputIterator __first, _InputIterator __last,
 900              		.loc 14 1078 5 is_stmt 1 view -0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 0
 903              		@ frame_needed = 0, uses_anonymous_args = 0
 904              		.loc 14 1078 5 is_stmt 0 view .LVU198
 905 0000 70B5     		push	{r4, r5, r6, lr}
 906              	.LCFI16:
 907              		.cfi_def_cfa_offset 16
 908              		.cfi_offset 4, -16
 909              		.cfi_offset 5, -12
 910              		.cfi_offset 6, -8
 911              		.cfi_offset 14, -4
 912 0002 0446     		mov	r4, r0
 913 0004 0E46     		mov	r6, r1
 914 0006 1546     		mov	r5, r2
 915              	.LVL71:
1079:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
1080:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
1081:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 					       std::addressof(*__first),
1082:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 					       __alloc)))
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 153


1083:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
1084:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1085:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_ValueType;
1086:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
1087:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	_ValueType2;
1088:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       static_assert(std::is_same<_ValueType, _ValueType2>::value,
1089:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  "relocation is only possible for values of the same type");
1090:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
1091:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       for (; __first != __last; ++__first, (void)++__cur)
 916              		.loc 14 1091 7 view .LVU199
 917 0008 08E0     		b	.L47
 918              	.LVL72:
 919              	.L48:
 920              	.LBB710:
 921              	.LBI710:
1056:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 			_Allocator& __alloc)
 922              		.loc 14 1056 5 is_stmt 1 view .LVU200
 923              	.LBB711:
 924              	.LBB712:
 925              	.LBI712:
 511:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 		  _Args&&... __args)
 926              		.loc 4 511 2 view .LVU201
 927              	.LBB713:
 928              	.LBI713:
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       }
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #undef _GLIBCXX_SIZED_DEALLOC
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #undef _GLIBCXX_OPERATOR_DELETE
 163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #undef _GLIBCXX_OPERATOR_NEW
 164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #if __cplusplus <= 201703L
 166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       size_type
 167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       { return _M_max_size(); }
 169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** #if __cplusplus >= 201103L
 171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       template<typename _Up, typename... _Args>
 172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	void
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 929              		.loc 5 173 2 view .LVU202
 930              	.LBB714:
 174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 931              		.loc 5 175 4 is_stmt 0 view .LVU203
 932 000a 2146     		mov	r1, r4
 933 000c 2846     		mov	r0, r5
 934 000e FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_
 935              	.LVL73:
 936              		.loc 5 175 4 view .LVU204
 937              	.LBE714:
 938              	.LBE713:
 939              	.LBE712:
 940              	.LBB715:
 941              	.LBI715:
 531:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 942              		.loc 4 531 2 is_stmt 1 view .LVU205
 943              	.LBB716:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 154


 944              	.LBI716:
 176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       template<typename _Up>
 178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	void
 179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	destroy(_Up* __p)
 945              		.loc 5 179 2 view .LVU206
 946              	.LBB717:
 947              	.LBI717:
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_dispose(); }
 948              		.loc 8 794 7 view .LVU207
 949              	.LBB718:
 950              		.loc 8 795 19 is_stmt 0 view .LVU208
 951 0012 2046     		mov	r0, r4
 952 0014 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 953              	.LVL74:
 954              	.LBB719:
 955              	.LBI719:
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 956              		.loc 8 192 14 is_stmt 1 view .LVU209
 957              	.LBB720:
 958              	.LBI720:
 959              		.loc 6 174 7 view .LVU210
 960              	.LBB721:
 961              	.LBI721:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 962              		.loc 5 90 7 view .LVU211
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 963              		.loc 5 90 7 is_stmt 0 view .LVU212
 964              	.LBE721:
 965              	.LBE720:
 966              	.LBE719:
 967              	.LBE718:
 968              	.LBE717:
 969              	.LBE716:
 970              	.LBE715:
 971              	.LBE711:
 972              	.LBE710:
 973              		.loc 14 1091 7 is_stmt 1 view .LVU213
 974 0018 1834     		adds	r4, r4, #24
 975              	.LVL75:
 976              		.loc 14 1091 44 is_stmt 0 view .LVU214
 977 001a 1835     		adds	r5, r5, #24
 978              	.LVL76:
 979              	.L47:
 980              		.loc 14 1091 22 is_stmt 1 discriminator 1 view .LVU215
 981 001c B442     		cmp	r4, r6
 982 001e F4D1     		bne	.L48
1092:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
1093:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				 std::__addressof(*__first), __alloc);
1094:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return __cur;
1095:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
 983              		.loc 14 1095 5 is_stmt 0 view .LVU216
 984 0020 2846     		mov	r0, r5
 985 0022 70BD     		pop	{r4, r5, r6, pc}
 986              		.loc 14 1095 5 view .LVU217
 987              		.cfi_endproc
 988              	.LFE2157:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 155


 990              		.section	.rodata._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_rea
 991              		.align	2
 992              	.LC1:
 993 0000 76656374 		.ascii	"vector::_M_realloc_insert\000"
 993      6F723A3A 
 993      5F4D5F72 
 993      65616C6C 
 993      6F635F69 
 994              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reall
 995              		.align	1
 996              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insert
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1001              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EE
 1002              	.LVL77:
 1003              	.LFB2052:
 1004              		.file 15 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
   1:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
   3:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // Copyright (C) 2001-2022 Free Software Foundation, Inc.
   4:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** //
   5:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // terms of the GNU General Public License as published by the
   8:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // any later version.
  10:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
  11:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // GNU General Public License for more details.
  15:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
  16:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
  20:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
  25:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** /*
  26:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  *
  27:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * Copyright (c) 1994
  28:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * Hewlett-Packard Company
  29:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  *
  30:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * representations about the suitability of this software for any
  36:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  *
  38:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  *
  39:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * Copyright (c) 1996
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 156


  40:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  *
  42:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * representations about the suitability of this  software for any
  48:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  */
  50:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
  51:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** /** @file bits/vector.tcc
  52:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****  */
  55:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
  56:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #ifndef _VECTOR_TCC
  57:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #define _VECTOR_TCC 1
  58:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
  59:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** {
  61:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  63:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
  64:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
  65:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
  66:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     void
  67:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
  68:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     reserve(size_type __n)
  69:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     {
  70:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       if (__n > this->max_size())
  71:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  72:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       if (this->capacity() < __n)
  73:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	{
  74:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  const size_type __old_size = size();
  75:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  pointer __tmp;
  76:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
  77:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
  78:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    {
  79:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      __tmp = this->_M_allocate(__n);
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
  81:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			  __tmp, _M_get_Tp_allocator());
  82:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    }
  83:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  else
  84:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
  85:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    {
  86:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      __tmp = _M_allocate_and_copy(__n,
  87:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  88:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  89:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			    _M_get_Tp_allocator());
  91:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    }
  92:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
  93:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  94:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			this->_M_impl._M_end_of_storage
  95:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			- this->_M_impl._M_start);
  96:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  this->_M_impl._M_start = __tmp;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 157


  97:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  98:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	}
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     }
 101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     template<typename... _Args>
 105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus > 201402L
 106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       typename vector<_Tp, _Alloc>::reference
 108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #else
 109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       void
 110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       emplace_back(_Args&&... __args)
 113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       {
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  {
 116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 				     std::forward<_Args>(__args)...);
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  }
 122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	else
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus > 201402L
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	return back();
 126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       }
 128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 134:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 135:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 136:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #else
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     insert(iterator __position, const value_type& __x)
 138:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 139:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     {
 140:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       const size_type __n = __position - begin();
 141:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	if (__position == end())
 143:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  {
 144:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 145:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 146:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 				     __x);
 147:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 148:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 149:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  }
 150:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	else
 151:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  {
 152:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 153:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    const auto __pos = begin() + (__position - cbegin());
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 158


 154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    // __x could be an existing element of this vector, so make a
 155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    // copy of it before _M_insert_aux moves elements around.
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _Temporary_value __x_copy(this, __x);
 157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #else
 159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _M_insert_aux(__position, __x);
 160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  }
 162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       else
 163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #else
 166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	_M_realloc_insert(__position, __x);
 167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     }
 171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _M_erase(iterator __position)
 177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     {
 178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       if (__position + 1 != end())
 179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 180:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       --this->_M_impl._M_finish;
 181:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 182:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
 183:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       return __position;
 184:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     }
 185:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 186:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 187:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 188:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 189:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 190:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _M_erase(iterator __first, iterator __last)
 191:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     {
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       if (__first != __last)
 193:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	{
 194:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  if (__last != end())
 195:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 196:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 197:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	}
 198:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       return __first;
 199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     }
 200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 201:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 202:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 203:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>&
 204:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 205:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 206:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     {
 207:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       if (std::__addressof(__x) != this)
 208:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	{
 209:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
 210:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 159


 211:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 212:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    {
 213:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 214:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 215:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	        {
 216:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		  // replacement allocator cannot free existing storage
 217:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		  this->clear();
 218:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 219:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 				this->_M_impl._M_end_of_storage
 220:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 				- this->_M_impl._M_start);
 221:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 222:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		}
 225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 				   __x._M_get_Tp_allocator());
 227:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    }
 228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  const size_type __xlen = __x.size();
 230:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  if (__xlen > capacity())
 231:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    {
 232:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 						   __x.end());
 234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 235:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			    _M_get_Tp_allocator());
 236:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			    this->_M_impl._M_end_of_storage
 238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			    - this->_M_impl._M_start);
 239:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 240:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    }
 242:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  else if (size() >= __xlen)
 243:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    {
 244:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 245:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			    end(), _M_get_Tp_allocator());
 246:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    }
 247:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  else
 248:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    {
 249:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 250:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			this->_M_impl._M_start);
 251:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 252:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 					  __x._M_impl._M_finish,
 253:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 					  this->_M_impl._M_finish,
 254:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 					  _M_get_Tp_allocator());
 255:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    }
 256:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 257:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	}
 258:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       return *this;
 259:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     }
 260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 262:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 263:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     void
 264:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 265:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 266:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     {
 267:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       if (__n > capacity())
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 160


 268:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	{
 269:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 270:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  __tmp._M_impl._M_swap_data(this->_M_impl);
 271:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	}
 272:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       else if (__n > size())
 273:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	{
 274:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  std::fill(begin(), end(), __val);
 275:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  const size_type __add = __n - size();
 276:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GROW(__add);
 277:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  this->_M_impl._M_finish =
 278:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 279:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 					  __add, __val, _M_get_Tp_allocator());
 280:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GREW(__add);
 281:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	}
 282:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       else
 283:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 284:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     }
 285:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 286:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 287:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     template<typename _InputIterator>
 288:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 289:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       void
 290:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 291:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 292:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		    std::input_iterator_tag)
 293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       {
 294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 295:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 296:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	     ++__cur, (void)++__first)
 297:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  *__cur = *__first;
 298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	if (__first == __last)
 299:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _M_erase_at_end(__cur);
 300:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	else
 301:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _M_range_insert(end(), __first, __last,
 302:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			  std::__iterator_category(__first));
 303:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       }
 304:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 305:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 306:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     template<typename _ForwardIterator>
 307:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 308:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       void
 309:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 310:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 311:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		    std::forward_iterator_tag)
 312:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       {
 313:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 314:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 315:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	if (__len > capacity())
 316:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  {
 317:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _S_check_init_len(__len, _M_get_Tp_allocator());
 318:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 319:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 320:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			  _M_get_Tp_allocator());
 321:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
 322:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 323:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			  this->_M_impl._M_end_of_storage
 324:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			  - this->_M_impl._M_start);
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 161


 325:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 326:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 327:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 328:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  }
 329:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	else if (size() >= __len)
 330:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 331:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	else
 332:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  {
 333:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _ForwardIterator __mid = __first;
 334:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    std::advance(__mid, size());
 335:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 336:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    const size_type __attribute__((__unused__)) __n = __len - size();
 337:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
 338:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    this->_M_impl._M_finish =
 339:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 340:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 					  this->_M_impl._M_finish,
 341:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 					  _M_get_Tp_allocator());
 342:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
 343:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  }
 344:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       }
 345:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 346:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 347:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 348:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 349:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     auto
 350:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 351:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
 352:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     {
 353:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       const auto __n = __position - cbegin();
 354:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 355:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	if (__position == cend())
 356:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  {
 357:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 358:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 359:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 				     std::move(__v));
 360:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 361:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 362:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  }
 363:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	else
 364:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _M_insert_aux(begin() + __n, std::move(__v));
 365:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       else
 366:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	_M_realloc_insert(begin() + __n, std::move(__v));
 367:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 368:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 369:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     }
 370:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 371:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 372:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     template<typename... _Args>
 373:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 374:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       auto
 375:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 376:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _M_emplace_aux(const_iterator __position, _Args&&... __args)
 377:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       -> iterator
 378:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       {
 379:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	const auto __n = __position - cbegin();
 380:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 381:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  if (__position == cend())
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 162


 382:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    {
 383:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 384:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 385:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 				       std::forward<_Args>(__args)...);
 386:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      ++this->_M_impl._M_finish;
 387:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 388:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    }
 389:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  else
 390:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    {
 391:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      // We need to construct a temporary because something in __args...
 392:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      // could alias one of the elements of the container and so we
 393:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      // need to use it before _M_insert_aux moves elements around.
 394:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
 395:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
 396:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    }
 397:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	else
 398:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);
 399:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 400:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 401:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       }
 402:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 403:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 404:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     template<typename _Arg>
 405:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 406:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       void
 407:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 408:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _M_insert_aux(iterator __position, _Arg&& __arg)
 409:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #else
 410:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 411:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     void
 412:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 413:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 414:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 415:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     {
 416:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 417:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 418:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
 419:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       ++this->_M_impl._M_finish;
 420:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 421:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus < 201103L
 422:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _Tp __x_copy = __x;
 423:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 424:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 425:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			      this->_M_impl._M_finish - 2,
 426:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 			      this->_M_impl._M_finish - 1);
 427:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus < 201103L
 428:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       *__position = __x_copy;
 429:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #else
 430:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       *__position = std::forward<_Arg>(__arg);
 431:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 432:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     }
 433:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 434:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 435:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 436:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     template<typename... _Args>
 437:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 438:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       void
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 163


 439:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 1005              		.loc 15 439 7 is_stmt 1 view -0
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 0
 1008              		@ frame_needed = 0, uses_anonymous_args = 0
 1009              		.loc 15 439 7 is_stmt 0 view .LVU219
 1010 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1011              	.LCFI17:
 1012              		.cfi_def_cfa_offset 40
 1013              		.cfi_offset 3, -40
 1014              		.cfi_offset 4, -36
 1015              		.cfi_offset 5, -32
 1016              		.cfi_offset 6, -28
 1017              		.cfi_offset 7, -24
 1018              		.cfi_offset 8, -20
 1019              		.cfi_offset 9, -16
 1020              		.cfi_offset 10, -12
 1021              		.cfi_offset 11, -8
 1022              		.cfi_offset 14, -4
 1023 0004 0446     		mov	r4, r0
 1024 0006 0E46     		mov	r6, r1
 1025              	.LVL78:
 1026              		.loc 15 439 7 view .LVU220
 1027 0008 9146     		mov	r9, r2
 440:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _M_realloc_insert(iterator __position, _Args&&... __args)
 441:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #else
 442:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 443:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     void
 444:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 445:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 446:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 447:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     {
 448:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       const size_type __len =
 449:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 1028              		.loc 15 449 14 view .LVU221
 1029 000a 1C4A     		ldr	r2, .L55
 1030              	.LVL79:
 1031              		.loc 15 449 14 view .LVU222
 1032 000c 0121     		movs	r1, #1
 1033 000e FFF7FEFF 		bl	_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc
 1034              	.LVL80:
 450:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       pointer __old_start = this->_M_impl._M_start;
 1035              		.loc 15 450 15 view .LVU223
 1036 0012 D4F80080 		ldr	r8, [r4]
 1037              	.LVL81:
 451:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       pointer __old_finish = this->_M_impl._M_finish;
 1038              		.loc 15 451 15 view .LVU224
 1039 0016 D4F804A0 		ldr	r10, [r4, #4]
 1040              	.LVL82:
 1041              	.LBB722:
 1042              	.LBI722:
 868:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 1043              		.loc 3 868 7 is_stmt 1 view .LVU225
 1044              	.LBB723:
 1045              	.LBB724:
 1046              	.LBI724:
1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 164


 1047              		.loc 12 1072 7 view .LVU226
1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1048              		.loc 12 1072 7 is_stmt 0 view .LVU227
 1049              	.LBE724:
 1050              	.LBE723:
 1051              	.LBE722:
 1052              	.LBB725:
 1053              	.LBI725:
1154:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
1155:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1157:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       const _Iterator&
1158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
1159:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { return _M_current; }
1160:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     };
1161:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1162:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
1163:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
1164:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
1165:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
1166:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
1167:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
1168:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
1169:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1170:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cpp_lib_three_way_comparison
1171:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1172:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
1173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr bool
1174:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1176:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     noexcept(noexcept(__lhs.base() == __rhs.base()))
1177:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     requires requires {
1178:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
1179:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     }
1180:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1181:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1182:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1183:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
1184:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr std::__detail::__synth3way_t<_IteratorR, _IteratorL>
1185:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,
1186:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 		const __normal_iterator<_IteratorR, _Container>& __rhs)
1187:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
1188:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
1189:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1190:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1191:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
1192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr bool
1193:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
1194:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1195:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     noexcept(noexcept(__lhs.base() == __rhs.base()))
1196:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     requires requires {
1197:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
1198:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     }
1199:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1200:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1201:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1202:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[nodiscard]]
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 165


1203:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     constexpr std::__detail::__synth3way_t<_Iterator>
1204:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
1205:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 		const __normal_iterator<_Iterator, _Container>& __rhs)
1206:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
1207:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
1208:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #else
1209:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****    // Forward iterator requirements
1210:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1211:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1212:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1213:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1214:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1215:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1216:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1217:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1218:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1219:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1220:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1221:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
1222:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1223:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1224:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1225:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1226:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1227:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1228:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1229:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1230:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1231:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1232:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
1233:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1234:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1235:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1236:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
1238:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1239:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1240:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
1241:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1242:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // Random access iterator requirements
1243:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1244:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
1245:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1246:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
1247:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1248:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1249:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
1250:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1251:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1252:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1253:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1254:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
1255:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1256:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1257:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
1258:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1259:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 166


1260:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
1261:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1262:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
1263:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1264:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1265:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
1266:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1267:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1268:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1269:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1270:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
1271:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1272:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1273:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
1274:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1275:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1276:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
1277:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1278:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1279:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1280:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1281:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
1282:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1283:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1284:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1285:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1286:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
1287:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1288:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1289:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
1290:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1291:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1292:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
1293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1295:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1296:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1297:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
1298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1299:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1300:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1301:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline bool
1302:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
1303:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1304:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1305:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
1306:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif // three-way comparison
1307:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1308:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1309:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
1310:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
1311:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   // parameters.
1312:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1313:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
1314:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     // DR 685.
1315:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
1316:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline auto
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 167


1317:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
1318:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
1319:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
1320:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #else
1321:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
1322:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
1323:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1324:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** #endif
1325:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
1326:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
1327:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1328:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1329:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
1330:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 1054              		.loc 12 1330 5 is_stmt 1 view .LVU228
 1055              	.LBB726:
1331:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1332:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1333:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 1056              		.loc 12 1333 27 is_stmt 0 view .LVU229
 1057 001a A6EB080B 		sub	fp, r6, r8
 1058              	.LVL83:
 1059              		.loc 12 1333 27 view .LVU230
 1060              	.LBE726:
 1061              	.LBE725:
 1062              	.LBB727:
 1063              	.LBI727:
 375:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 1064              		.loc 3 375 7 is_stmt 1 view .LVU231
 1065              	.LBB728:
 378:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 1066              		.loc 3 378 18 is_stmt 0 view .LVU232
 1067 001e 0746     		mov	r7, r0
 1068 0020 50B3     		cbz	r0, .L53
 1069              	.LVL84:
 1070              	.LBB729:
 1071              	.LBI729:
 463:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { return __a.allocate(__n); }
 1072              		.loc 4 463 7 is_stmt 1 view .LVU233
 1073              	.LBB730:
 464:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 1074              		.loc 4 464 28 is_stmt 0 view .LVU234
 1075 0022 0022     		movs	r2, #0
 1076 0024 0146     		mov	r1, r0
 1077 0026 2046     		mov	r0, r4
 1078              	.LVL85:
 464:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 1079              		.loc 4 464 28 view .LVU235
 1080 0028 FFF7FEFF 		bl	_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv
 1081              	.LVL86:
 464:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 1082              		.loc 4 464 28 view .LVU236
 1083 002c 0546     		mov	r5, r0
 1084              	.LVL87:
 1085              	.L51:
 464:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 
 1086              		.loc 4 464 28 view .LVU237
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 168


 1087              	.LBE730:
 1088              	.LBE729:
 1089              	.LBE728:
 1090              	.LBE727:
 1091              	.LBB732:
 1092              	.LBI732:
 511:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 		  _Args&&... __args)
 1093              		.loc 4 511 2 is_stmt 1 view .LVU238
 1094              	.LBB733:
 1095              	.LBI733:
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1096              		.loc 5 173 2 view .LVU239
 1097              	.LBB734:
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1098              		.loc 5 175 4 is_stmt 0 view .LVU240
 1099 002e 4946     		mov	r1, r9
 1100 0030 05EB0B00 		add	r0, r5, fp
 1101              	.LVL88:
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1102              		.loc 5 175 4 view .LVU241
 1103 0034 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_
 1104              	.LVL89:
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1105              		.loc 5 175 4 view .LVU242
 1106              	.LBE734:
 1107              	.LBE733:
 1108              	.LBE732:
 1109              	.LBB735:
 1110              	.LBI735:
 298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 1111              		.loc 3 298 7 is_stmt 1 view .LVU243
 298:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 1112              		.loc 3 298 7 is_stmt 0 view .LVU244
 1113              	.LBE735:
 1114              	.LBB736:
 1115              	.LBI736:
 499:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 1116              		.loc 3 499 7 is_stmt 1 view .LVU245
 1117              	.LBB737:
 1118              	.LBI737:
1096:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
1097:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template <typename _Tp, typename _Up>
1098:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
1099:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
1100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __relocate_a_1(_Tp* __first, _Tp* __last,
1101:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		   _Tp* __result,
1102:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
1103:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
1104:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       ptrdiff_t __count = __last - __first;
1105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       if (__count > 0)
1106:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	{
1107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #ifdef __cpp_lib_is_constant_evaluated
1108:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  if (std::is_constant_evaluated())
1109:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    {
1110:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      // Can't use memmove. Wrap the pointer so that __relocate_a_1
1111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      // resolves to the non-trivial overload above.
1112:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 169


1113:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
1114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	      return __out.base();
1115:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    }
1116:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** #endif
1117:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
1118:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	}
1119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return __result + __count;
1120:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     }
1121:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
1122:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 
1123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator,
1124:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 	    typename _Allocator>
1125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
1126:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
1127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     __relocate_a(_InputIterator __first, _InputIterator __last,
 1119              		.loc 14 1127 5 view .LVU246
 1120              	.LBB738:
1128:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		 _ForwardIterator __result, _Allocator& __alloc)
1129:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
1130:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				     std::__niter_base(__last),
1131:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 				     std::__niter_base(__result), __alloc)))
1132:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****     {
1133:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h ****       return std::__relocate_a_1(std::__niter_base(__first),
 1121              		.loc 14 1133 33 is_stmt 0 view .LVU247
 1122 0038 2346     		mov	r3, r4
 1123 003a 2A46     		mov	r2, r5
 1124 003c 3146     		mov	r1, r6
 1125 003e 4046     		mov	r0, r8
 1126 0040 FFF7FEFF 		bl	_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8
 1127              	.LVL90:
 1128              		.loc 14 1133 33 view .LVU248
 1129              	.LBE738:
 1130              	.LBE737:
 1131              	.LBE736:
 1132              	.LBB739:
 1133              	.LBI739:
 499:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 1134              		.loc 3 499 7 is_stmt 1 view .LVU249
 1135              	.LBB740:
 1136              	.LBI740:
1127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_uninitialized.h **** 		 _ForwardIterator __result, _Allocator& __alloc)
 1137              		.loc 14 1127 5 view .LVU250
 1138              	.LBB741:
 1139              		.loc 14 1133 33 is_stmt 0 view .LVU251
 1140 0044 2346     		mov	r3, r4
 1141 0046 00F11802 		add	r2, r0, #24
 1142              	.LVL91:
 1143              		.loc 14 1133 33 view .LVU252
 1144 004a 5146     		mov	r1, r10
 1145 004c 3046     		mov	r0, r6
 1146 004e FFF7FEFF 		bl	_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8
 1147              	.LVL92:
 1148              		.loc 14 1133 33 view .LVU253
 1149 0052 0646     		mov	r6, r0
 1150              	.LVL93:
 1151              		.loc 14 1133 33 view .LVU254
 1152              	.LBE741:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 170


 1153              	.LBE740:
 1154              	.LBE739:
 452:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       const size_type __elems_before = __position - begin();
 453:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 454:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       pointer __new_finish(__new_start);
 455:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       __try
 456:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	{
 457:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  // The order of the three operations is dictated by the C++11
 458:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  // case, where the moves could alter a new element belonging
 459:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  // to the existing vector.  This is an issue only for callers
 460:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  // taking the element by lvalue ref (see last bullet of C++11
 461:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  // [res.on.arguments]).
 462:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl,
 463:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 				   __new_start + __elems_before,
 464:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 465:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 				   std::forward<_Args>(__args)...);
 466:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #else
 467:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 				   __x);
 468:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 469:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  __new_finish = pointer();
 470:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 471:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 472:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 473:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    {
 474:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      __new_finish = _S_relocate(__old_start, __position.base(),
 475:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 					 __new_start, _M_get_Tp_allocator());
 476:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 477:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      ++__new_finish;
 478:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 479:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      __new_finish = _S_relocate(__position.base(), __old_finish,
 480:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 					 __new_finish, _M_get_Tp_allocator());
 481:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    }
 482:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  else
 483:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 484:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    {
 485:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      __new_finish
 486:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 487:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		(__old_start, __position.base(),
 488:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 489:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 490:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      ++__new_finish;
 491:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 
 492:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	      __new_finish
 493:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 494:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		(__position.base(), __old_finish,
 495:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 496:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    }
 497:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	}
 498:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       __catch(...)
 499:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	{
 500:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  if (!__new_finish)
 501:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 502:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 				   __new_start + __elems_before);
 503:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  else
 504:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 505:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  _M_deallocate(__new_start, __len);
 506:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  __throw_exception_again;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 171


 507:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	}
 508:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 509:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 510:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 511:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 512:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_REINIT;
 513:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       _M_deallocate(__old_start,
 514:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 		    this->_M_impl._M_end_of_storage - __old_start);
 1155              		.loc 15 514 21 view .LVU255
 1156 0054 A168     		ldr	r1, [r4, #8]
 1157              		.loc 15 514 39 view .LVU256
 1158 0056 A1EB0801 		sub	r1, r1, r8
 1159              	.LVL94:
 1160              	.LBB742:
 1161              	.LBI742:
 383:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       {
 1162              		.loc 3 383 7 is_stmt 1 view .LVU257
 1163              	.LBB743:
 386:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1164              		.loc 3 386 2 is_stmt 0 view .LVU258
 1165 005a B8F1000F 		cmp	r8, #0
 1166 005e 02D0     		beq	.L52
 1167              	.LVL95:
 1168              	.LBB744:
 1169              	.LBI744:
 495:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1170              		.loc 4 495 7 is_stmt 1 view .LVU259
 1171              	.LBB745:
 1172              	.LBB746:
 1173              	.LBI746:
 142:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       {
 1174              		.loc 5 142 7 view .LVU260
 1175              	.LBB747:
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       }
 1176              		.loc 5 158 26 is_stmt 0 view .LVU261
 1177 0060 4046     		mov	r0, r8
 1178              	.LVL96:
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       }
 1179              		.loc 5 158 26 view .LVU262
 1180 0062 FFF7FEFF 		bl	_ZdlPvj
 1181              	.LVL97:
 1182              	.L52:
 158:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h ****       }
 1183              		.loc 5 158 26 view .LVU263
 1184              	.LBE747:
 1185              	.LBE746:
 1186              	.LBE745:
 1187              	.LBE744:
 1188              	.LBE743:
 1189              	.LBE742:
 515:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       this->_M_impl._M_start = __new_start;
 1190              		.loc 15 515 30 view .LVU264
 1191 0066 2560     		str	r5, [r4]
 516:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       this->_M_impl._M_finish = __new_finish;
 1192              		.loc 15 516 31 view .LVU265
 1193 0068 6660     		str	r6, [r4, #4]
 517:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       this->_M_impl._M_end_of_storage = __new_start + __len;
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 172


 1194              		.loc 15 517 53 view .LVU266
 1195 006a 07EB4707 		add	r7, r7, r7, lsl #1
 1196              	.LVL98:
 1197              		.loc 15 517 53 view .LVU267
 1198 006e 05EBC705 		add	r5, r5, r7, lsl #3
 1199              	.LVL99:
 1200              		.loc 15 517 39 view .LVU268
 1201 0072 A560     		str	r5, [r4, #8]
 518:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****     }
 1202              		.loc 15 518 5 view .LVU269
 1203 0074 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1204              	.LVL100:
 1205              	.L53:
 1206              	.LBB748:
 1207              	.LBB731:
 378:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       }
 1208              		.loc 3 378 18 view .LVU270
 1209 0078 0025     		movs	r5, #0
 1210 007a D8E7     		b	.L51
 1211              	.L56:
 1212              		.align	2
 1213              	.L55:
 1214 007c 00000000 		.word	.LC1
 1215              	.LBE731:
 1216              	.LBE748:
 1217              		.cfi_endproc
 1218              	.LFE2052:
 1220              		.section	.text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_
 1221              		.align	1
 1222              		.weak	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_
 1223              		.syntax unified
 1224              		.thumb
 1225              		.thumb_func
 1227              	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEERS5_
 1228              	.LVL101:
 1229              	.LFB1971:
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       emplace_back(_Args&&... __args)
 1230              		.loc 15 111 7 is_stmt 1 view -0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 0, uses_anonymous_args = 0
 111:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc ****       emplace_back(_Args&&... __args)
 1234              		.loc 15 111 7 is_stmt 0 view .LVU272
 1235 0000 10B5     		push	{r4, lr}
 1236              	.LCFI18:
 1237              		.cfi_def_cfa_offset 8
 1238              		.cfi_offset 4, -8
 1239              		.cfi_offset 14, -4
 1240 0002 0446     		mov	r4, r0
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  {
 1241              		.loc 15 114 20 view .LVU273
 1242 0004 4068     		ldr	r0, [r0, #4]
 1243              	.LVL102:
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  {
 1244              		.loc 15 114 47 view .LVU274
 1245 0006 A368     		ldr	r3, [r4, #8]
 114:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	  {
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 173


 1246              		.loc 15 114 2 view .LVU275
 1247 0008 9842     		cmp	r0, r3
 1248 000a 08D0     		beq	.L58
 1249              	.LVL103:
 1250              	.LBB749:
 1251              	.LBI749:
 511:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\alloc_traits.h **** 		  _Args&&... __args)
 1252              		.loc 4 511 2 is_stmt 1 view .LVU276
 1253              	.LBB750:
 1254              	.LBI750:
 173:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1255              		.loc 5 173 2 view .LVU277
 1256              	.LBB751:
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1257              		.loc 5 175 4 is_stmt 0 view .LVU278
 1258 000c FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_
 1259              	.LVL104:
 175:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1260              		.loc 5 175 4 view .LVU279
 1261              	.LBE751:
 1262              	.LBE750:
 1263              	.LBE749:
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1264              		.loc 15 119 22 view .LVU280
 1265 0010 6368     		ldr	r3, [r4, #4]
 119:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1266              		.loc 15 119 6 view .LVU281
 1267 0012 1833     		adds	r3, r3, #24
 1268 0014 6360     		str	r3, [r4, #4]
 1269              	.L59:
 125:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 1270              		.loc 15 125 13 view .LVU282
 1271 0016 2046     		mov	r0, r4
 1272 0018 FFF7FEFF 		bl	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4backEv
 1273              	.LVL105:
 127:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #endif
 1274              		.loc 15 127 7 view .LVU283
 1275 001c 10BD     		pop	{r4, pc}
 1276              	.LVL106:
 1277              	.L58:
 1278              	.LBB752:
 1279              	.LBI752:
 888:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1280              		.loc 3 888 7 is_stmt 1 view .LVU284
 1281              	.LBB753:
 1282              	.LBB754:
 1283              	.LBI754:
1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1284              		.loc 12 1072 7 view .LVU285
1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1285              		.loc 12 1072 7 is_stmt 0 view .LVU286
 1286              	.LBE754:
 1287              	.LBE753:
 1288              	.LBE752:
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus > 201402L
 1289              		.loc 15 123 21 view .LVU287
 1290 001e 0A46     		mov	r2, r1
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 174


 1291 0020 0146     		mov	r1, r0
 1292              	.LVL107:
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus > 201402L
 1293              		.loc 15 123 21 view .LVU288
 1294 0022 2046     		mov	r0, r4
 1295 0024 FFF7FEFF 		bl	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS
 1296              	.LVL108:
 123:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\vector.tcc **** #if __cplusplus > 201402L
 1297              		.loc 15 123 21 view .LVU289
 1298 0028 F5E7     		b	.L59
 1299              		.cfi_endproc
 1300              	.LFE1971:
 1302              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1303              		.align	2
 1304              	.LC2:
 1305 0000 68656C6C 		.ascii	"hello c++\000"
 1305      6F20632B 
 1305      2B00
 1306 000a 0000     		.align	2
 1307              	.LC3:
 1308 000c 63707064 		.ascii	"cppdemo!\000"
 1308      656D6F21 
 1308      00
 1309 0015 000000   		.align	2
 1310              	.LC4:
 1311 0018 68656C6C 		.ascii	"hello c++ 1\012\000"
 1311      6F20632B 
 1311      2B20310A 
 1311      00
 1312 0025 000000   		.align	2
 1313              	.LC5:
 1314 0028 68656C6C 		.ascii	"hello c++ 2\012\000"
 1314      6F20632B 
 1314      2B20320A 
 1314      00
 1315 0035 000000   		.align	2
 1316              	.LC6:
 1317 0038 68656C6C 		.ascii	"hello c++ 3\012\000"
 1317      6F20632B 
 1317      2B20330A 
 1317      00
 1318 0045 000000   		.align	2
 1319              	.LC7:
 1320 0048 68656C6C 		.ascii	"hello c++ 4\012\000"
 1320      6F20632B 
 1320      2B20340A 
 1320      00
 1321 0055 000000   		.align	2
 1322              	.LC8:
 1323 0058 68656C6C 		.ascii	"hello c++ 5\012\000"
 1323      6F20632B 
 1323      2B20350A 
 1323      00
 1324              		.section	.text.main,"ax",%progbits
 1325              		.align	1
 1326              		.global	main
 1327              		.syntax unified
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 175


 1328              		.thumb
 1329              		.thumb_func
 1331              	main:
 1332              	.LFB1565:
  73:Core/Src/main.cpp ****   /* USER CODE BEGIN 1 */
 1333              		.loc 1 73 1 is_stmt 1 view -0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 208
 1336              		@ frame_needed = 0, uses_anonymous_args = 0
 1337 0000 30B5     		push	{r4, r5, lr}
 1338              	.LCFI19:
 1339              		.cfi_def_cfa_offset 12
 1340              		.cfi_offset 4, -12
 1341              		.cfi_offset 5, -8
 1342              		.cfi_offset 14, -4
 1343 0002 B5B0     		sub	sp, sp, #212
 1344              	.LCFI20:
 1345              		.cfi_def_cfa_offset 224
  81:Core/Src/main.cpp **** 
 1346              		.loc 1 81 3 view .LVU291
  81:Core/Src/main.cpp **** 
 1347              		.loc 1 81 11 is_stmt 0 view .LVU292
 1348 0004 FFF7FEFF 		bl	HAL_Init
 1349              	.LVL109:
  88:Core/Src/main.cpp **** 
 1350              		.loc 1 88 3 is_stmt 1 view .LVU293
  88:Core/Src/main.cpp **** 
 1351              		.loc 1 88 21 is_stmt 0 view .LVU294
 1352 0008 FFF7FEFF 		bl	_Z18SystemClock_Configv
 1353              	.LVL110:
  95:Core/Src/main.cpp ****   MX_CRC_Init();
 1354              		.loc 1 95 3 is_stmt 1 view .LVU295
  95:Core/Src/main.cpp ****   MX_CRC_Init();
 1355              		.loc 1 95 15 is_stmt 0 view .LVU296
 1356 000c FFF7FEFF 		bl	MX_GPIO_Init
 1357              	.LVL111:
  96:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
 1358              		.loc 1 96 3 is_stmt 1 view .LVU297
  96:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
 1359              		.loc 1 96 14 is_stmt 0 view .LVU298
 1360 0010 FFF7FEFF 		bl	MX_CRC_Init
 1361              	.LVL112:
 1362 0014 16E0     		b	.L64
 1363              	.LVL113:
 1364              	.L63:
 1365              	.LBB755:
 1366              	.LBB756:
 116:Core/Src/main.cpp ****     {
 1367              		.loc 1 116 19 view .LVU299
 1368 0016 2146     		mov	r1, r4
 1369 0018 0AA8     		add	r0, sp, #40
 1370 001a FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
 1371              	.LVL114:
 118:Core/Src/main.cpp ****     }
 1372              		.loc 1 118 7 is_stmt 1 view .LVU300
 118:Core/Src/main.cpp ****     }
 1373              		.loc 1 118 16 is_stmt 0 view .LVU301
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 176


 1374 001e 6420     		movs	r0, #100
 1375 0020 FFF7FEFF 		bl	HAL_Delay
 1376              	.LVL115:
 1377              	.LBB757:
 1378              	.LBI757:
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_dispose(); }
 1379              		.loc 8 794 7 is_stmt 1 view .LVU302
 1380              	.LBB758:
 1381              		.loc 8 795 19 is_stmt 0 view .LVU303
 1382 0024 0AA8     		add	r0, sp, #40
 1383              	.LVL116:
 1384              		.loc 8 795 19 view .LVU304
 1385 0026 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 1386              	.LVL117:
 1387              	.LBB759:
 1388              	.LBI759:
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 1389              		.loc 8 192 14 is_stmt 1 view .LVU305
 1390              	.LBB760:
 1391              	.LBB761:
 1392              	.LBI761:
 1393              		.loc 6 174 7 view .LVU306
 1394              	.LBB762:
 1395              	.LBI762:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1396              		.loc 5 90 7 view .LVU307
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1397              		.loc 5 90 7 is_stmt 0 view .LVU308
 1398              	.LBE762:
 1399              	.LBE761:
 1400              	.LBE760:
 1401              	.LBE759:
 1402              	.LBE758:
 1403              	.LBE757:
 116:Core/Src/main.cpp ****     {
 1404              		.loc 1 116 5 is_stmt 1 view .LVU309
 1405              	.LBB763:
 1406              	.LBI763:
1105:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       {
 1407              		.loc 12 1105 7 view .LVU310
 1408              	.LBB764:
1107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 1409              		.loc 12 1107 2 is_stmt 0 view .LVU311
 1410 002a 1834     		adds	r4, r4, #24
 1411              	.LVL118:
 1412              	.L62:
1107:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	return *this;
 1413              		.loc 12 1107 2 view .LVU312
 1414              	.LBE764:
 1415              	.LBE763:
 116:Core/Src/main.cpp ****     {
 1416              		.loc 1 116 19 is_stmt 1 discriminator 1 view .LVU313
 1417              	.LBB765:
 1418              	.LBI765:
1237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 1419              		.loc 12 1237 5 discriminator 1 view .LVU314
1237:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 177


 1420              		.loc 12 1237 5 is_stmt 0 discriminator 1 view .LVU315
 1421              	.LBE765:
 116:Core/Src/main.cpp ****     {
 1422              		.loc 1 116 19 discriminator 1 view .LVU316
 1423 002c AC42     		cmp	r4, r5
 1424 002e F2D1     		bne	.L63
 1425              	.LBE756:
 120:Core/Src/main.cpp ****     /* USER CODE END WHILE */
 1426              		.loc 1 120 5 is_stmt 1 view .LVU317
 120:Core/Src/main.cpp ****     /* USER CODE END WHILE */
 1427              		.loc 1 120 14 is_stmt 0 view .LVU318
 1428 0030 4FF4FA70 		mov	r0, #500
 1429 0034 FFF7FEFF 		bl	HAL_Delay
 1430              	.LVL119:
 124:Core/Src/main.cpp ****   /* USER CODE END 3 */
 1431              		.loc 1 124 3 view .LVU319
 1432 0038 01A8     		add	r0, sp, #4
 1433              	.LVL120:
 124:Core/Src/main.cpp ****   /* USER CODE END 3 */
 1434              		.loc 1 124 3 view .LVU320
 1435 003a FFF7FEFF 		bl	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 1436              	.LVL121:
 1437              	.LBB774:
 1438              	.LBI774:
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_dispose(); }
 1439              		.loc 8 794 7 is_stmt 1 view .LVU321
 1440              	.LBB775:
 1441              		.loc 8 795 19 is_stmt 0 view .LVU322
 1442 003e 04A8     		add	r0, sp, #16
 1443              	.LVL122:
 1444              		.loc 8 795 19 view .LVU323
 1445 0040 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 1446              	.LVL123:
 1447              	.LBB776:
 1448              	.LBI776:
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 1449              		.loc 8 192 14 is_stmt 1 view .LVU324
 1450              	.LBB777:
 1451              	.LBB778:
 1452              	.LBI778:
 1453              		.loc 6 174 7 view .LVU325
 1454              	.LBB779:
 1455              	.LBI779:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1456              		.loc 5 90 7 view .LVU326
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1457              		.loc 5 90 7 is_stmt 0 view .LVU327
 1458              	.LBE779:
 1459              	.LBE778:
 1460              	.LBE777:
 1461              	.LBE776:
 1462              	.LBE775:
 1463              	.LBE774:
 1464              	.LBE755:
 102:Core/Src/main.cpp ****   {
 1465              		.loc 1 102 3 is_stmt 1 view .LVU328
 1466              	.L64:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 178


 102:Core/Src/main.cpp ****   {
 1467              		.loc 1 102 3 view .LVU329
 1468              	.LBB854:
 104:Core/Src/main.cpp ****     HAL_Delay(100);
 1469              		.loc 1 104 5 view .LVU330
 1470 0044 2F4C     		ldr	r4, .L66
 1471              	.LVL124:
 104:Core/Src/main.cpp ****     HAL_Delay(100);
 1472              		.loc 1 104 5 is_stmt 0 view .LVU331
 1473 0046 0022     		movs	r2, #0
 1474 0048 4FF40051 		mov	r1, #8192
 1475 004c 2046     		mov	r0, r4
 1476 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1477              	.LVL125:
 105:Core/Src/main.cpp ****     LED1;
 1478              		.loc 1 105 5 is_stmt 1 view .LVU332
 105:Core/Src/main.cpp ****     LED1;
 1479              		.loc 1 105 14 is_stmt 0 view .LVU333
 1480 0052 6420     		movs	r0, #100
 1481 0054 FFF7FEFF 		bl	HAL_Delay
 1482              	.LVL126:
 106:Core/Src/main.cpp ****     HAL_Delay(100);
 1483              		.loc 1 106 5 is_stmt 1 view .LVU334
 1484 0058 0122     		movs	r2, #1
 1485 005a 4FF40051 		mov	r1, #8192
 1486 005e 2046     		mov	r0, r4
 1487 0060 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1488              	.LVL127:
 107:Core/Src/main.cpp ****     string str("hello c++");
 1489              		.loc 1 107 5 view .LVU335
 107:Core/Src/main.cpp ****     string str("hello c++");
 1490              		.loc 1 107 14 is_stmt 0 view .LVU336
 1491 0064 6420     		movs	r0, #100
 1492 0066 FFF7FEFF 		bl	HAL_Delay
 1493              	.LVL128:
 108:Core/Src/main.cpp ****     str.append("cppdemo!");
 1494              		.loc 1 108 5 is_stmt 1 view .LVU337
 1495              	.LBB780:
 1496              	.LBI780:
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 1497              		.loc 6 156 7 view .LVU338
 1498              	.LBB781:
 1499              	.LBI781:
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1500              		.loc 5 80 7 view .LVU339
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1501              		.loc 5 80 7 is_stmt 0 view .LVU340
 1502              	.LBE781:
 1503              	.LBE780:
 108:Core/Src/main.cpp ****     str.append("cppdemo!");
 1504              		.loc 1 108 27 view .LVU341
 1505 006a 10AA     		add	r2, sp, #64
 1506 006c 2649     		ldr	r1, .L66+4
 1507 006e 04A8     		add	r0, sp, #16
 1508 0070 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 1509              	.LVL129:
 1510              	.LBB782:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 179


 1511              	.LBI782:
 1512              		.loc 6 174 7 is_stmt 1 view .LVU342
 1513              	.LBB783:
 1514              	.LBI783:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1515              		.loc 5 90 7 view .LVU343
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1516              		.loc 5 90 7 is_stmt 0 view .LVU344
 1517              	.LBE783:
 1518              	.LBE782:
 109:Core/Src/main.cpp ****     vector<std::string> sVec;
 1519              		.loc 1 109 5 is_stmt 1 view .LVU345
 109:Core/Src/main.cpp ****     vector<std::string> sVec;
 1520              		.loc 1 109 15 is_stmt 0 view .LVU346
 1521 0074 2549     		ldr	r1, .L66+8
 1522 0076 04A8     		add	r0, sp, #16
 1523 0078 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc
 1524              	.LVL130:
 110:Core/Src/main.cpp ****     sVec.push_back("hello c++ 1\n");
 1525              		.loc 1 110 5 is_stmt 1 view .LVU347
 1526              	.LBB784:
 1527              	.LBI784:
 526:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
 1528              		.loc 3 526 7 view .LVU348
 1529              	.LBB785:
 1530              	.LBI785:
 312:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** #else
 1531              		.loc 3 312 7 view .LVU349
 1532              	.LBB786:
 1533              	.LBI786:
 137:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 1534              		.loc 3 137 2 view .LVU350
 1535              	.LBB787:
 1536              	.LBB788:
 1537              	.LBI788:
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 1538              		.loc 6 156 7 view .LVU351
 1539              	.LBB789:
 1540              	.LBI789:
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1541              		.loc 5 80 7 view .LVU352
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1542              		.loc 5 80 7 is_stmt 0 view .LVU353
 1543              	.LBE789:
 1544              	.LBE788:
 1545              	.LBB790:
 1546              	.LBI790:
  99:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 1547              		.loc 3 99 2 is_stmt 1 view .LVU354
 1548              	.LBB791:
 1549              	.LBB792:
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ }
 1550              		.loc 3 100 4 is_stmt 0 view .LVU355
 1551 007c 0023     		movs	r3, #0
 1552 007e 0193     		str	r3, [sp, #4]
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ }
 1553              		.loc 3 100 16 view .LVU356
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 180


 1554 0080 0293     		str	r3, [sp, #8]
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ }
 1555              		.loc 3 100 29 view .LVU357
 1556 0082 0393     		str	r3, [sp, #12]
 1557              	.LVL131:
 100:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 	{ }
 1558              		.loc 3 100 29 view .LVU358
 1559              	.LBE792:
 1560              	.LBE791:
 1561              	.LBE790:
 1562              	.LBE787:
 1563              	.LBE786:
 1564              	.LBE785:
 1565              	.LBE784:
 111:Core/Src/main.cpp ****     sVec.push_back("hello c++ 2\n");
 1566              		.loc 1 111 5 is_stmt 1 view .LVU359
 1567              	.LBB793:
 1568              	.LBI793:
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 1569              		.loc 6 156 7 view .LVU360
 1570              	.LBB794:
 1571              	.LBI794:
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1572              		.loc 5 80 7 view .LVU361
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1573              		.loc 5 80 7 is_stmt 0 view .LVU362
 1574              	.LBE794:
 1575              	.LBE793:
 111:Core/Src/main.cpp ****     sVec.push_back("hello c++ 2\n");
 1576              		.loc 1 111 19 view .LVU363
 1577 0084 17AA     		add	r2, sp, #92
 1578 0086 2249     		ldr	r1, .L66+12
 1579 0088 11A8     		add	r0, sp, #68
 1580 008a FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 1581              	.LVL132:
 1582              	.LBB795:
 1583              	.LBI795:
1293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { emplace_back(std::move(__x)); }
 1584              		.loc 3 1293 7 is_stmt 1 view .LVU364
 1585              	.LBB796:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1586              		.loc 3 1294 21 is_stmt 0 view .LVU365
 1587 008e 11A9     		add	r1, sp, #68
 1588              	.LVL133:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1589              		.loc 3 1294 21 view .LVU366
 1590 0090 01A8     		add	r0, sp, #4
 1591              	.LVL134:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1592              		.loc 3 1294 21 view .LVU367
 1593 0092 FFF7FEFF 		bl	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEE
 1594              	.LVL135:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1595              		.loc 3 1294 21 view .LVU368
 1596              	.LBE796:
 1597              	.LBE795:
 1598              	.LBB797:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 181


 1599              	.LBI797:
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_dispose(); }
 1600              		.loc 8 794 7 is_stmt 1 view .LVU369
 1601              	.LBB798:
 1602              		.loc 8 795 19 is_stmt 0 view .LVU370
 1603 0096 11A8     		add	r0, sp, #68
 1604              	.LVL136:
 1605              		.loc 8 795 19 view .LVU371
 1606 0098 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 1607              	.LVL137:
 1608              	.LBB799:
 1609              	.LBI799:
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 1610              		.loc 8 192 14 is_stmt 1 view .LVU372
 1611              	.LBB800:
 1612              	.LBB801:
 1613              	.LBI801:
 1614              		.loc 6 174 7 view .LVU373
 1615              	.LBB802:
 1616              	.LBI802:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1617              		.loc 5 90 7 view .LVU374
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1618              		.loc 5 90 7 is_stmt 0 view .LVU375
 1619              	.LBE802:
 1620              	.LBE801:
 1621              	.LBE800:
 1622              	.LBE799:
 1623              	.LBE798:
 1624              	.LBE797:
 1625              	.LBB803:
 1626              	.LBI803:
 1627              		.loc 6 174 7 is_stmt 1 view .LVU376
 1628              	.LBB804:
 1629              	.LBI804:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1630              		.loc 5 90 7 view .LVU377
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1631              		.loc 5 90 7 is_stmt 0 view .LVU378
 1632              	.LBE804:
 1633              	.LBE803:
 112:Core/Src/main.cpp ****     sVec.push_back("hello c++ 3\n");
 1634              		.loc 1 112 5 is_stmt 1 view .LVU379
 1635              	.LBB805:
 1636              	.LBI805:
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 1637              		.loc 6 156 7 view .LVU380
 1638              	.LBB806:
 1639              	.LBI806:
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1640              		.loc 5 80 7 view .LVU381
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1641              		.loc 5 80 7 is_stmt 0 view .LVU382
 1642              	.LBE806:
 1643              	.LBE805:
 112:Core/Src/main.cpp ****     sVec.push_back("hello c++ 3\n");
 1644              		.loc 1 112 19 view .LVU383
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 182


 1645 009c 1EAA     		add	r2, sp, #120
 1646 009e 1D49     		ldr	r1, .L66+16
 1647 00a0 18A8     		add	r0, sp, #96
 1648 00a2 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 1649              	.LVL138:
 1650              	.LBB807:
 1651              	.LBI807:
1293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { emplace_back(std::move(__x)); }
 1652              		.loc 3 1293 7 is_stmt 1 view .LVU384
 1653              	.LBB808:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1654              		.loc 3 1294 21 is_stmt 0 view .LVU385
 1655 00a6 18A9     		add	r1, sp, #96
 1656              	.LVL139:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1657              		.loc 3 1294 21 view .LVU386
 1658 00a8 01A8     		add	r0, sp, #4
 1659              	.LVL140:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1660              		.loc 3 1294 21 view .LVU387
 1661 00aa FFF7FEFF 		bl	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEE
 1662              	.LVL141:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1663              		.loc 3 1294 21 view .LVU388
 1664              	.LBE808:
 1665              	.LBE807:
 1666              	.LBB809:
 1667              	.LBI809:
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_dispose(); }
 1668              		.loc 8 794 7 is_stmt 1 view .LVU389
 1669              	.LBB810:
 1670              		.loc 8 795 19 is_stmt 0 view .LVU390
 1671 00ae 18A8     		add	r0, sp, #96
 1672              	.LVL142:
 1673              		.loc 8 795 19 view .LVU391
 1674 00b0 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 1675              	.LVL143:
 1676              	.LBB811:
 1677              	.LBI811:
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 1678              		.loc 8 192 14 is_stmt 1 view .LVU392
 1679              	.LBB812:
 1680              	.LBB813:
 1681              	.LBI813:
 1682              		.loc 6 174 7 view .LVU393
 1683              	.LBB814:
 1684              	.LBI814:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1685              		.loc 5 90 7 view .LVU394
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1686              		.loc 5 90 7 is_stmt 0 view .LVU395
 1687              	.LBE814:
 1688              	.LBE813:
 1689              	.LBE812:
 1690              	.LBE811:
 1691              	.LBE810:
 1692              	.LBE809:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 183


 1693              	.LBB815:
 1694              	.LBI815:
 1695              		.loc 6 174 7 is_stmt 1 view .LVU396
 1696              	.LBB816:
 1697              	.LBI816:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1698              		.loc 5 90 7 view .LVU397
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1699              		.loc 5 90 7 is_stmt 0 view .LVU398
 1700              	.LBE816:
 1701              	.LBE815:
 113:Core/Src/main.cpp ****     sVec.push_back("hello c++ 4\n");
 1702              		.loc 1 113 5 is_stmt 1 view .LVU399
 1703              	.LBB817:
 1704              	.LBI817:
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 1705              		.loc 6 156 7 view .LVU400
 1706              	.LBB818:
 1707              	.LBI818:
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1708              		.loc 5 80 7 view .LVU401
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1709              		.loc 5 80 7 is_stmt 0 view .LVU402
 1710              	.LBE818:
 1711              	.LBE817:
 113:Core/Src/main.cpp ****     sVec.push_back("hello c++ 4\n");
 1712              		.loc 1 113 19 view .LVU403
 1713 00b4 25AA     		add	r2, sp, #148
 1714 00b6 1849     		ldr	r1, .L66+20
 1715 00b8 1FA8     		add	r0, sp, #124
 1716 00ba FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 1717              	.LVL144:
 1718              	.LBB819:
 1719              	.LBI819:
1293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { emplace_back(std::move(__x)); }
 1720              		.loc 3 1293 7 is_stmt 1 view .LVU404
 1721              	.LBB820:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1722              		.loc 3 1294 21 is_stmt 0 view .LVU405
 1723 00be 1FA9     		add	r1, sp, #124
 1724              	.LVL145:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1725              		.loc 3 1294 21 view .LVU406
 1726 00c0 01A8     		add	r0, sp, #4
 1727              	.LVL146:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1728              		.loc 3 1294 21 view .LVU407
 1729 00c2 FFF7FEFF 		bl	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEE
 1730              	.LVL147:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1731              		.loc 3 1294 21 view .LVU408
 1732              	.LBE820:
 1733              	.LBE819:
 1734              	.LBB821:
 1735              	.LBI821:
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_dispose(); }
 1736              		.loc 8 794 7 is_stmt 1 view .LVU409
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 184


 1737              	.LBB822:
 1738              		.loc 8 795 19 is_stmt 0 view .LVU410
 1739 00c6 1FA8     		add	r0, sp, #124
 1740              	.LVL148:
 1741              		.loc 8 795 19 view .LVU411
 1742 00c8 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 1743              	.LVL149:
 1744              	.LBB823:
 1745              	.LBI823:
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 1746              		.loc 8 192 14 is_stmt 1 view .LVU412
 1747              	.LBB824:
 1748              	.LBB825:
 1749              	.LBI825:
 1750              		.loc 6 174 7 view .LVU413
 1751              	.LBB826:
 1752              	.LBI826:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1753              		.loc 5 90 7 view .LVU414
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1754              		.loc 5 90 7 is_stmt 0 view .LVU415
 1755              	.LBE826:
 1756              	.LBE825:
 1757              	.LBE824:
 1758              	.LBE823:
 1759              	.LBE822:
 1760              	.LBE821:
 1761              	.LBB827:
 1762              	.LBI827:
 1763              		.loc 6 174 7 is_stmt 1 view .LVU416
 1764              	.LBB828:
 1765              	.LBI828:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1766              		.loc 5 90 7 view .LVU417
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1767              		.loc 5 90 7 is_stmt 0 view .LVU418
 1768              	.LBE828:
 1769              	.LBE827:
 114:Core/Src/main.cpp ****     sVec.push_back("hello c++ 5\n");
 1770              		.loc 1 114 5 is_stmt 1 view .LVU419
 1771              	.LBB829:
 1772              	.LBI829:
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 1773              		.loc 6 156 7 view .LVU420
 1774              	.LBB830:
 1775              	.LBI830:
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1776              		.loc 5 80 7 view .LVU421
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1777              		.loc 5 80 7 is_stmt 0 view .LVU422
 1778              	.LBE830:
 1779              	.LBE829:
 114:Core/Src/main.cpp ****     sVec.push_back("hello c++ 5\n");
 1780              		.loc 1 114 19 view .LVU423
 1781 00cc 2CAA     		add	r2, sp, #176
 1782 00ce 1349     		ldr	r1, .L66+24
 1783 00d0 26A8     		add	r0, sp, #152
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 185


 1784 00d2 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 1785              	.LVL150:
 1786              	.LBB831:
 1787              	.LBI831:
1293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { emplace_back(std::move(__x)); }
 1788              		.loc 3 1293 7 is_stmt 1 view .LVU424
 1789              	.LBB832:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1790              		.loc 3 1294 21 is_stmt 0 view .LVU425
 1791 00d6 26A9     		add	r1, sp, #152
 1792              	.LVL151:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1793              		.loc 3 1294 21 view .LVU426
 1794 00d8 01A8     		add	r0, sp, #4
 1795              	.LVL152:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1796              		.loc 3 1294 21 view .LVU427
 1797 00da FFF7FEFF 		bl	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEE
 1798              	.LVL153:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1799              		.loc 3 1294 21 view .LVU428
 1800              	.LBE832:
 1801              	.LBE831:
 1802              	.LBB833:
 1803              	.LBI833:
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_dispose(); }
 1804              		.loc 8 794 7 is_stmt 1 view .LVU429
 1805              	.LBB834:
 1806              		.loc 8 795 19 is_stmt 0 view .LVU430
 1807 00de 26A8     		add	r0, sp, #152
 1808              	.LVL154:
 1809              		.loc 8 795 19 view .LVU431
 1810 00e0 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 1811              	.LVL155:
 1812              	.LBB835:
 1813              	.LBI835:
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 1814              		.loc 8 192 14 is_stmt 1 view .LVU432
 1815              	.LBB836:
 1816              	.LBB837:
 1817              	.LBI837:
 1818              		.loc 6 174 7 view .LVU433
 1819              	.LBB838:
 1820              	.LBI838:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1821              		.loc 5 90 7 view .LVU434
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1822              		.loc 5 90 7 is_stmt 0 view .LVU435
 1823              	.LBE838:
 1824              	.LBE837:
 1825              	.LBE836:
 1826              	.LBE835:
 1827              	.LBE834:
 1828              	.LBE833:
 1829              	.LBB839:
 1830              	.LBI839:
 1831              		.loc 6 174 7 is_stmt 1 view .LVU436
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 186


 1832              	.LBB840:
 1833              	.LBI840:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1834              		.loc 5 90 7 view .LVU437
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1835              		.loc 5 90 7 is_stmt 0 view .LVU438
 1836              	.LBE840:
 1837              	.LBE839:
 115:Core/Src/main.cpp ****     for (auto s : sVec)
 1838              		.loc 1 115 5 is_stmt 1 view .LVU439
 1839              	.LBB841:
 1840              	.LBI841:
 156:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\allocator.h **** 
 1841              		.loc 6 156 7 view .LVU440
 1842              	.LBB842:
 1843              	.LBI842:
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1844              		.loc 5 80 7 view .LVU441
  80:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1845              		.loc 5 80 7 is_stmt 0 view .LVU442
 1846              	.LBE842:
 1847              	.LBE841:
 115:Core/Src/main.cpp ****     for (auto s : sVec)
 1848              		.loc 1 115 19 view .LVU443
 1849 00e4 33AA     		add	r2, sp, #204
 1850 00e6 0E49     		ldr	r1, .L66+28
 1851 00e8 2DA8     		add	r0, sp, #180
 1852 00ea FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 1853              	.LVL156:
 1854              	.LBB843:
 1855              	.LBI843:
1293:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { emplace_back(std::move(__x)); }
 1856              		.loc 3 1293 7 is_stmt 1 view .LVU444
 1857              	.LBB844:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1858              		.loc 3 1294 21 is_stmt 0 view .LVU445
 1859 00ee 2DA9     		add	r1, sp, #180
 1860              	.LVL157:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1861              		.loc 3 1294 21 view .LVU446
 1862 00f0 01A8     		add	r0, sp, #4
 1863              	.LVL158:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1864              		.loc 3 1294 21 view .LVU447
 1865 00f2 FFF7FEFF 		bl	_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEE
 1866              	.LVL159:
1294:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h **** 
 1867              		.loc 3 1294 21 view .LVU448
 1868              	.LBE844:
 1869              	.LBE843:
 1870              	.LBB845:
 1871              	.LBI845:
 794:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       { _M_dispose(); }
 1872              		.loc 8 794 7 is_stmt 1 view .LVU449
 1873              	.LBB846:
 1874              		.loc 8 795 19 is_stmt 0 view .LVU450
 1875 00f6 2DA8     		add	r0, sp, #180
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 187


 1876              	.LVL160:
 1877              		.loc 8 795 19 view .LVU451
 1878 00f8 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 1879              	.LVL161:
 1880              	.LBB847:
 1881              	.LBI847:
 192:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\basic_string.h ****       {
 1882              		.loc 8 192 14 is_stmt 1 view .LVU452
 1883              	.LBB848:
 1884              	.LBB849:
 1885              	.LBI849:
 1886              		.loc 6 174 7 view .LVU453
 1887              	.LBB850:
 1888              	.LBI850:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1889              		.loc 5 90 7 view .LVU454
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1890              		.loc 5 90 7 is_stmt 0 view .LVU455
 1891              	.LBE850:
 1892              	.LBE849:
 1893              	.LBE848:
 1894              	.LBE847:
 1895              	.LBE846:
 1896              	.LBE845:
 1897              	.LBB851:
 1898              	.LBI851:
 1899              		.loc 6 174 7 is_stmt 1 view .LVU456
 1900              	.LBB852:
 1901              	.LBI852:
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1902              		.loc 5 90 7 view .LVU457
  90:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\new_allocator.h **** 
 1903              		.loc 5 90 7 is_stmt 0 view .LVU458
 1904              	.LBE852:
 1905              	.LBE851:
 116:Core/Src/main.cpp ****     {
 1906              		.loc 1 116 5 is_stmt 1 view .LVU459
 1907              	.LBB853:
 1908              	.LBB766:
 1909              	.LBI766:
 868:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 1910              		.loc 3 868 7 view .LVU460
 1911              	.LBB767:
 1912              	.LBB768:
 1913              	.LBI768:
1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1914              		.loc 12 1072 7 view .LVU461
1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1915              		.loc 12 1072 7 is_stmt 0 view .LVU462
 1916              	.LBE768:
 1917              	.LBE767:
 1918              	.LBE766:
 116:Core/Src/main.cpp ****     {
 1919              		.loc 1 116 19 view .LVU463
 1920 00fc 019C     		ldr	r4, [sp, #4]
 1921              	.LVL162:
 1922              	.LBB769:
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 188


 1923              	.LBI769:
 888:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1924              		.loc 3 888 7 is_stmt 1 view .LVU464
 1925              	.LBB770:
 1926              	.LBB771:
 1927              	.LBI771:
1072:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 1928              		.loc 12 1072 7 view .LVU465
 1929              	.LBB772:
 1930              	.LBB773:
1073:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 1931              		.loc 12 1073 9 is_stmt 0 view .LVU466
 1932 00fe 029D     		ldr	r5, [sp, #8]
 1933              	.LVL163:
1073:c:\program files (x86)\arm gnu toolchain arm-none-eabi\12.2 rel1\arm-none-eabi\include\c++\12.2.1\bits\stl_iterator.h **** 
 1934              		.loc 12 1073 9 view .LVU467
 1935              	.LBE773:
 1936              	.LBE772:
 1937              	.LBE771:
 1938              	.LBE770:
 1939              	.LBE769:
 116:Core/Src/main.cpp ****     {
 1940              		.loc 1 116 5 view .LVU468
 1941 0100 94E7     		b	.L62
 1942              	.L67:
 1943 0102 00BF     		.align	2
 1944              	.L66:
 1945 0104 00100140 		.word	1073811456
 1946 0108 00000000 		.word	.LC2
 1947 010c 0C000000 		.word	.LC3
 1948 0110 18000000 		.word	.LC4
 1949 0114 28000000 		.word	.LC5
 1950 0118 38000000 		.word	.LC6
 1951 011c 48000000 		.word	.LC7
 1952 0120 58000000 		.word	.LC8
 1953              	.LBE853:
 1954              	.LBE854:
 1955              		.cfi_endproc
 1956              	.LFE1565:
 1958              		.text
 1959              	.Letext0:
 1960              		.file 16 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1961              		.file 17 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1962              		.file 18 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1963              		.file 19 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1964              		.file 20 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\lib\\gcc\\arm-none-
 1965              		.file 21 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1966              		.file 22 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1967              		.file 23 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1968              		.file 24 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1969              		.file 25 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1970              		.file 26 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1971              		.file 27 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1972              		.file 28 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1973              		.file 29 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1974              		.file 30 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1975              		.file 31 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 189


 1976              		.file 32 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1977              		.file 33 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1978              		.file 34 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1979              		.file 35 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1980              		.file 36 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1981              		.file 37 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1982              		.file 38 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1983              		.file 39 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1984              		.file 40 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1985              		.file 41 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1986              		.file 42 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1987              		.file 43 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1988              		.file 44 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\lib\\gcc\\arm-none-
 1989              		.file 45 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1990              		.file 46 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1991              		.file 47 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1992              		.file 48 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1993              		.file 49 "c:\\program files (x86)\\arm gnu toolchain arm-none-eabi\\12.2 rel1\\arm-none-eabi\\incl
 1994              		.file 50 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1995              		.file 51 "Core/Inc/crc.h"
 1996              		.file 52 "Core/Inc/gpio.h"
 1997              		.file 53 "<built-in>"
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 190


DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:19     .text.Error_Handler:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:25     .text.Error_Handler:00000000 Error_Handler
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:56     .text._Z18SystemClock_Configv:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:62     .text._Z18SystemClock_Configv:00000000 _Z18SystemClock_Configv
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:166    .text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:172    .text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:00000000 _ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:172    .text._ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:00000000 _ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:249    .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:255    .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:00000000 _ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:255    .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:00000000 _ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:348    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:354    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:00000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:524    .rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.str1.4:00000000 $d
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:528    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:534    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:00000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:627    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:0000002c $d
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:534    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:00000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:635    .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4backEv:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:641    .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4backEv:00000000 _ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4backEv
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:686    .text._ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:692    .text._ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc:00000000 _ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:827    .text._ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc:00000058 $d
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:833    .text._ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:839    .text._ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv:00000000 _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:884    .text._ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv:00000024 $d
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:890    .text._ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:896    .text._ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_:00000000 _ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:991    .rodata._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_.str1.4:00000000 $d
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:995    .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:1001   .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_:00000000 _ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:1214   .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_:0000007c $d
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:1221   .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEERS5_DpOT_:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:1227   .text._ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEERS5_DpOT_:00000000 _ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEERS5_DpOT_
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:1303   .rodata.main.str1.4:00000000 $d
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:1325   .text.main:00000000 $t
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:1331   .text.main:00000000 main
C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s:1945   .text.main:00000104 $d
                           .group:00000000 _ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED5Ev
                           .group:00000000 _ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED5Ev
                           .group:00000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC5IS3_EEPKcRKS3_

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
_ZdlPvj
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
strlen
_ZSt19__throw_logic_errorPKc
_ZSt20__throw_length_errorPKc
_Znwj
_ZSt28__throw_bad_array_new_lengthv
_ZSt17__throw_bad_allocv
ARM GAS  C:\Users\wyx12\AppData\Local\Temp\ccLiZMYq.s 			page 191


_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_
HAL_Init
MX_GPIO_Init
MX_CRC_Init
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
HAL_Delay
HAL_GPIO_WritePin
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc
